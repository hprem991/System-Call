!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALT	kbd.h	11;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASSERT	lapic.c	24;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	sh.c	12;"	d	file:
BACKSPACE	console.c	125;"	d	file:
BBLOCK	fs.h	47;"	d
BCAST	lapic.c	27;"	d	file:
BIG	usertests.c	1452;"	d	file:
BPB	fs.h	44;"	d
BSIZE	fs.h	6;"	d
BUSY	lapic.c	28;"	d	file:
B_BUSY	buf.h	10;"	d
B_DIRTY	buf.h	12;"	d
B_VALID	buf.h	11;"	d
C	console.c	187;"	d	file:
C	kbd.h	32;"	d
C	kernel.asm	/^#define C(x)  ((x)-'@')  \/\/ Control-x$/;"	d
CAPSLOCK	kbd.h	13;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -fvar-tracking -fvar-tracking-assignments -O0 -g -Wall -MD -gdwarf-2 -m32 -Werror -fno-omit-frame-pointer$/;"	m
CMOS_PORT	lapic.c	134;"	d	file:
CMOS_RETURN	lapic.c	135;"	d	file:
CMOS_STATA	lapic.c	174;"	d	file:
CMOS_STATB	lapic.c	175;"	d	file:
CMOS_UIP	lapic.c	176;"	d	file:
COM1	uart.c	14;"	d	file:
CONSOLE	file.h	38;"	d
CONV	kernel.asm	/^#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))$/;"	d
CONV	lapic.c	225;"	d	file:
CONV	lapic.c	232;"	d	file:
CPUS	Makefile	/^CPUS := 2$/;"	m
CR0_AM	mmu.h	35;"	d
CR0_CD	mmu.h	37;"	d
CR0_EM	mmu.h	30;"	d
CR0_ET	mmu.h	32;"	d
CR0_MP	mmu.h	29;"	d
CR0_NE	mmu.h	33;"	d
CR0_NW	mmu.h	36;"	d
CR0_PE	mmu.h	28;"	d
CR0_PG	mmu.h	38;"	d
CR0_TS	mmu.h	31;"	d
CR0_WP	mmu.h	34;"	d
CR4_PSE	mmu.h	40;"	d
CRTPORT	console.c	126;"	d	file:
CRTPORT	kernel.asm	/^#define CRTPORT 0x3d4$/;"	d
CS550HTSYSCALL	usys.S	/^#define CS550HTSYSCALL(name) \\$/;"	d
CS550LSSYSCALL	usys.S	/^#define CS550LSSYSCALL(name) \\$/;"	d
CTL	kbd.h	10;"	d
DAY	kernel.asm	/^#define DAY     0x07$/;"	d
DAY	lapic.c	181;"	d	file:
DEASSERT	lapic.c	25;"	d	file:
DELIVS	lapic.c	23;"	d	file:
DEVSPACE	memlayout.h	5;"	d
DIRSIZ	fs.h	50;"	d
DPL_USER	mmu.h	79;"	d
Default	cs550_syscall.c	/^int Default(void){$/;"	f
Default	cs550_syscall.s	/^Default:$/;"	l
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cs550_user.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	entryother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	17;"	d
ELF_MAGIC	elf.h	3;"	d
ELF_PROG_FLAG_EXEC	elf.h	40;"	d
ELF_PROG_FLAG_READ	elf.h	42;"	d
ELF_PROG_FLAG_WRITE	elf.h	41;"	d
ELF_PROG_LOAD	elf.h	37;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	18;"	d	file:
EOI	lapic.c	16;"	d	file:
ERROR	lapic.c	37;"	d	file:
ESR	lapic.c	19;"	d	file:
EXEC	sh.c	8;"	d	file:
EXTMEM	memlayout.h	3;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon4
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon4
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon4
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	lapic.c	29;"	d	file:
FL_AC	mmu.h	22;"	d
FL_AF	mmu.h	7;"	d
FL_CF	mmu.h	5;"	d
FL_DF	mmu.h	12;"	d
FL_ID	mmu.h	25;"	d
FL_IF	mmu.h	11;"	d
FL_IOPL_0	mmu.h	15;"	d
FL_IOPL_1	mmu.h	16;"	d
FL_IOPL_2	mmu.h	17;"	d
FL_IOPL_3	mmu.h	18;"	d
FL_IOPL_MASK	mmu.h	14;"	d
FL_NT	mmu.h	19;"	d
FL_OF	mmu.h	13;"	d
FL_PF	mmu.h	6;"	d
FL_RF	mmu.h	20;"	d
FL_SF	mmu.h	9;"	d
FL_TF	mmu.h	10;"	d
FL_VIF	mmu.h	23;"	d
FL_VIP	mmu.h	24;"	d
FL_VM	mmu.h	21;"	d
FL_ZF	mmu.h	8;"	d
FSSIZE	param.h	13;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	180;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	41;"	d
ICRHI	lapic.c	30;"	d	file:
ICRLO	lapic.c	20;"	d	file:
ID	lapic.c	13;"	d	file:
IDE_BSY	ide.c	16;"	d	file:
IDE_CMD_READ	ide.c	21;"	d	file:
IDE_CMD_WRITE	ide.c	22;"	d	file:
IDE_DF	ide.c	18;"	d	file:
IDE_DRDY	ide.c	17;"	d	file:
IDE_ERR	ide.c	19;"	d	file:
INIT	lapic.c	21;"	d	file:
INPUT_BUF	console.c	179;"	d	file:
INT_ACTIVELOW	ioapic.c	22;"	d	file:
INT_DISABLED	ioapic.c	20;"	d	file:
INT_LEVEL	ioapic.c	21;"	d	file:
INT_LOGICAL	ioapic.c	23;"	d	file:
IOAPIC	ioapic.c	9;"	d	file:
IO_PIC1	picirq.c	8;"	d	file:
IO_PIC2	picirq.c	9;"	d	file:
IO_TIMER1	timer.c	10;"	d	file:
IPB	fs.h	38;"	d
IRQ_COM1	traps.h	34;"	d
IRQ_ERROR	traps.h	36;"	d
IRQ_IDE	traps.h	35;"	d
IRQ_KBD	traps.h	33;"	d
IRQ_SLAVE	picirq.c	11;"	d	file:
IRQ_SPURIOUS	traps.h	37;"	d
IRQ_TIMER	traps.h	32;"	d
I_BUSY	file.h	26;"	d
I_VALID	file.h	27;"	d
KBDATAP	kbd.h	5;"	d
KBSTATP	kbd.h	3;"	d
KBS_DIB	kbd.h	4;"	d
KERNBASE	kernel.asm	/^#define KERNBASE 0x80000000         \/\/ First kernel virtual address$/;"	d
KERNBASE	memlayout.h	8;"	d
KERNLINK	kernel.asm	/^#define KERNLINK (KERNBASE+EXTMEM)  \/\/ Address where kernel is linked$/;"	d
KERNLINK	memlayout.h	9;"	d
KEY_DEL	kbd.h	29;"	d
KEY_DN	kbd.h	23;"	d
KEY_END	kbd.h	21;"	d
KEY_HOME	kbd.h	20;"	d
KEY_INS	kbd.h	28;"	d
KEY_LF	kbd.h	24;"	d
KEY_PGDN	kbd.h	27;"	d
KEY_PGUP	kbd.h	26;"	d
KEY_RT	kbd.h	25;"	d
KEY_UP	kbd.h	22;"	d
KSTACKSIZE	param.h	2;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LEVEL	lapic.c	26;"	d	file:
LINT0	lapic.c	35;"	d	file:
LINT1	lapic.c	36;"	d	file:
LIST	sh.c	11;"	d	file:
LOGSIZE	param.h	11;"	d
MASKED	lapic.c	38;"	d	file:
MAXARG	param.h	9;"	d
MAXARGS	sh.c	14;"	d	file:
MAXFILE	fs.h	25;"	d
MAXOPBLOCKS	param.h	10;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	179;"	d	file:
MONTH	kernel.asm	/^#define MONTH   0x08$/;"	d
MONTH	lapic.c	182;"	d	file:
MPBOOT	mp.h	34;"	d
MPBUS	mp.h	50;"	d
MPIOAPIC	mp.h	51;"	d
MPIOINTR	mp.h	52;"	d
MPLINTR	mp.h	53;"	d
MPPROC	mp.h	49;"	d
N	forktest.asm	/^#define N  1000$/;"	d
N	forktest.c	8;"	d	file:
NBUF	param.h	12;"	d
NCPU	param.h	3;"	d
NDEV	param.h	7;"	d
NDIRECT	fs.h	23;"	d
NELEM	defs.h	189;"	d
NFILE	param.h	5;"	d
NINDIRECT	fs.h	24;"	d
NINODE	param.h	6;"	d
NINODES	mkfs.c	18;"	d	file:
NO	kbd.h	7;"	d
NOFILE	param.h	4;"	d
NPDENTRIES	mmu.h	121;"	d
NPROC	param.h	1;"	d
NPTENTRIES	mmu.h	122;"	d
NSEGS	proc.h	2;"	d
NUMLOCK	kbd.h	14;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
O_CREATE	fcntl.h	4;"	d
O_RDONLY	fcntl.h	1;"	d
O_RDWR	fcntl.h	3;"	d
O_WRONLY	fcntl.h	2;"	d
Operation	cs550_syscall.c	/^typedef int (* Operation)(void);$/;"	t	file:
P2V	memlayout.h	19;"	d
P2V_WO	memlayout.h	22;"	d
PCINT	lapic.c	34;"	d	file:
PDX	mmu.h	112;"	d
PDXSHIFT	mmu.h	127;"	d
PERIODIC	lapic.c	33;"	d	file:
PGADDR	mmu.h	118;"	d
PGROUNDDOWN	mmu.h	130;"	d
PGROUNDUP	mmu.h	129;"	d
PGSHIFT	mmu.h	125;"	d
PGSIZE	mmu.h	123;"	d
PHYSTOP	memlayout.h	4;"	d
PIPE	sh.c	10;"	d	file:
PIPESIZE	pipe.c	10;"	d	file:
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_A	mmu.h	138;"	d
PTE_ADDR	mmu.h	144;"	d
PTE_D	mmu.h	139;"	d
PTE_FLAGS	mmu.h	145;"	d
PTE_MBZ	mmu.h	141;"	d
PTE_P	mmu.h	133;"	d
PTE_PCD	mmu.h	137;"	d
PTE_PS	mmu.h	140;"	d
PTE_PWT	mmu.h	136;"	d
PTE_U	mmu.h	135;"	d
PTE_W	mmu.h	134;"	d
PTX	mmu.h	115;"	d
PTXSHIFT	mmu.h	126;"	d
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)$/;"	m
REDIR	sh.c	9;"	d	file:
REG_ID	ioapic.c	11;"	d	file:
REG_TABLE	ioapic.c	13;"	d	file:
REG_VER	ioapic.c	12;"	d	file:
ROOTDEV	param.h	8;"	d
ROOTINO	fs.h	5;"	d
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	15;"	d
SECS	lapic.c	178;"	d	file:
SECTOR_SIZE	ide.c	15;"	d	file:
SECTSIZE	bootmain.c	13;"	d	file:
SEG	mmu.h	69;"	d
SEG16	mmu.h	73;"	d
SEG_ASM	asm.h	11;"	d
SEG_KCODE	mmu.h	42;"	d
SEG_KCPU	mmu.h	44;"	d
SEG_KDATA	mmu.h	43;"	d
SEG_NULLASM	asm.h	5;"	d
SEG_TSS	mmu.h	47;"	d
SEG_UCODE	mmu.h	45;"	d
SEG_UDATA	mmu.h	46;"	d
SETGATE	mmu.h	213;"	d
SHIFT	kbd.h	9;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	22;"	d	file:
STA_A	asm.h	21;"	d
STA_A	mmu.h	87;"	d
STA_C	asm.h	18;"	d
STA_C	mmu.h	84;"	d
STA_E	asm.h	17;"	d
STA_E	mmu.h	83;"	d
STA_R	asm.h	20;"	d
STA_R	mmu.h	86;"	d
STA_W	asm.h	19;"	d
STA_W	mmu.h	85;"	d
STA_X	asm.h	16;"	d
STA_X	mmu.h	82;"	d
STS_CG16	mmu.h	93;"	d
STS_CG32	mmu.h	99;"	d
STS_IG16	mmu.h	95;"	d
STS_IG32	mmu.h	100;"	d
STS_LDT	mmu.h	91;"	d
STS_T16A	mmu.h	90;"	d
STS_T16B	mmu.h	92;"	d
STS_T32A	mmu.h	97;"	d
STS_T32B	mmu.h	98;"	d
STS_TG	mmu.h	94;"	d
STS_TG16	mmu.h	96;"	d
STS_TG32	mmu.h	101;"	d
SVR	lapic.c	17;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_chdir	syscall.h	10;"	d
SYS_close	syscall.h	22;"	d
SYS_date	syscall.h	23;"	d
SYS_dup	syscall.h	11;"	d
SYS_exec	syscall.h	8;"	d
SYS_exit	syscall.h	3;"	d
SYS_fork	syscall.h	2;"	d
SYS_fstat	syscall.h	9;"	d
SYS_getpid	syscall.h	12;"	d
SYS_kill	syscall.h	7;"	d
SYS_link	syscall.h	20;"	d
SYS_mkdir	syscall.h	21;"	d
SYS_mknod	syscall.h	18;"	d
SYS_open	syscall.h	16;"	d
SYS_pipe	syscall.h	5;"	d
SYS_read	syscall.h	6;"	d
SYS_sbrk	syscall.h	13;"	d
SYS_sleep	syscall.h	14;"	d
SYS_unlink	syscall.h	19;"	d
SYS_uptime	syscall.h	15;"	d
SYS_wait	syscall.h	4;"	d
SYS_write	syscall.h	17;"	d
TCCR	lapic.c	40;"	d	file:
TDCR	lapic.c	41;"	d	file:
TICR	lapic.c	39;"	d	file:
TIMER	lapic.c	31;"	d	file:
TIMER_16BIT	kernel.asm	/^#define TIMER_16BIT     0x30    \/\/ r\/w counter 16 bits, LSB first$/;"	d
TIMER_16BIT	timer.c	22;"	d	file:
TIMER_DIV	timer.c	17;"	d	file:
TIMER_FREQ	timer.c	16;"	d	file:
TIMER_MODE	timer.c	19;"	d	file:
TIMER_RATEGEN	kernel.asm	/^#define TIMER_RATEGEN   0x04    \/\/ mode 2, rate generator$/;"	d
TIMER_RATEGEN	timer.c	21;"	d	file:
TIMER_SEL0	timer.c	20;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; \\$/;"	m
TPR	lapic.c	15;"	d	file:
T_ALIGN	traps.h	21;"	d
T_BOUND	traps.h	9;"	d
T_BRKPT	traps.h	7;"	d
T_CS550HTSYSCALL	traps.h	42;"	d
T_CS550LSSYSCALL	traps.h	41;"	d
T_DBLFLT	traps.h	12;"	d
T_DEBUG	traps.h	5;"	d
T_DEFAULT	traps.h	28;"	d
T_DEV	stat.h	3;"	d
T_DEVICE	traps.h	11;"	d
T_DIR	stat.h	1;"	d
T_DIVIDE	traps.h	4;"	d
T_FILE	stat.h	2;"	d
T_FPERR	traps.h	20;"	d
T_GPFLT	traps.h	17;"	d
T_ILLOP	traps.h	10;"	d
T_IRQ0	traps.h	30;"	d
T_MCHK	traps.h	22;"	d
T_NMI	traps.h	6;"	d
T_OFLOW	traps.h	8;"	d
T_PGFLT	traps.h	18;"	d
T_SEGNP	traps.h	15;"	d
T_SIMDERR	traps.h	23;"	d
T_STACK	traps.h	16;"	d
T_SYSCALL	traps.h	27;"	d
T_TSS	traps.h	14;"	d
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
V2P	memlayout.h	18;"	d
V2P_WO	memlayout.h	21;"	d
VER	lapic.c	14;"	d	file:
X1	lapic.c	32;"	d	file:
YEAR	kernel.asm	/^#define YEAR    0x09$/;"	d
YEAR	lapic.c	183;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_cat	cat.asm	/^_cat:     file format elf32-i386$/;"	l
_cs550_user	cs550_user.asm	/^_cs550_user:     file format elf32-i386$/;"	l
_echo	echo.asm	/^_echo:     file format elf32-i386$/;"	l
_forktest	forktest.asm	/^_forktest:     file format elf32-i386$/;"	l
_grep	grep.asm	/^_grep:     file format elf32-i386$/;"	l
_init	init.asm	/^_init:     file format elf32-i386$/;"	l
_kill	kill.asm	/^_kill:     file format elf32-i386$/;"	l
_ln	ln.asm	/^_ln:     file format elf32-i386$/;"	l
_ls	ls.asm	/^_ls:     file format elf32-i386$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf32-i386$/;"	l
_rm	rm.asm	/^_rm:     file format elf32-i386$/;"	l
_sh	sh.asm	/^_sh:     file format elf32-i386$/;"	l
_start	entry.S	/^_start = V2P_WO(entry)$/;"	d
_stressfs	stressfs.asm	/^_stressfs:     file format elf32-i386$/;"	l
_wc	wc.asm	/^_wc:     file format elf32-i386$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf32-i386$/;"	l
a	initcode.asm	/^   a:	6a 00                	push   $0x0$/;"	l
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kernel.asm	/^  a = (char*)PGROUNDDOWN((uint)va);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	ls.asm	/^       a:	89 04 24             	mov    %eax,(%esp)$/;"	l
a	sh.asm	/^       a:	75 05                	jne    11 <runcmd+0x11>$/;"	l
a0	cat.asm	/^  a0:	01 d0                	add    %edx,%eax$/;"	l
a0	forktest.asm	/^  a0:	e8 e0 02 00 00       	call   385 <wait>$/;"	l
a0	grep.asm	/^      a0:	75 07                	jne    a9 <grep+0xa9>$/;"	l
a0	ls.asm	/^      a0:	e8 71 03 00 00       	call   416 <memset>$/;"	l
a0	sh.asm	/^      a0:	89 54 24 04          	mov    %edx,0x4(%esp)$/;"	l
a0	stressfs.asm	/^      a0:	e8 f4 0b 00 00       	call   c99 <printf>$/;"	l
a0	wc.asm	/^      a0:	e8 b4 03 00 00       	call   459 <read>$/;"	l
a00	cat.asm	/^ a00:	cd 42                	int    $0x42$/;"	l
a00	forktest.asm	/^ a00:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a00	kill.asm	/^ a00:	c3                   	ret    $/;"	l
a00	ln.asm	/^ a00:	c3                   	ret    $/;"	l
a00	ls.asm	/^     a00:	b8 f7 09 00 00       	mov    $0x9f7,%eax$/;"	l
a00	wc.asm	/^     a00:	32 34 00             	xor    (%eax,%eax,1),%dh$/;"	l
a01	cs550_user.asm	/^     a01:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a01	forktest.asm	/^ a01:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a01	grep.asm	/^     a01:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a01	kill.asm	/^ a01:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a01	ln.asm	/^ a01:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a01	sh.asm	/^     a01:	83 ec 28             	sub    $0x28,%esp$/;"	l
a01	stressfs.asm	/^     a01:	b8 f7 09 00 00       	mov    $0x9f7,%eax$/;"	l
a02	cat.asm	/^ a02:	c3                   	ret    $/;"	l
a02	cs550_user.asm	/^     a02:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a02	forktest.asm	/^ a02:	33 35 00 b8 fb 09    	xor    0x9fbb800,%esi$/;"	l
a02	grep.asm	/^     a02:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a02	mkdir.asm	/^ a02:	cd 42                	int    $0x42$/;"	l
a02	rm.asm	/^ a02:	cd 42                	int    $0x42$/;"	l
a02	zombie.asm	/^ a02:	cd 42                	int    $0x42$/;"	l
a03	cat.asm	/^ a03:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a03	cs550_user.asm	/^     a03:	31 30                	xor    %esi,(%eax)$/;"	l
a03	echo.asm	/^ a03:	cd 42                	int    $0x42$/;"	l
a03	grep.asm	/^     a03:	32 00                	xor    (%eax),%al$/;"	l
a03	wc.asm	/^     a03:	b8 f9 09 00 00       	mov    $0x9f9,%eax$/;"	l
a04	init.asm	/^ a04:	cd 42                	int    $0x42$/;"	l
a04	mkdir.asm	/^ a04:	c3                   	ret    $/;"	l
a04	rm.asm	/^ a04:	c3                   	ret    $/;"	l
a04	sh.asm	/^     a04:	c7 44 24 08 4f 1c 00 	movl   $0x1c4f,0x8(%esp)$/;"	l
a04	zombie.asm	/^ a04:	c3                   	ret    $/;"	l
a05	echo.asm	/^ a05:	c3                   	ret    $/;"	l
a05	forktest.asm	/^ a05:	b8 fb 09 00 00       	mov    $0x9fb,%eax$/;"	l
a05	grep.asm	/^     a05:	b8 fc 09 00 00       	mov    $0x9fc,%eax$/;"	l
a05	ls.asm	/^     a05:	cd 42                	int    $0x42$/;"	l
a05	mkdir.asm	/^ a05:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a05	rm.asm	/^ a05:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a05	zombie.asm	/^ a05:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a06	cs550_user.asm	/^     a06:	b8 fc 09 00 00       	mov    $0x9fc,%eax$/;"	l
a06	echo.asm	/^ a06:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a06	init.asm	/^ a06:	c3                   	ret    $/;"	l
a06	kill.asm	/^ a06:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a06	ln.asm	/^ a06:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a06	stressfs.asm	/^     a06:	cd 42                	int    $0x42$/;"	l
a07	init.asm	/^ a07:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a07	kill.asm	/^ a07:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a07	ln.asm	/^ a07:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a07	ls.asm	/^     a07:	c3                   	ret    $/;"	l
a08	cat.asm	/^ a08:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a08	kill.asm	/^ a08:	34 35                	xor    $0x35,%al$/;"	l
a08	ln.asm	/^ a08:	34 34                	xor    $0x34,%al$/;"	l
a08	ls.asm	/^     a08:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a08	stressfs.asm	/^     a08:	c3                   	ret    $/;"	l
a08	wc.asm	/^     a08:	cd 42                	int    $0x42$/;"	l
a09	cat.asm	/^ a09:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a09	stressfs.asm	/^     a09:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a0a	cat.asm	/^ a0a:	33 35 00 b8 03 0a    	xor    0xa03b800,%esi$/;"	l
a0a	forktest.asm	/^ a0a:	cd 42                	int    $0x42$/;"	l
a0a	grep.asm	/^     a0a:	cd 42                	int    $0x42$/;"	l
a0a	mkdir.asm	/^ a0a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0a	rm.asm	/^ a0a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0a	wc.asm	/^     a0a:	c3                   	ret    $/;"	l
a0a	zombie.asm	/^ a0a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0b	cs550_user.asm	/^     a0b:	cd 42                	int    $0x42$/;"	l
a0b	echo.asm	/^ a0b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0b	kill.asm	/^ a0b:	b8 01 0a 00 00       	mov    $0xa01,%eax$/;"	l
a0b	ln.asm	/^ a0b:	b8 01 0a 00 00       	mov    $0xa01,%eax$/;"	l
a0b	mkdir.asm	/^ a0b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0b	rm.asm	/^ a0b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0b	sh.asm	/^     a0b:	00 $/;"	l
a0b	wc.asm	/^     a0b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a0b	zombie.asm	/^ a0b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0c	echo.asm	/^ a0c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0c	forktest.asm	/^ a0c:	c3                   	ret    $/;"	l
a0c	grep.asm	/^     a0c:	c3                   	ret    $/;"	l
a0c	init.asm	/^ a0c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0c	mkdir.asm	/^ a0c:	34 33                	xor    $0x33,%al$/;"	l
a0c	rm.asm	/^ a0c:	34 33                	xor    $0x33,%al$/;"	l
a0c	sh.asm	/^     a0c:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a0c	zombie.asm	/^ a0c:	34 39                	xor    $0x39,%al$/;"	l
a0d	cat.asm	/^ a0d:	b8 03 0a 00 00       	mov    $0xa03,%eax$/;"	l
a0d	cs550_user.asm	/^     a0d:	c3                   	ret    $/;"	l
a0d	echo.asm	/^ a0d:	34 35                	xor    $0x35,%al$/;"	l
a0d	forktest.asm	/^ a0d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a0d	grep.asm	/^     a0d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a0d	init.asm	/^ a0d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0d	ls.asm	/^     a0d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0e	cs550_user.asm	/^     a0e:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a0e	init.asm	/^ a0e:	33 36                	xor    (%esi),%esi$/;"	l
a0e	ls.asm	/^     a0e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0e	stressfs.asm	/^     a0e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0f	ls.asm	/^     a0f:	33 00                	xor    (%eax),%eax$/;"	l
a0f	mkdir.asm	/^ a0f:	b8 05 0a 00 00       	mov    $0xa05,%eax$/;"	l
a0f	rm.asm	/^ a0f:	b8 05 0a 00 00       	mov    $0xa05,%eax$/;"	l
a0f	sh.asm	/^     a0f:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a0f	stressfs.asm	/^     a0f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a0f	zombie.asm	/^ a0f:	b8 05 0a 00 00       	mov    $0xa05,%eax$/;"	l
a1	cs550_user.asm	/^      a1:	81 7d f4 0f 27 00 00 	cmpl   $0x270f,-0xc(%ebp)$/;"	l
a1	echo.asm	/^  a1:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
a1	init.asm	/^  a1:	e8 d1 02 00 00       	call   377 <exit>$/;"	l
a1	ln.asm	/^  a1:	83 ec 10             	sub    $0x10,%esp$/;"	l
a1	mkdir.asm	/^  a1:	89 d1                	mov    %edx,%ecx$/;"	l
a1	rm.asm	/^  a1:	89 d1                	mov    %edx,%ecx$/;"	l
a10	echo.asm	/^ a10:	b8 06 0a 00 00       	mov    $0xa06,%eax$/;"	l
a10	kill.asm	/^ a10:	cd 42                	int    $0x42$/;"	l
a10	ln.asm	/^ a10:	cd 42                	int    $0x42$/;"	l
a10	stressfs.asm	/^     a10:	32 37                	xor    (%edi),%dh$/;"	l
a10	wc.asm	/^     a10:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a11	init.asm	/^ a11:	b8 07 0a 00 00       	mov    $0xa07,%eax$/;"	l
a11	ls.asm	/^     a11:	b8 08 0a 00 00       	mov    $0xa08,%eax$/;"	l
a11	wc.asm	/^     a11:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a12	cat.asm	/^ a12:	cd 42                	int    $0x42$/;"	l
a12	forktest.asm	/^ a12:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a12	grep.asm	/^     a12:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a12	kill.asm	/^ a12:	c3                   	ret    $/;"	l
a12	ln.asm	/^ a12:	c3                   	ret    $/;"	l
a12	wc.asm	/^     a12:	32 35 00 b8 0b 0a    	xor    0xa0bb800,%dh$/;"	l
a13	cs550_user.asm	/^     a13:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a13	forktest.asm	/^ a13:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a13	grep.asm	/^     a13:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a13	kill.asm	/^ a13:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a13	ln.asm	/^ a13:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a13	sh.asm	/^     a13:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a13	stressfs.asm	/^     a13:	b8 09 0a 00 00       	mov    $0xa09,%eax$/;"	l
a14	cat.asm	/^ a14:	c3                   	ret    $/;"	l
a14	cs550_user.asm	/^     a14:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a14	forktest.asm	/^ a14:	33 36                	xor    (%esi),%esi$/;"	l
a14	grep.asm	/^     a14:	33 00                	xor    (%eax),%eax$/;"	l
a14	mkdir.asm	/^ a14:	cd 42                	int    $0x42$/;"	l
a14	rm.asm	/^ a14:	cd 42                	int    $0x42$/;"	l
a14	zombie.asm	/^ a14:	cd 42                	int    $0x42$/;"	l
a15	cat.asm	/^ a15:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a15	cs550_user.asm	/^     a15:	31 31                	xor    %esi,(%ecx)$/;"	l
a15	echo.asm	/^ a15:	cd 42                	int    $0x42$/;"	l
a15	wc.asm	/^     a15:	b8 0b 0a 00 00       	mov    $0xa0b,%eax$/;"	l
a16	grep.asm	/^     a16:	b8 0d 0a 00 00       	mov    $0xa0d,%eax$/;"	l
a16	init.asm	/^ a16:	cd 42                	int    $0x42$/;"	l
a16	ls.asm	/^     a16:	cd 42                	int    $0x42$/;"	l
a16	mkdir.asm	/^ a16:	c3                   	ret    $/;"	l
a16	rm.asm	/^ a16:	c3                   	ret    $/;"	l
a16	sh.asm	/^     a16:	89 04 24             	mov    %eax,(%esp)$/;"	l
a16	zombie.asm	/^ a16:	c3                   	ret    $/;"	l
a17	echo.asm	/^ a17:	c3                   	ret    $/;"	l
a17	forktest.asm	/^ a17:	b8 0d 0a 00 00       	mov    $0xa0d,%eax$/;"	l
a17	mkdir.asm	/^ a17:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a17	rm.asm	/^ a17:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a17	zombie.asm	/^ a17:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a18	cs550_user.asm	/^     a18:	b8 0e 0a 00 00       	mov    $0xa0e,%eax$/;"	l
a18	echo.asm	/^ a18:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a18	init.asm	/^ a18:	c3                   	ret    $/;"	l
a18	kill.asm	/^ a18:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a18	ln.asm	/^ a18:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a18	ls.asm	/^     a18:	c3                   	ret    $/;"	l
a18	stressfs.asm	/^     a18:	cd 42                	int    $0x42$/;"	l
a19	init.asm	/^ a19:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a19	kill.asm	/^ a19:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a19	ln.asm	/^ a19:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a19	ls.asm	/^     a19:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a19	sh.asm	/^     a19:	e8 5f fc ff ff       	call   67d <peek>$/;"	l
a1a	cat.asm	/^ a1a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1a	kill.asm	/^ a1a:	34 36                	xor    $0x36,%al$/;"	l
a1a	ln.asm	/^ a1a:	34 35                	xor    $0x35,%al$/;"	l
a1a	stressfs.asm	/^     a1a:	c3                   	ret    $/;"	l
a1a	wc.asm	/^     a1a:	cd 42                	int    $0x42$/;"	l
a1b	cat.asm	/^ a1b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1b	grep.asm	/^     a1b:	cd 42                	int    $0x42$/;"	l
a1b	stressfs.asm	/^     a1b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a1c	cat.asm	/^ a1c:	33 36                	xor    (%esi),%esi$/;"	l
a1c	forktest.asm	/^ a1c:	cd 42                	int    $0x42$/;"	l
a1c	mkdir.asm	/^ a1c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1c	rm.asm	/^ a1c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1c	wc.asm	/^     a1c:	c3                   	ret    $/;"	l
a1c	zombie.asm	/^ a1c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1d	cs550_user.asm	/^     a1d:	cd 42                	int    $0x42$/;"	l
a1d	echo.asm	/^ a1d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1d	grep.asm	/^     a1d:	c3                   	ret    $/;"	l
a1d	kill.asm	/^ a1d:	b8 13 0a 00 00       	mov    $0xa13,%eax$/;"	l
a1d	ln.asm	/^ a1d:	b8 13 0a 00 00       	mov    $0xa13,%eax$/;"	l
a1d	mkdir.asm	/^ a1d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1d	rm.asm	/^ a1d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1d	wc.asm	/^     a1d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a1d	zombie.asm	/^ a1d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1e	echo.asm	/^ a1e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1e	forktest.asm	/^ a1e:	c3                   	ret    $/;"	l
a1e	grep.asm	/^     a1e:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a1e	init.asm	/^ a1e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1e	ls.asm	/^     a1e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1e	mkdir.asm	/^ a1e:	34 34                	xor    $0x34,%al$/;"	l
a1e	rm.asm	/^ a1e:	34 34                	xor    $0x34,%al$/;"	l
a1e	sh.asm	/^     a1e:	85 c0                	test   %eax,%eax$/;"	l
a1e	zombie.asm	/^ a1e:	35 30 00 b8 17       	xor    $0x17b80030,%eax$/;"	l
a1f	cat.asm	/^ a1f:	b8 15 0a 00 00       	mov    $0xa15,%eax$/;"	l
a1f	cs550_user.asm	/^     a1f:	c3                   	ret    $/;"	l
a1f	echo.asm	/^ a1f:	34 36                	xor    $0x36,%al$/;"	l
a1f	forktest.asm	/^ a1f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a1f	init.asm	/^ a1f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a1f	ls.asm	/^     a1f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2	cat.asm	/^  a2:	8b 00                	mov    (%eax),%eax$/;"	l
a2	grep.asm	/^      a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
a2	kill.asm	/^  a2:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
a2	zombie.asm	/^  a2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
a20	cs550_user.asm	/^     a20:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a20	init.asm	/^ a20:	33 37                	xor    (%edi),%esi$/;"	l
a20	ls.asm	/^     a20:	34 00                	xor    $0x0,%al$/;"	l
a20	sh.asm	/^     a20:	75 0c                	jne    a2e <parseblock+0x30>$/;"	l
a20	stressfs.asm	/^     a20:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a21	mkdir.asm	/^ a21:	b8 17 0a 00 00       	mov    $0xa17,%eax$/;"	l
a21	rm.asm	/^ a21:	b8 17 0a 00 00       	mov    $0xa17,%eax$/;"	l
a21	stressfs.asm	/^     a21:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a21	zombie.asm	/^ a21:	b8 17 0a 00 00       	mov    $0xa17,%eax$/;"	l
a22	echo.asm	/^ a22:	b8 18 0a 00 00       	mov    $0xa18,%eax$/;"	l
a22	kill.asm	/^ a22:	cd 42                	int    $0x42$/;"	l
a22	ln.asm	/^ a22:	cd 42                	int    $0x42$/;"	l
a22	ls.asm	/^     a22:	b8 19 0a 00 00       	mov    $0xa19,%eax$/;"	l
a22	sh.asm	/^     a22:	c7 04 24 51 1c 00 00 	movl   $0x1c51,(%esp)$/;"	l
a22	stressfs.asm	/^     a22:	32 38                	xor    (%eax),%bh$/;"	l
a22	wc.asm	/^     a22:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a23	grep.asm	/^     a23:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a23	init.asm	/^ a23:	b8 19 0a 00 00       	mov    $0xa19,%eax$/;"	l
a23	wc.asm	/^     a23:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a24	cat.asm	/^ a24:	cd 42                	int    $0x42$/;"	l
a24	forktest.asm	/^ a24:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a24	grep.asm	/^     a24:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a24	kill.asm	/^ a24:	c3                   	ret    $/;"	l
a24	ln.asm	/^ a24:	c3                   	ret    $/;"	l
a24	wc.asm	/^     a24:	32 36                	xor    (%esi),%dh$/;"	l
a25	cs550_user.asm	/^     a25:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a25	forktest.asm	/^ a25:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a25	grep.asm	/^     a25:	34 00                	xor    $0x0,%al$/;"	l
a25	kill.asm	/^ a25:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a25	ln.asm	/^ a25:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a25	stressfs.asm	/^     a25:	b8 1b 0a 00 00       	mov    $0xa1b,%eax$/;"	l
a26	cat.asm	/^ a26:	c3                   	ret    $/;"	l
a26	cs550_user.asm	/^     a26:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a26	forktest.asm	/^ a26:	33 37                	xor    (%edi),%esi$/;"	l
a26	mkdir.asm	/^ a26:	cd 42                	int    $0x42$/;"	l
a26	rm.asm	/^ a26:	cd 42                	int    $0x42$/;"	l
a26	zombie.asm	/^ a26:	cd 42                	int    $0x42$/;"	l
a27	cat.asm	/^ a27:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a27	cs550_user.asm	/^     a27:	31 32                	xor    %esi,(%edx)$/;"	l
a27	echo.asm	/^ a27:	cd 42                	int    $0x42$/;"	l
a27	grep.asm	/^     a27:	b8 1e 0a 00 00       	mov    $0xa1e,%eax$/;"	l
a27	ls.asm	/^     a27:	cd 42                	int    $0x42$/;"	l
a27	wc.asm	/^     a27:	b8 1d 0a 00 00       	mov    $0xa1d,%eax$/;"	l
a28	init.asm	/^ a28:	cd 42                	int    $0x42$/;"	l
a28	mkdir.asm	/^ a28:	c3                   	ret    $/;"	l
a28	rm.asm	/^ a28:	c3                   	ret    $/;"	l
a28	zombie.asm	/^ a28:	c3                   	ret    $/;"	l
a29	echo.asm	/^ a29:	c3                   	ret    $/;"	l
a29	forktest.asm	/^ a29:	b8 1f 0a 00 00       	mov    $0xa1f,%eax$/;"	l
a29	ls.asm	/^     a29:	c3                   	ret    $/;"	l
a29	mkdir.asm	/^ a29:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a29	rm.asm	/^ a29:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a29	sh.asm	/^     a29:	e8 29 f9 ff ff       	call   357 <panic>$/;"	l
a29	zombie.asm	/^ a29:	55                   	push   %ebp$/;"	l
a2a	cs550_user.asm	/^     a2a:	b8 20 0a 00 00       	mov    $0xa20,%eax$/;"	l
a2a	echo.asm	/^ a2a:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a2a	init.asm	/^ a2a:	c3                   	ret    $/;"	l
a2a	kill.asm	/^ a2a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2a	ln.asm	/^ a2a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2a	ls.asm	/^     a2a:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a2a	stressfs.asm	/^     a2a:	cd 42                	int    $0x42$/;"	l
a2a	zombie.asm	/^ a2a:	89 e5                	mov    %esp,%ebp$/;"	l
a2b	init.asm	/^ a2b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a2b	kill.asm	/^ a2b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2b	ln.asm	/^ a2b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2c	cat.asm	/^ a2c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2c	grep.asm	/^     a2c:	cd 42                	int    $0x42$/;"	l
a2c	kill.asm	/^ a2c:	34 37                	xor    $0x37,%al$/;"	l
a2c	ln.asm	/^ a2c:	34 36                	xor    $0x36,%al$/;"	l
a2c	stressfs.asm	/^     a2c:	c3                   	ret    $/;"	l
a2c	wc.asm	/^     a2c:	cd 42                	int    $0x42$/;"	l
a2c	zombie.asm	/^ a2c:	83 ec 18             	sub    $0x18,%esp$/;"	l
a2d	cat.asm	/^ a2d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2d	stressfs.asm	/^     a2d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a2e	cat.asm	/^ a2e:	33 37                	xor    (%edi),%esi$/;"	l
a2e	forktest.asm	/^ a2e:	cd 42                	int    $0x42$/;"	l
a2e	grep.asm	/^     a2e:	c3                   	ret    $/;"	l
a2e	mkdir.asm	/^ a2e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2e	rm.asm	/^ a2e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2e	sh.asm	/^     a2e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
a2e	wc.asm	/^     a2e:	c3                   	ret    $/;"	l
a2f	cs550_user.asm	/^     a2f:	cd 42                	int    $0x42$/;"	l
a2f	echo.asm	/^ a2f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2f	grep.asm	/^     a2f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a2f	kill.asm	/^ a2f:	b8 25 0a 00 00       	mov    $0xa25,%eax$/;"	l
a2f	ln.asm	/^ a2f:	b8 25 0a 00 00       	mov    $0xa25,%eax$/;"	l
a2f	ls.asm	/^     a2f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2f	mkdir.asm	/^ a2f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2f	rm.asm	/^ a2f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a2f	wc.asm	/^     a2f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a2f	zombie.asm	/^ a2f:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a3	mkdir.asm	/^  a3:	fc                   	cld    $/;"	l
a3	rm.asm	/^  a3:	fc                   	cld    $/;"	l
a30	echo.asm	/^ a30:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a30	forktest.asm	/^ a30:	c3                   	ret    $/;"	l
a30	init.asm	/^ a30:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a30	ls.asm	/^     a30:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a30	mkdir.asm	/^ a30:	34 35                	xor    $0x35,%al$/;"	l
a30	rm.asm	/^ a30:	34 35                	xor    $0x35,%al$/;"	l
a31	cat.asm	/^ a31:	b8 27 0a 00 00       	mov    $0xa27,%eax$/;"	l
a31	cs550_user.asm	/^     a31:	c3                   	ret    $/;"	l
a31	echo.asm	/^ a31:	34 37                	xor    $0x37,%al$/;"	l
a31	forktest.asm	/^ a31:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a31	init.asm	/^ a31:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a31	ls.asm	/^     a31:	35 00 b8 2a 0a       	xor    $0xa2ab800,%eax$/;"	l
a32	cs550_user.asm	/^     a32:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a32	init.asm	/^ a32:	33 38                	xor    (%eax),%edi$/;"	l
a32	stressfs.asm	/^     a32:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a32	zombie.asm	/^ a32:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
a33	ls.asm	/^     a33:	b8 2a 0a 00 00       	mov    $0xa2a,%eax$/;"	l
a33	mkdir.asm	/^ a33:	b8 29 0a 00 00       	mov    $0xa29,%eax$/;"	l
a33	rm.asm	/^ a33:	b8 29 0a 00 00       	mov    $0xa29,%eax$/;"	l
a33	stressfs.asm	/^     a33:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a34	echo.asm	/^ a34:	b8 2a 0a 00 00       	mov    $0xa2a,%eax$/;"	l
a34	grep.asm	/^     a34:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a34	kill.asm	/^ a34:	cd 42                	int    $0x42$/;"	l
a34	ln.asm	/^ a34:	cd 42                	int    $0x42$/;"	l
a34	stressfs.asm	/^     a34:	32 39                	xor    (%ecx),%bh$/;"	l
a34	wc.asm	/^     a34:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a35	grep.asm	/^     a35:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a35	init.asm	/^ a35:	b8 2b 0a 00 00       	mov    $0xa2b,%eax$/;"	l
a35	sh.asm	/^     a35:	00 $/;"	l
a35	wc.asm	/^     a35:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a35	zombie.asm	/^ a35:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
a36	cat.asm	/^ a36:	cd 42                	int    $0x42$/;"	l
a36	forktest.asm	/^ a36:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a36	grep.asm	/^     a36:	35 00 b8 2f 0a       	xor    $0xa2fb800,%eax$/;"	l
a36	kill.asm	/^ a36:	c3                   	ret    $/;"	l
a36	ln.asm	/^ a36:	c3                   	ret    $/;"	l
a36	sh.asm	/^     a36:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)$/;"	l
a36	wc.asm	/^     a36:	32 37                	xor    (%edi),%dh$/;"	l
a37	cs550_user.asm	/^     a37:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a37	forktest.asm	/^ a37:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a37	kill.asm	/^ a37:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a37	ln.asm	/^ a37:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a37	stressfs.asm	/^     a37:	b8 2d 0a 00 00       	mov    $0xa2d,%eax$/;"	l
a38	cat.asm	/^ a38:	c3                   	ret    $/;"	l
a38	cs550_user.asm	/^     a38:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a38	forktest.asm	/^ a38:	33 38                	xor    (%eax),%edi$/;"	l
a38	grep.asm	/^     a38:	b8 2f 0a 00 00       	mov    $0xa2f,%eax$/;"	l
a38	ls.asm	/^     a38:	cd 42                	int    $0x42$/;"	l
a38	mkdir.asm	/^ a38:	cd 42                	int    $0x42$/;"	l
a38	rm.asm	/^ a38:	cd 42                	int    $0x42$/;"	l
a39	cat.asm	/^ a39:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a39	cs550_user.asm	/^     a39:	31 33                	xor    %esi,(%ebx)$/;"	l
a39	echo.asm	/^ a39:	cd 42                	int    $0x42$/;"	l
a39	wc.asm	/^     a39:	b8 2f 0a 00 00       	mov    $0xa2f,%eax$/;"	l
a3a	init.asm	/^ a3a:	cd 42                	int    $0x42$/;"	l
a3a	ls.asm	/^     a3a:	c3                   	ret    $/;"	l
a3a	mkdir.asm	/^ a3a:	c3                   	ret    $/;"	l
a3a	rm.asm	/^ a3a:	c3                   	ret    $/;"	l
a3b	echo.asm	/^ a3b:	c3                   	ret    $/;"	l
a3b	forktest.asm	/^ a3b:	b8 31 0a 00 00       	mov    $0xa31,%eax$/;"	l
a3b	ls.asm	/^     a3b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a3b	mkdir.asm	/^ a3b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a3b	rm.asm	/^ a3b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a3c	cs550_user.asm	/^     a3c:	b8 32 0a 00 00       	mov    $0xa32,%eax$/;"	l
a3c	echo.asm	/^ a3c:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a3c	init.asm	/^ a3c:	c3                   	ret    $/;"	l
a3c	kill.asm	/^ a3c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a3c	ln.asm	/^ a3c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a3c	stressfs.asm	/^     a3c:	cd 42                	int    $0x42$/;"	l
a3c	zombie.asm	/^ a3c:	00 $/;"	l
a3d	grep.asm	/^     a3d:	cd 42                	int    $0x42$/;"	l
a3d	init.asm	/^ a3d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a3d	kill.asm	/^ a3d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a3d	ln.asm	/^ a3d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a3d	sh.asm	/^     a3d:	00 $/;"	l
a3d	zombie.asm	/^ a3d:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
a3e	cat.asm	/^ a3e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a3e	kill.asm	/^ a3e:	34 38                	xor    $0x38,%al$/;"	l
a3e	ln.asm	/^ a3e:	34 37                	xor    $0x37,%al$/;"	l
a3e	sh.asm	/^     a3e:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a3e	stressfs.asm	/^     a3e:	c3                   	ret    $/;"	l
a3e	wc.asm	/^     a3e:	cd 42                	int    $0x42$/;"	l
a3f	cat.asm	/^ a3f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a3f	grep.asm	/^     a3f:	c3                   	ret    $/;"	l
a3f	stressfs.asm	/^     a3f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a4	cat.asm	/^  a4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
a4	echo.asm	/^  a4:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
a4	ln.asm	/^  a4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a4	mkdir.asm	/^  a4:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
a4	rm.asm	/^  a4:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
a4	sh.asm	/^      a4:	89 04 24             	mov    %eax,(%esp)$/;"	l
a40	cat.asm	/^ a40:	33 38                	xor    (%eax),%edi$/;"	l
a40	forktest.asm	/^ a40:	cd 42                	int    $0x42$/;"	l
a40	grep.asm	/^     a40:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a40	ls.asm	/^     a40:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a40	mkdir.asm	/^ a40:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a40	rm.asm	/^ a40:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a40	wc.asm	/^     a40:	c3                   	ret    $/;"	l
a40	zombie.asm	/^ a40:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a41	cs550_user.asm	/^     a41:	cd 42                	int    $0x42$/;"	l
a41	echo.asm	/^ a41:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a41	kill.asm	/^ a41:	b8 37 0a 00 00       	mov    $0xa37,%eax$/;"	l
a41	ln.asm	/^ a41:	b8 37 0a 00 00       	mov    $0xa37,%eax$/;"	l
a41	ls.asm	/^     a41:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a41	mkdir.asm	/^ a41:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a41	rm.asm	/^ a41:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a41	sh.asm	/^     a41:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a41	wc.asm	/^     a41:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a42	echo.asm	/^ a42:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a42	forktest.asm	/^ a42:	c3                   	ret    $/;"	l
a42	init.asm	/^ a42:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a42	ls.asm	/^     a42:	36 00 b8 3b 0a 00 00 	add    %bh,%ss:0xa3b(%eax)$/;"	l
a42	mkdir.asm	/^ a42:	34 36                	xor    $0x36,%al$/;"	l
a42	rm.asm	/^ a42:	34 36                	xor    $0x36,%al$/;"	l
a43	cat.asm	/^ a43:	b8 39 0a 00 00       	mov    $0xa39,%eax$/;"	l
a43	cs550_user.asm	/^     a43:	c3                   	ret    $/;"	l
a43	echo.asm	/^ a43:	34 38                	xor    $0x38,%al$/;"	l
a43	forktest.asm	/^ a43:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a43	init.asm	/^ a43:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a44	cs550_user.asm	/^     a44:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a44	init.asm	/^ a44:	33 39                	xor    (%ecx),%edi$/;"	l
a44	ls.asm	/^     a44:	b8 3b 0a 00 00       	mov    $0xa3b,%eax$/;"	l
a44	stressfs.asm	/^     a44:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a44	zombie.asm	/^ a44:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a45	grep.asm	/^     a45:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a45	mkdir.asm	/^ a45:	b8 3b 0a 00 00       	mov    $0xa3b,%eax$/;"	l
a45	rm.asm	/^ a45:	b8 3b 0a 00 00       	mov    $0xa3b,%eax$/;"	l
a45	sh.asm	/^     a45:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a45	stressfs.asm	/^     a45:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a46	echo.asm	/^ a46:	b8 3c 0a 00 00       	mov    $0xa3c,%eax$/;"	l
a46	grep.asm	/^     a46:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a46	kill.asm	/^ a46:	cd 42                	int    $0x42$/;"	l
a46	ln.asm	/^ a46:	cd 42                	int    $0x42$/;"	l
a46	stressfs.asm	/^     a46:	33 30                	xor    (%eax),%esi$/;"	l
a46	wc.asm	/^     a46:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a47	grep.asm	/^     a47:	36 00 b8 40 0a 00 00 	add    %bh,%ss:0xa40(%eax)$/;"	l
a47	init.asm	/^ a47:	b8 3d 0a 00 00       	mov    $0xa3d,%eax$/;"	l
a47	wc.asm	/^     a47:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a47	zombie.asm	/^ a47:	89 04 24             	mov    %eax,(%esp)$/;"	l
a48	cat.asm	/^ a48:	cd 42                	int    $0x42$/;"	l
a48	forktest.asm	/^ a48:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a48	kill.asm	/^ a48:	c3                   	ret    $/;"	l
a48	ln.asm	/^ a48:	c3                   	ret    $/;"	l
a48	sh.asm	/^     a48:	89 04 24             	mov    %eax,(%esp)$/;"	l
a48	wc.asm	/^     a48:	32 38                	xor    (%eax),%bh$/;"	l
a49	cs550_user.asm	/^     a49:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a49	forktest.asm	/^ a49:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a49	grep.asm	/^     a49:	b8 40 0a 00 00       	mov    $0xa40,%eax$/;"	l
a49	kill.asm	/^ a49:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a49	ln.asm	/^ a49:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a49	ls.asm	/^     a49:	cd 42                	int    $0x42$/;"	l
a49	stressfs.asm	/^     a49:	b8 3f 0a 00 00       	mov    $0xa3f,%eax$/;"	l
a4a	cat.asm	/^ a4a:	c3                   	ret    $/;"	l
a4a	cs550_user.asm	/^     a4a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a4a	forktest.asm	/^ a4a:	33 39                	xor    (%ecx),%edi$/;"	l
a4a	mkdir.asm	/^ a4a:	cd 42                	int    $0x42$/;"	l
a4a	rm.asm	/^ a4a:	cd 42                	int    $0x42$/;"	l
a4a	zombie.asm	/^ a4a:	e8 5c f8 ff ff       	call   2ab <write>$/;"	l
a4b	cat.asm	/^ a4b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a4b	cs550_user.asm	/^     a4b:	31 34 00             	xor    %esi,(%eax,%eax,1)$/;"	l
a4b	echo.asm	/^ a4b:	cd 42                	int    $0x42$/;"	l
a4b	ls.asm	/^     a4b:	c3                   	ret    $/;"	l
a4b	sh.asm	/^     a4b:	e8 e2 fa ff ff       	call   532 <gettoken>$/;"	l
a4b	wc.asm	/^     a4b:	b8 41 0a 00 00       	mov    $0xa41,%eax$/;"	l
a4c	init.asm	/^ a4c:	cd 42                	int    $0x42$/;"	l
a4c	ls.asm	/^     a4c:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a4c	mkdir.asm	/^ a4c:	c3                   	ret    $/;"	l
a4c	rm.asm	/^ a4c:	c3                   	ret    $/;"	l
a4d	echo.asm	/^ a4d:	c3                   	ret    $/;"	l
a4d	forktest.asm	/^ a4d:	b8 43 0a 00 00       	mov    $0xa43,%eax$/;"	l
a4d	mkdir.asm	/^ a4d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a4d	rm.asm	/^ a4d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a4e	cs550_user.asm	/^     a4e:	b8 44 0a 00 00       	mov    $0xa44,%eax$/;"	l
a4e	echo.asm	/^ a4e:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a4e	grep.asm	/^     a4e:	cd 42                	int    $0x42$/;"	l
a4e	init.asm	/^ a4e:	c3                   	ret    $/;"	l
a4e	kill.asm	/^ a4e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a4e	ln.asm	/^ a4e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a4e	stressfs.asm	/^     a4e:	cd 42                	int    $0x42$/;"	l
a4f	init.asm	/^ a4f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a4f	kill.asm	/^ a4f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a4f	ln.asm	/^ a4f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a4f	zombie.asm	/^ a4f:	c9                   	leave  $/;"	l
a5	forktest.asm	/^  a5:	85 c0                	test   %eax,%eax$/;"	l
a5	kill.asm	/^  a5:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
a5	ls.asm	/^      a5:	b8 0c 15 00 00       	mov    $0x150c,%eax$/;"	l
a5	stressfs.asm	/^      a5:	0f b6 84 24 26 02 00 	movzbl 0x226(%esp),%eax$/;"	l
a5	wc.asm	/^      a5:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
a5	zombie.asm	/^  a5:	0f b6 d0             	movzbl %al,%edx$/;"	l
a50	cat.asm	/^ a50:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a50	grep.asm	/^     a50:	c3                   	ret    $/;"	l
a50	kill.asm	/^ a50:	34 39                	xor    $0x39,%al$/;"	l
a50	ln.asm	/^ a50:	34 38                	xor    $0x38,%al$/;"	l
a50	sh.asm	/^     a50:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a50	stressfs.asm	/^     a50:	c3                   	ret    $/;"	l
a50	wc.asm	/^     a50:	cd 42                	int    $0x42$/;"	l
a50	zombie.asm	/^ a50:	c3                   	ret    $/;"	l
a51	cat.asm	/^ a51:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a51	grep.asm	/^     a51:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a51	ls.asm	/^     a51:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a51	stressfs.asm	/^     a51:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a51	zombie.asm	/^ a51:	55                   	push   %ebp$/;"	l
a52	cat.asm	/^ a52:	33 39                	xor    (%ecx),%edi$/;"	l
a52	forktest.asm	/^ a52:	cd 42                	int    $0x42$/;"	l
a52	ls.asm	/^     a52:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a52	mkdir.asm	/^ a52:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a52	rm.asm	/^ a52:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a52	wc.asm	/^     a52:	c3                   	ret    $/;"	l
a52	zombie.asm	/^ a52:	89 e5                	mov    %esp,%ebp$/;"	l
a53	cs550_user.asm	/^     a53:	cd 42                	int    $0x42$/;"	l
a53	echo.asm	/^ a53:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a53	kill.asm	/^ a53:	b8 49 0a 00 00       	mov    $0xa49,%eax$/;"	l
a53	ln.asm	/^ a53:	b8 49 0a 00 00       	mov    $0xa49,%eax$/;"	l
a53	ls.asm	/^     a53:	37                   	aaa    $/;"	l
a53	mkdir.asm	/^ a53:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a53	rm.asm	/^ a53:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a53	sh.asm	/^     a53:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a53	wc.asm	/^     a53:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a54	echo.asm	/^ a54:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a54	forktest.asm	/^ a54:	c3                   	ret    $/;"	l
a54	init.asm	/^ a54:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a54	mkdir.asm	/^ a54:	34 37                	xor    $0x37,%al$/;"	l
a54	rm.asm	/^ a54:	34 37                	xor    $0x37,%al$/;"	l
a54	zombie.asm	/^ a54:	56                   	push   %esi$/;"	l
a55	cat.asm	/^ a55:	b8 4b 0a 00 00       	mov    $0xa4b,%eax$/;"	l
a55	cs550_user.asm	/^     a55:	c3                   	ret    $/;"	l
a55	echo.asm	/^ a55:	34 39                	xor    $0x39,%al$/;"	l
a55	forktest.asm	/^ a55:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a55	init.asm	/^ a55:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a55	ls.asm	/^     a55:	b8 4c 0a 00 00       	mov    $0xa4c,%eax$/;"	l
a55	zombie.asm	/^ a55:	53                   	push   %ebx$/;"	l
a56	cs550_user.asm	/^     a56:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a56	grep.asm	/^     a56:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a56	init.asm	/^ a56:	34 30                	xor    $0x30,%al$/;"	l
a56	stressfs.asm	/^     a56:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a56	zombie.asm	/^ a56:	83 ec 30             	sub    $0x30,%esp$/;"	l
a57	grep.asm	/^     a57:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a57	mkdir.asm	/^ a57:	b8 4d 0a 00 00       	mov    $0xa4d,%eax$/;"	l
a57	rm.asm	/^ a57:	b8 4d 0a 00 00       	mov    $0xa4d,%eax$/;"	l
a57	sh.asm	/^     a57:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a57	stressfs.asm	/^     a57:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a58	echo.asm	/^ a58:	b8 4e 0a 00 00       	mov    $0xa4e,%eax$/;"	l
a58	grep.asm	/^     a58:	37                   	aaa    $/;"	l
a58	kill.asm	/^ a58:	cd 42                	int    $0x42$/;"	l
a58	ln.asm	/^ a58:	cd 42                	int    $0x42$/;"	l
a58	stressfs.asm	/^     a58:	33 31                	xor    (%ecx),%esi$/;"	l
a58	wc.asm	/^     a58:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a59	init.asm	/^ a59:	b8 4f 0a 00 00       	mov    $0xa4f,%eax$/;"	l
a59	wc.asm	/^     a59:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a59	zombie.asm	/^ a59:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
a5a	cat.asm	/^ a5a:	cd 42                	int    $0x42$/;"	l
a5a	forktest.asm	/^ a5a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a5a	grep.asm	/^     a5a:	b8 51 0a 00 00       	mov    $0xa51,%eax$/;"	l
a5a	kill.asm	/^ a5a:	c3                   	ret    $/;"	l
a5a	ln.asm	/^ a5a:	c3                   	ret    $/;"	l
a5a	ls.asm	/^     a5a:	cd 42                	int    $0x42$/;"	l
a5a	sh.asm	/^     a5a:	89 04 24             	mov    %eax,(%esp)$/;"	l
a5a	wc.asm	/^     a5a:	32 39                	xor    (%ecx),%bh$/;"	l
a5b	cs550_user.asm	/^     a5b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a5b	forktest.asm	/^ a5b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a5b	kill.asm	/^ a5b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a5b	ln.asm	/^ a5b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a5b	stressfs.asm	/^     a5b:	b8 51 0a 00 00       	mov    $0xa51,%eax$/;"	l
a5c	cat.asm	/^ a5c:	c3                   	ret    $/;"	l
a5c	cs550_user.asm	/^     a5c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a5c	forktest.asm	/^ a5c:	34 30                	xor    $0x30,%al$/;"	l
a5c	ls.asm	/^     a5c:	c3                   	ret    $/;"	l
a5c	mkdir.asm	/^ a5c:	cd 42                	int    $0x42$/;"	l
a5c	rm.asm	/^ a5c:	cd 42                	int    $0x42$/;"	l
a5d	cat.asm	/^ a5d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a5d	cs550_user.asm	/^     a5d:	31 35 00 b8 56 0a    	xor    %esi,0xa56b800$/;"	l
a5d	echo.asm	/^ a5d:	cd 42                	int    $0x42$/;"	l
a5d	ls.asm	/^     a5d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a5d	sh.asm	/^     a5d:	e8 1c fd ff ff       	call   77e <parseline>$/;"	l
a5d	wc.asm	/^     a5d:	b8 53 0a 00 00       	mov    $0xa53,%eax$/;"	l
a5e	init.asm	/^ a5e:	cd 42                	int    $0x42$/;"	l
a5e	mkdir.asm	/^ a5e:	c3                   	ret    $/;"	l
a5e	rm.asm	/^ a5e:	c3                   	ret    $/;"	l
a5f	echo.asm	/^ a5f:	c3                   	ret    $/;"	l
a5f	forktest.asm	/^ a5f:	b8 55 0a 00 00       	mov    $0xa55,%eax$/;"	l
a5f	grep.asm	/^     a5f:	cd 42                	int    $0x42$/;"	l
a5f	mkdir.asm	/^ a5f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a5f	rm.asm	/^ a5f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a6	init.asm	/^  a6:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)$/;"	l
a6	mkdir.asm	/^  a6:	89 ca                	mov    %ecx,%edx$/;"	l
a6	rm.asm	/^  a6:	89 ca                	mov    %ecx,%edx$/;"	l
a60	cs550_user.asm	/^     a60:	b8 56 0a 00 00       	mov    $0xa56,%eax$/;"	l
a60	echo.asm	/^ a60:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a60	init.asm	/^ a60:	c3                   	ret    $/;"	l
a60	kill.asm	/^ a60:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a60	ln.asm	/^ a60:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a60	stressfs.asm	/^     a60:	cd 42                	int    $0x42$/;"	l
a60	zombie.asm	/^ a60:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
a61	grep.asm	/^     a61:	c3                   	ret    $/;"	l
a61	init.asm	/^ a61:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a61	kill.asm	/^ a61:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a61	ln.asm	/^ a61:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a62	cat.asm	/^ a62:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a62	grep.asm	/^     a62:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a62	kill.asm	/^ a62:	35 30 00 b8 5b       	xor    $0x5bb80030,%eax$/;"	l
a62	ln.asm	/^ a62:	34 39                	xor    $0x39,%al$/;"	l
a62	ls.asm	/^     a62:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a62	sh.asm	/^     a62:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a62	stressfs.asm	/^     a62:	c3                   	ret    $/;"	l
a62	wc.asm	/^     a62:	cd 42                	int    $0x42$/;"	l
a63	cat.asm	/^ a63:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a63	ls.asm	/^     a63:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a63	stressfs.asm	/^     a63:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a64	cat.asm	/^ a64:	34 30                	xor    $0x30,%al$/;"	l
a64	forktest.asm	/^ a64:	cd 42                	int    $0x42$/;"	l
a64	ls.asm	/^     a64:	38 00                	cmp    %al,(%eax)$/;"	l
a64	mkdir.asm	/^ a64:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a64	rm.asm	/^ a64:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a64	wc.asm	/^     a64:	c3                   	ret    $/;"	l
a64	zombie.asm	/^ a64:	74 17                	je     a7d <printint+0x2c>$/;"	l
a65	cs550_user.asm	/^     a65:	cd 42                	int    $0x42$/;"	l
a65	echo.asm	/^ a65:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a65	kill.asm	/^ a65:	b8 5b 0a 00 00       	mov    $0xa5b,%eax$/;"	l
a65	ln.asm	/^ a65:	b8 5b 0a 00 00       	mov    $0xa5b,%eax$/;"	l
a65	mkdir.asm	/^ a65:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a65	rm.asm	/^ a65:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a65	sh.asm	/^     a65:	c7 44 24 08 5c 1c 00 	movl   $0x1c5c,0x8(%esp)$/;"	l
a65	wc.asm	/^     a65:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a66	echo.asm	/^ a66:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a66	forktest.asm	/^ a66:	c3                   	ret    $/;"	l
a66	init.asm	/^ a66:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a66	ls.asm	/^     a66:	b8 5d 0a 00 00       	mov    $0xa5d,%eax$/;"	l
a66	mkdir.asm	/^ a66:	34 38                	xor    $0x38,%al$/;"	l
a66	rm.asm	/^ a66:	34 38                	xor    $0x38,%al$/;"	l
a66	zombie.asm	/^ a66:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
a67	cat.asm	/^ a67:	b8 5d 0a 00 00       	mov    $0xa5d,%eax$/;"	l
a67	cs550_user.asm	/^     a67:	c3                   	ret    $/;"	l
a67	echo.asm	/^ a67:	35 30 00 b8 60       	xor    $0x60b80030,%eax$/;"	l
a67	forktest.asm	/^ a67:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a67	grep.asm	/^     a67:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a67	init.asm	/^ a67:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a68	cs550_user.asm	/^     a68:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a68	grep.asm	/^     a68:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a68	init.asm	/^ a68:	34 31                	xor    $0x31,%al$/;"	l
a68	stressfs.asm	/^     a68:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a69	grep.asm	/^     a69:	38 00                	cmp    %al,(%eax)$/;"	l
a69	mkdir.asm	/^ a69:	b8 5f 0a 00 00       	mov    $0xa5f,%eax$/;"	l
a69	rm.asm	/^ a69:	b8 5f 0a 00 00       	mov    $0xa5f,%eax$/;"	l
a69	stressfs.asm	/^     a69:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a6a	echo.asm	/^ a6a:	b8 60 0a 00 00       	mov    $0xa60,%eax$/;"	l
a6a	kill.asm	/^ a6a:	cd 42                	int    $0x42$/;"	l
a6a	ln.asm	/^ a6a:	cd 42                	int    $0x42$/;"	l
a6a	stressfs.asm	/^     a6a:	33 32                	xor    (%edx),%esi$/;"	l
a6a	wc.asm	/^     a6a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a6a	zombie.asm	/^ a6a:	79 11                	jns    a7d <printint+0x2c>$/;"	l
a6b	grep.asm	/^     a6b:	b8 62 0a 00 00       	mov    $0xa62,%eax$/;"	l
a6b	init.asm	/^ a6b:	b8 61 0a 00 00       	mov    $0xa61,%eax$/;"	l
a6b	ls.asm	/^     a6b:	cd 42                	int    $0x42$/;"	l
a6b	wc.asm	/^     a6b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a6c	cat.asm	/^ a6c:	cd 42                	int    $0x42$/;"	l
a6c	forktest.asm	/^ a6c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a6c	kill.asm	/^ a6c:	c3                   	ret    $/;"	l
a6c	ln.asm	/^ a6c:	c3                   	ret    $/;"	l
a6c	sh.asm	/^     a6c:	00 $/;"	l
a6c	wc.asm	/^     a6c:	33 30                	xor    (%eax),%esi$/;"	l
a6c	zombie.asm	/^ a6c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
a6d	cs550_user.asm	/^     a6d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a6d	forktest.asm	/^ a6d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a6d	kill.asm	/^ a6d:	55                   	push   %ebp$/;"	l
a6d	ln.asm	/^ a6d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a6d	ls.asm	/^     a6d:	c3                   	ret    $/;"	l
a6d	sh.asm	/^     a6d:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a6d	stressfs.asm	/^     a6d:	b8 63 0a 00 00       	mov    $0xa63,%eax$/;"	l
a6e	cat.asm	/^ a6e:	c3                   	ret    $/;"	l
a6e	cs550_user.asm	/^     a6e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a6e	forktest.asm	/^ a6e:	34 31                	xor    $0x31,%al$/;"	l
a6e	kill.asm	/^ a6e:	89 e5                	mov    %esp,%ebp$/;"	l
a6e	ls.asm	/^     a6e:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a6e	mkdir.asm	/^ a6e:	cd 42                	int    $0x42$/;"	l
a6e	rm.asm	/^ a6e:	cd 42                	int    $0x42$/;"	l
a6f	cat.asm	/^ a6f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a6f	cs550_user.asm	/^     a6f:	31 36                	xor    %esi,(%esi)$/;"	l
a6f	echo.asm	/^ a6f:	cd 42                	int    $0x42$/;"	l
a6f	wc.asm	/^     a6f:	b8 65 0a 00 00       	mov    $0xa65,%eax$/;"	l
a7	echo.asm	/^  a7:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
a7	forktest.asm	/^  a7:	79 19                	jns    c2 <forktest+0x99>$/;"	l
a7	ln.asm	/^  a7:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a7	sh.asm	/^      a7:	e8 f5 0e 00 00       	call   fa1 <open>$/;"	l
a70	grep.asm	/^     a70:	cd 42                	int    $0x42$/;"	l
a70	init.asm	/^ a70:	cd 42                	int    $0x42$/;"	l
a70	kill.asm	/^ a70:	83 ec 18             	sub    $0x18,%esp$/;"	l
a70	mkdir.asm	/^ a70:	c3                   	ret    $/;"	l
a70	rm.asm	/^ a70:	c3                   	ret    $/;"	l
a70	sh.asm	/^     a70:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a71	echo.asm	/^ a71:	c3                   	ret    $/;"	l
a71	forktest.asm	/^ a71:	b8 67 0a 00 00       	mov    $0xa67,%eax$/;"	l
a71	mkdir.asm	/^ a71:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a71	rm.asm	/^ a71:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a72	cs550_user.asm	/^     a72:	b8 68 0a 00 00       	mov    $0xa68,%eax$/;"	l
a72	echo.asm	/^ a72:	55                   	push   %ebp$/;"	l
a72	grep.asm	/^     a72:	c3                   	ret    $/;"	l
a72	init.asm	/^ a72:	c3                   	ret    $/;"	l
a72	ln.asm	/^ a72:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a72	stressfs.asm	/^     a72:	cd 42                	int    $0x42$/;"	l
a73	echo.asm	/^ a73:	89 e5                	mov    %esp,%ebp$/;"	l
a73	grep.asm	/^     a73:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a73	init.asm	/^ a73:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a73	kill.asm	/^ a73:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a73	ln.asm	/^ a73:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a73	ls.asm	/^     a73:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a73	zombie.asm	/^ a73:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a74	cat.asm	/^ a74:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a74	ln.asm	/^ a74:	35 30 00 b8 6d       	xor    $0x6db80030,%eax$/;"	l
a74	ls.asm	/^     a74:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a74	sh.asm	/^     a74:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a74	stressfs.asm	/^     a74:	c3                   	ret    $/;"	l
a74	wc.asm	/^     a74:	cd 42                	int    $0x42$/;"	l
a75	cat.asm	/^ a75:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a75	echo.asm	/^ a75:	83 ec 18             	sub    $0x18,%esp$/;"	l
a75	ls.asm	/^     a75:	39 00                	cmp    %eax,(%eax)$/;"	l
a75	stressfs.asm	/^     a75:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a76	cat.asm	/^ a76:	34 31                	xor    $0x31,%al$/;"	l
a76	forktest.asm	/^ a76:	cd 42                	int    $0x42$/;"	l
a76	kill.asm	/^ a76:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
a76	mkdir.asm	/^ a76:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a76	rm.asm	/^ a76:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a76	wc.asm	/^     a76:	c3                   	ret    $/;"	l
a76	zombie.asm	/^ a76:	f7 d8                	neg    %eax$/;"	l
a77	cs550_user.asm	/^     a77:	cd 42                	int    $0x42$/;"	l
a77	ln.asm	/^ a77:	b8 6d 0a 00 00       	mov    $0xa6d,%eax$/;"	l
a77	ls.asm	/^     a77:	b8 6e 0a 00 00       	mov    $0xa6e,%eax$/;"	l
a77	mkdir.asm	/^ a77:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a77	rm.asm	/^ a77:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a77	sh.asm	/^     a77:	89 04 24             	mov    %eax,(%esp)$/;"	l
a77	wc.asm	/^     a77:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a78	echo.asm	/^ a78:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a78	forktest.asm	/^ a78:	c3                   	ret    $/;"	l
a78	grep.asm	/^     a78:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a78	init.asm	/^ a78:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a78	mkdir.asm	/^ a78:	34 39                	xor    $0x39,%al$/;"	l
a78	rm.asm	/^ a78:	34 39                	xor    $0x39,%al$/;"	l
a78	zombie.asm	/^ a78:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a79	cat.asm	/^ a79:	b8 6f 0a 00 00       	mov    $0xa6f,%eax$/;"	l
a79	cs550_user.asm	/^     a79:	c3                   	ret    $/;"	l
a79	forktest.asm	/^ a79:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a79	grep.asm	/^     a79:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a79	init.asm	/^ a79:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a79	kill.asm	/^ a79:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
a7a	cs550_user.asm	/^     a7a:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a7a	grep.asm	/^     a7a:	39 00                	cmp    %eax,(%eax)$/;"	l
a7a	init.asm	/^ a7a:	34 32                	xor    $0x32,%al$/;"	l
a7a	sh.asm	/^     a7a:	e8 fe fb ff ff       	call   67d <peek>$/;"	l
a7a	stressfs.asm	/^     a7a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a7b	echo.asm	/^ a7b:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
a7b	mkdir.asm	/^ a7b:	b8 71 0a 00 00       	mov    $0xa71,%eax$/;"	l
a7b	rm.asm	/^ a7b:	b8 71 0a 00 00       	mov    $0xa71,%eax$/;"	l
a7b	stressfs.asm	/^     a7b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a7b	zombie.asm	/^ a7b:	eb 06                	jmp    a83 <printint+0x32>$/;"	l
a7c	grep.asm	/^     a7c:	b8 73 0a 00 00       	mov    $0xa73,%eax$/;"	l
a7c	ln.asm	/^ a7c:	cd 42                	int    $0x42$/;"	l
a7c	ls.asm	/^     a7c:	cd 42                	int    $0x42$/;"	l
a7c	stressfs.asm	/^     a7c:	33 33                	xor    (%ebx),%esi$/;"	l
a7c	wc.asm	/^     a7c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a7d	init.asm	/^ a7d:	b8 73 0a 00 00       	mov    $0xa73,%eax$/;"	l
a7d	wc.asm	/^     a7d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a7d	zombie.asm	/^ a7d:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a7e	cat.asm	/^ a7e:	cd 42                	int    $0x42$/;"	l
a7e	echo.asm	/^ a7e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
a7e	forktest.asm	/^ a7e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a7e	ln.asm	/^ a7e:	c3                   	ret    $/;"	l
a7e	ls.asm	/^     a7e:	c3                   	ret    $/;"	l
a7e	wc.asm	/^     a7e:	33 31                	xor    (%ecx),%esi$/;"	l
a7f	cs550_user.asm	/^     a7f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a7f	forktest.asm	/^ a7f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a7f	ln.asm	/^ a7f:	55                   	push   %ebp$/;"	l
a7f	ls.asm	/^     a7f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a7f	sh.asm	/^     a7f:	85 c0                	test   %eax,%eax$/;"	l
a7f	stressfs.asm	/^     a7f:	b8 75 0a 00 00       	mov    $0xa75,%eax$/;"	l
a8	cs550_user.asm	/^      a8:	7e ee                	jle    98 <test_getpid+0x1e>$/;"	l
a8	kill.asm	/^  a8:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
a8	mkdir.asm	/^  a8:	89 fb                	mov    %edi,%ebx$/;"	l
a8	rm.asm	/^  a8:	89 fb                	mov    %edi,%ebx$/;"	l
a8	wc.asm	/^      a8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
a8	zombie.asm	/^  a8:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a80	cat.asm	/^ a80:	c3                   	ret    $/;"	l
a80	cs550_user.asm	/^     a80:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a80	forktest.asm	/^ a80:	34 32                	xor    $0x32,%al$/;"	l
a80	kill.asm	/^ a80:	00 $/;"	l
a80	ln.asm	/^ a80:	89 e5                	mov    %esp,%ebp$/;"	l
a80	mkdir.asm	/^ a80:	cd 42                	int    $0x42$/;"	l
a80	rm.asm	/^ a80:	cd 42                	int    $0x42$/;"	l
a80	zombie.asm	/^ a80:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a81	cat.asm	/^ a81:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a81	cs550_user.asm	/^     a81:	31 37                	xor    %esi,(%edi)$/;"	l
a81	grep.asm	/^     a81:	cd 42                	int    $0x42$/;"	l
a81	kill.asm	/^ a81:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
a81	sh.asm	/^     a81:	75 0c                	jne    a8f <parseblock+0x91>$/;"	l
a81	wc.asm	/^     a81:	b8 77 0a 00 00       	mov    $0xa77,%eax$/;"	l
a82	init.asm	/^ a82:	cd 42                	int    $0x42$/;"	l
a82	ln.asm	/^ a82:	83 ec 18             	sub    $0x18,%esp$/;"	l
a82	mkdir.asm	/^ a82:	c3                   	ret    $/;"	l
a82	rm.asm	/^ a82:	c3                   	ret    $/;"	l
a83	forktest.asm	/^ a83:	b8 79 0a 00 00       	mov    $0xa79,%eax$/;"	l
a83	grep.asm	/^     a83:	c3                   	ret    $/;"	l
a83	mkdir.asm	/^ a83:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a83	rm.asm	/^ a83:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a83	sh.asm	/^     a83:	c7 04 24 5e 1c 00 00 	movl   $0x1c5e,(%esp)$/;"	l
a83	zombie.asm	/^ a83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
a84	cs550_user.asm	/^     a84:	b8 7a 0a 00 00       	mov    $0xa7a,%eax$/;"	l
a84	grep.asm	/^     a84:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a84	init.asm	/^ a84:	c3                   	ret    $/;"	l
a84	kill.asm	/^ a84:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a84	ls.asm	/^     a84:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a84	stressfs.asm	/^     a84:	cd 42                	int    $0x42$/;"	l
a85	echo.asm	/^ a85:	00 $/;"	l
a85	init.asm	/^ a85:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a85	ln.asm	/^ a85:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a85	ls.asm	/^     a85:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a86	cat.asm	/^ a86:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a86	echo.asm	/^ a86:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
a86	ls.asm	/^     a86:	31 30                	xor    %esi,(%eax)$/;"	l
a86	stressfs.asm	/^     a86:	c3                   	ret    $/;"	l
a86	wc.asm	/^     a86:	cd 42                	int    $0x42$/;"	l
a87	cat.asm	/^ a87:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a87	stressfs.asm	/^     a87:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a88	cat.asm	/^ a88:	34 32                	xor    $0x32,%al$/;"	l
a88	forktest.asm	/^ a88:	cd 42                	int    $0x42$/;"	l
a88	kill.asm	/^ a88:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a88	ln.asm	/^ a88:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
a88	mkdir.asm	/^ a88:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a88	rm.asm	/^ a88:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a88	wc.asm	/^     a88:	c3                   	ret    $/;"	l
a89	cs550_user.asm	/^     a89:	cd 42                	int    $0x42$/;"	l
a89	echo.asm	/^ a89:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a89	grep.asm	/^     a89:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a89	ls.asm	/^     a89:	b8 7f 0a 00 00       	mov    $0xa7f,%eax$/;"	l
a89	mkdir.asm	/^ a89:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a89	rm.asm	/^ a89:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a89	wc.asm	/^     a89:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a8a	forktest.asm	/^ a8a:	c3                   	ret    $/;"	l
a8a	grep.asm	/^     a8a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a8a	init.asm	/^ a8a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a8a	mkdir.asm	/^ a8a:	35 30 00 b8 83       	xor    $0x83b80030,%eax$/;"	l
a8a	rm.asm	/^ a8a:	35 30 00 b8 83       	xor    $0x83b80030,%eax$/;"	l
a8a	sh.asm	/^     a8a:	e8 c8 f8 ff ff       	call   357 <panic>$/;"	l
a8a	zombie.asm	/^ a8a:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
a8b	cat.asm	/^ a8b:	b8 81 0a 00 00       	mov    $0xa81,%eax$/;"	l
a8b	cs550_user.asm	/^     a8b:	c3                   	ret    $/;"	l
a8b	forktest.asm	/^ a8b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a8b	grep.asm	/^     a8b:	31 30                	xor    %esi,(%eax)$/;"	l
a8b	init.asm	/^ a8b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a8b	kill.asm	/^ a8b:	89 04 24             	mov    %eax,(%esp)$/;"	l
a8b	ln.asm	/^ a8b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
a8c	cs550_user.asm	/^     a8c:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a8c	init.asm	/^ a8c:	34 33                	xor    $0x33,%al$/;"	l
a8c	stressfs.asm	/^     a8c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a8d	echo.asm	/^ a8d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a8d	mkdir.asm	/^ a8d:	b8 83 0a 00 00       	mov    $0xa83,%eax$/;"	l
a8d	rm.asm	/^ a8d:	b8 83 0a 00 00       	mov    $0xa83,%eax$/;"	l
a8d	stressfs.asm	/^     a8d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a8d	zombie.asm	/^ a8d:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
a8e	grep.asm	/^     a8e:	b8 84 0a 00 00       	mov    $0xa84,%eax$/;"	l
a8e	kill.asm	/^ a8e:	e8 5c f8 ff ff       	call   2ef <write>$/;"	l
a8e	ls.asm	/^     a8e:	cd 42                	int    $0x42$/;"	l
a8e	stressfs.asm	/^     a8e:	33 34 00             	xor    (%eax,%eax,1),%esi$/;"	l
a8e	wc.asm	/^     a8e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a8f	init.asm	/^ a8f:	b8 85 0a 00 00       	mov    $0xa85,%eax$/;"	l
a8f	sh.asm	/^     a8f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
a8f	wc.asm	/^     a8f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a9	forktest.asm	/^  a9:	c7 44 24 04 47 0b 00 	movl   $0xb47,0x4(%esp)$/;"	l
a9	grep.asm	/^      a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
a90	cat.asm	/^ a90:	cd 42                	int    $0x42$/;"	l
a90	echo.asm	/^ a90:	89 04 24             	mov    %eax,(%esp)$/;"	l
a90	forktest.asm	/^ a90:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a90	ls.asm	/^     a90:	c3                   	ret    $/;"	l
a90	wc.asm	/^     a90:	33 32                	xor    (%edx),%esi$/;"	l
a90	zombie.asm	/^ a90:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a91	cs550_user.asm	/^     a91:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a91	forktest.asm	/^ a91:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a91	ls.asm	/^     a91:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a91	stressfs.asm	/^     a91:	b8 87 0a 00 00       	mov    $0xa87,%eax$/;"	l
a92	cat.asm	/^ a92:	c3                   	ret    $/;"	l
a92	cs550_user.asm	/^     a92:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a92	forktest.asm	/^ a92:	34 33                	xor    $0x33,%al$/;"	l
a92	ln.asm	/^ a92:	00 $/;"	l
a92	mkdir.asm	/^ a92:	cd 42                	int    $0x42$/;"	l
a92	rm.asm	/^ a92:	cd 42                	int    $0x42$/;"	l
a93	cat.asm	/^ a93:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a93	cs550_user.asm	/^     a93:	31 38                	xor    %edi,(%eax)$/;"	l
a93	echo.asm	/^ a93:	e8 5c f8 ff ff       	call   2f4 <write>$/;"	l
a93	grep.asm	/^     a93:	cd 42                	int    $0x42$/;"	l
a93	kill.asm	/^ a93:	c9                   	leave  $/;"	l
a93	ln.asm	/^ a93:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
a93	wc.asm	/^     a93:	b8 89 0a 00 00       	mov    $0xa89,%eax$/;"	l
a93	zombie.asm	/^ a93:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
a94	init.asm	/^ a94:	cd 42                	int    $0x42$/;"	l
a94	kill.asm	/^ a94:	c3                   	ret    $/;"	l
a94	mkdir.asm	/^ a94:	c3                   	ret    $/;"	l
a94	rm.asm	/^ a94:	c3                   	ret    $/;"	l
a95	forktest.asm	/^ a95:	b8 8b 0a 00 00       	mov    $0xa8b,%eax$/;"	l
a95	grep.asm	/^     a95:	c3                   	ret    $/;"	l
a95	kill.asm	/^ a95:	55                   	push   %ebp$/;"	l
a95	mkdir.asm	/^ a95:	55                   	push   %ebp$/;"	l
a95	rm.asm	/^ a95:	55                   	push   %ebp$/;"	l
a96	cs550_user.asm	/^     a96:	b8 8c 0a 00 00       	mov    $0xa8c,%eax$/;"	l
a96	grep.asm	/^     a96:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a96	init.asm	/^ a96:	c3                   	ret    $/;"	l
a96	kill.asm	/^ a96:	89 e5                	mov    %esp,%ebp$/;"	l
a96	ln.asm	/^ a96:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a96	ls.asm	/^     a96:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a96	mkdir.asm	/^ a96:	89 e5                	mov    %esp,%ebp$/;"	l
a96	rm.asm	/^ a96:	89 e5                	mov    %esp,%ebp$/;"	l
a96	sh.asm	/^     a96:	00 $/;"	l
a96	stressfs.asm	/^     a96:	cd 42                	int    $0x42$/;"	l
a96	zombie.asm	/^ a96:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
a97	init.asm	/^ a97:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a97	ls.asm	/^     a97:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a97	sh.asm	/^     a97:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)$/;"	l
a98	cat.asm	/^ a98:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a98	echo.asm	/^ a98:	c9                   	leave  $/;"	l
a98	kill.asm	/^ a98:	56                   	push   %esi$/;"	l
a98	ls.asm	/^     a98:	31 31                	xor    %esi,(%ecx)$/;"	l
a98	mkdir.asm	/^ a98:	83 ec 18             	sub    $0x18,%esp$/;"	l
a98	rm.asm	/^ a98:	83 ec 18             	sub    $0x18,%esp$/;"	l
a98	stressfs.asm	/^     a98:	c3                   	ret    $/;"	l
a98	wc.asm	/^     a98:	cd 42                	int    $0x42$/;"	l
a99	cat.asm	/^ a99:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a99	echo.asm	/^ a99:	c3                   	ret    $/;"	l
a99	kill.asm	/^ a99:	53                   	push   %ebx$/;"	l
a99	stressfs.asm	/^     a99:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a99	zombie.asm	/^ a99:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
a9a	cat.asm	/^ a9a:	34 33                	xor    $0x33,%al$/;"	l
a9a	echo.asm	/^ a9a:	55                   	push   %ebp$/;"	l
a9a	forktest.asm	/^ a9a:	cd 42                	int    $0x42$/;"	l
a9a	kill.asm	/^ a9a:	83 ec 30             	sub    $0x30,%esp$/;"	l
a9a	ln.asm	/^ a9a:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a9a	wc.asm	/^     a9a:	c3                   	ret    $/;"	l
a9b	cs550_user.asm	/^     a9b:	cd 42                	int    $0x42$/;"	l
a9b	echo.asm	/^ a9b:	89 e5                	mov    %esp,%ebp$/;"	l
a9b	grep.asm	/^     a9b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a9b	ls.asm	/^     a9b:	b8 91 0a 00 00       	mov    $0xa91,%eax$/;"	l
a9b	mkdir.asm	/^ a9b:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a9b	rm.asm	/^ a9b:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a9b	wc.asm	/^     a9b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a9c	forktest.asm	/^ a9c:	c3                   	ret    $/;"	l
a9c	grep.asm	/^     a9c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a9c	init.asm	/^ a9c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a9d	cat.asm	/^ a9d:	b8 93 0a 00 00       	mov    $0xa93,%eax$/;"	l
a9d	cs550_user.asm	/^     a9d:	c3                   	ret    $/;"	l
a9d	echo.asm	/^ a9d:	56                   	push   %esi$/;"	l
a9d	forktest.asm	/^ a9d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a9d	grep.asm	/^     a9d:	31 31                	xor    %esi,(%ecx)$/;"	l
a9d	init.asm	/^ a9d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a9d	kill.asm	/^ a9d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
a9d	ln.asm	/^ a9d:	89 04 24             	mov    %eax,(%esp)$/;"	l
a9e	cs550_user.asm	/^     a9e:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
a9e	echo.asm	/^ a9e:	53                   	push   %ebx$/;"	l
a9e	init.asm	/^ a9e:	34 34                	xor    $0x34,%al$/;"	l
a9e	mkdir.asm	/^ a9e:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
a9e	rm.asm	/^ a9e:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
a9e	sh.asm	/^     a9e:	00 $/;"	l
a9e	stressfs.asm	/^     a9e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
a9e	zombie.asm	/^ a9e:	f7 f3                	div    %ebx$/;"	l
a9f	echo.asm	/^ a9f:	83 ec 30             	sub    $0x30,%esp$/;"	l
a9f	sh.asm	/^     a9f:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a9f	stressfs.asm	/^     a9f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aa	cs550_user.asm	/^      aa:	e8 29 05 00 00       	call   5d8 <uptime>$/;"	l
aa	echo.asm	/^  aa:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
aa	ln.asm	/^  aa:	90                   	nop$/;"	l
aa	ls.asm	/^      aa:	83 c4 24             	add    $0x24,%esp$/;"	l
aa	mkdir.asm	/^  aa:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
aa	rm.asm	/^  aa:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
aa0	grep.asm	/^     aa0:	b8 96 0a 00 00       	mov    $0xa96,%eax$/;"	l
aa0	ln.asm	/^ aa0:	e8 5c f8 ff ff       	call   301 <write>$/;"	l
aa0	ls.asm	/^     aa0:	cd 42                	int    $0x42$/;"	l
aa0	stressfs.asm	/^     aa0:	33 35 00 b8 99 0a    	xor    0xa99b800,%esi$/;"	l
aa0	wc.asm	/^     aa0:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aa0	zombie.asm	/^ aa0:	89 d0                	mov    %edx,%eax$/;"	l
aa1	init.asm	/^ aa1:	b8 97 0a 00 00       	mov    $0xa97,%eax$/;"	l
aa1	mkdir.asm	/^ aa1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
aa1	rm.asm	/^ aa1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
aa1	wc.asm	/^     aa1:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aa2	cat.asm	/^ aa2:	cd 42                	int    $0x42$/;"	l
aa2	echo.asm	/^ aa2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
aa2	forktest.asm	/^ aa2:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aa2	ls.asm	/^     aa2:	c3                   	ret    $/;"	l
aa2	sh.asm	/^     aa2:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
aa2	wc.asm	/^     aa2:	33 33                	xor    (%ebx),%esi$/;"	l
aa2	zombie.asm	/^ aa2:	0f b6 80 20 11 00 00 	movzbl 0x1120(%eax),%eax$/;"	l
aa3	cs550_user.asm	/^     aa3:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aa3	forktest.asm	/^ aa3:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aa3	ls.asm	/^     aa3:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
aa3	stressfs.asm	/^     aa3:	b8 99 0a 00 00       	mov    $0xa99,%eax$/;"	l
aa4	cat.asm	/^ aa4:	c3                   	ret    $/;"	l
aa4	cs550_user.asm	/^     aa4:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aa4	forktest.asm	/^ aa4:	34 34                	xor    $0x34,%al$/;"	l
aa4	kill.asm	/^ aa4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
aa5	cat.asm	/^ aa5:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
aa5	cs550_user.asm	/^     aa5:	31 39                	xor    %edi,(%ecx)$/;"	l
aa5	grep.asm	/^     aa5:	cd 42                	int    $0x42$/;"	l
aa5	ln.asm	/^ aa5:	c9                   	leave  $/;"	l
aa5	wc.asm	/^     aa5:	b8 9b 0a 00 00       	mov    $0xa9b,%eax$/;"	l
aa6	init.asm	/^ aa6:	cd 42                	int    $0x42$/;"	l
aa6	ln.asm	/^ aa6:	c3                   	ret    $/;"	l
aa6	sh.asm	/^     aa6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
aa7	forktest.asm	/^ aa7:	b8 9d 0a 00 00       	mov    $0xa9d,%eax$/;"	l
aa7	grep.asm	/^     aa7:	c3                   	ret    $/;"	l
aa7	ln.asm	/^ aa7:	55                   	push   %ebp$/;"	l
aa8	cs550_user.asm	/^     aa8:	b8 9e 0a 00 00       	mov    $0xa9e,%eax$/;"	l
aa8	grep.asm	/^     aa8:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
aa8	init.asm	/^ aa8:	c3                   	ret    $/;"	l
aa8	kill.asm	/^ aa8:	74 17                	je     ac1 <printint+0x2c>$/;"	l
aa8	ln.asm	/^ aa8:	89 e5                	mov    %esp,%ebp$/;"	l
aa8	ls.asm	/^     aa8:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aa8	mkdir.asm	/^ aa8:	00 $/;"	l
aa8	rm.asm	/^ aa8:	00 $/;"	l
aa8	stressfs.asm	/^     aa8:	cd 42                	int    $0x42$/;"	l
aa9	echo.asm	/^ aa9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
aa9	init.asm	/^ aa9:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
aa9	ls.asm	/^     aa9:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aa9	mkdir.asm	/^ aa9:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
aa9	rm.asm	/^ aa9:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
aa9	sh.asm	/^     aa9:	89 04 24             	mov    %eax,(%esp)$/;"	l
aa9	zombie.asm	/^ aa9:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
aaa	cat.asm	/^ aaa:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aaa	kill.asm	/^ aaa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
aaa	ln.asm	/^ aaa:	56                   	push   %esi$/;"	l
aaa	ls.asm	/^     aaa:	31 32                	xor    %esi,(%edx)$/;"	l
aaa	stressfs.asm	/^     aaa:	c3                   	ret    $/;"	l
aaa	wc.asm	/^     aaa:	cd 42                	int    $0x42$/;"	l
aab	cat.asm	/^ aab:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aab	ln.asm	/^ aab:	53                   	push   %ebx$/;"	l
aab	stressfs.asm	/^     aab:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
aac	cat.asm	/^ aac:	34 34                	xor    $0x34,%al$/;"	l
aac	forktest.asm	/^ aac:	cd 42                	int    $0x42$/;"	l
aac	ln.asm	/^ aac:	83 ec 30             	sub    $0x30,%esp$/;"	l
aac	mkdir.asm	/^ aac:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
aac	rm.asm	/^ aac:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
aac	sh.asm	/^     aac:	e8 81 fa ff ff       	call   532 <gettoken>$/;"	l
aac	wc.asm	/^     aac:	c3                   	ret    $/;"	l
aad	cs550_user.asm	/^     aad:	cd 42                	int    $0x42$/;"	l
aad	echo.asm	/^ aad:	74 17                	je     ac6 <printint+0x2c>$/;"	l
aad	grep.asm	/^     aad:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aad	ls.asm	/^     aad:	b8 a3 0a 00 00       	mov    $0xaa3,%eax$/;"	l
aad	wc.asm	/^     aad:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
aad	zombie.asm	/^ aad:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
aae	forktest.asm	/^ aae:	c3                   	ret    $/;"	l
aae	grep.asm	/^     aae:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aae	init.asm	/^ aae:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aae	kill.asm	/^ aae:	79 11                	jns    ac1 <printint+0x2c>$/;"	l
aaf	cat.asm	/^ aaf:	b8 a5 0a 00 00       	mov    $0xaa5,%eax$/;"	l
aaf	cs550_user.asm	/^     aaf:	c3                   	ret    $/;"	l
aaf	echo.asm	/^ aaf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
aaf	forktest.asm	/^ aaf:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
aaf	grep.asm	/^     aaf:	31 32                	xor    %esi,(%edx)$/;"	l
aaf	init.asm	/^ aaf:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aaf	ln.asm	/^ aaf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
ab	cat.asm	/^  ab:	00 $/;"	l
ab	init.asm	/^  ab:	75 2d                	jne    da <main+0xda>$/;"	l
ab	kill.asm	/^  ab:	0f b6 12             	movzbl (%edx),%edx$/;"	l
ab	ln.asm	/^  ab:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ab	zombie.asm	/^  ab:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ab0	cs550_user.asm	/^     ab0:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ab0	init.asm	/^ ab0:	34 35                	xor    $0x35,%al$/;"	l
ab0	kill.asm	/^ ab0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
ab0	mkdir.asm	/^ ab0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ab0	rm.asm	/^ ab0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ab0	stressfs.asm	/^     ab0:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ab0	zombie.asm	/^ ab0:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
ab1	sh.asm	/^     ab1:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ab1	stressfs.asm	/^     ab1:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ab2	grep.asm	/^     ab2:	b8 a8 0a 00 00       	mov    $0xaa8,%eax$/;"	l
ab2	ls.asm	/^     ab2:	cd 42                	int    $0x42$/;"	l
ab2	stressfs.asm	/^     ab2:	33 36                	xor    (%esi),%esi$/;"	l
ab2	wc.asm	/^     ab2:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ab3	echo.asm	/^ ab3:	79 11                	jns    ac6 <printint+0x2c>$/;"	l
ab3	init.asm	/^ ab3:	b8 a9 0a 00 00       	mov    $0xaa9,%eax$/;"	l
ab3	mkdir.asm	/^ ab3:	89 04 24             	mov    %eax,(%esp)$/;"	l
ab3	rm.asm	/^ ab3:	89 04 24             	mov    %eax,(%esp)$/;"	l
ab3	wc.asm	/^     ab3:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ab3	zombie.asm	/^ ab3:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ab4	cat.asm	/^ ab4:	cd 42                	int    $0x42$/;"	l
ab4	forktest.asm	/^ ab4:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ab4	ls.asm	/^     ab4:	c3                   	ret    $/;"	l
ab4	sh.asm	/^     ab4:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
ab4	wc.asm	/^     ab4:	33 34 00             	xor    (%eax,%eax,1),%esi$/;"	l
ab5	cs550_user.asm	/^     ab5:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ab5	echo.asm	/^ ab5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
ab5	forktest.asm	/^ ab5:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ab5	ls.asm	/^     ab5:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ab5	stressfs.asm	/^     ab5:	b8 ab 0a 00 00       	mov    $0xaab,%eax$/;"	l
ab6	cat.asm	/^ ab6:	c3                   	ret    $/;"	l
ab6	cs550_user.asm	/^     ab6:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ab6	forktest.asm	/^ ab6:	34 35                	xor    $0x35,%al$/;"	l
ab6	ln.asm	/^ ab6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
ab6	mkdir.asm	/^ ab6:	e8 5c f8 ff ff       	call   317 <write>$/;"	l
ab6	rm.asm	/^ ab6:	e8 5c f8 ff ff       	call   317 <write>$/;"	l
ab7	cat.asm	/^ ab7:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ab7	cs550_user.asm	/^     ab7:	32 30                	xor    (%eax),%dh$/;"	l
ab7	grep.asm	/^     ab7:	cd 42                	int    $0x42$/;"	l
ab7	kill.asm	/^ ab7:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ab7	wc.asm	/^     ab7:	b8 ad 0a 00 00       	mov    $0xaad,%eax$/;"	l
ab8	init.asm	/^ ab8:	cd 42                	int    $0x42$/;"	l
ab8	sh.asm	/^     ab8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ab8	zombie.asm	/^ ab8:	f7 f6                	div    %esi$/;"	l
ab9	forktest.asm	/^ ab9:	b8 af 0a 00 00       	mov    $0xaaf,%eax$/;"	l
ab9	grep.asm	/^     ab9:	c3                   	ret    $/;"	l
aba	cs550_user.asm	/^     aba:	b8 b0 0a 00 00       	mov    $0xab0,%eax$/;"	l
aba	grep.asm	/^     aba:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
aba	init.asm	/^ aba:	c3                   	ret    $/;"	l
aba	kill.asm	/^ aba:	f7 d8                	neg    %eax$/;"	l
aba	ln.asm	/^ aba:	74 17                	je     ad3 <printint+0x2c>$/;"	l
aba	ls.asm	/^     aba:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aba	stressfs.asm	/^     aba:	cd 42                	int    $0x42$/;"	l
aba	zombie.asm	/^ aba:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
abb	init.asm	/^ abb:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
abb	ls.asm	/^     abb:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
abb	mkdir.asm	/^ abb:	c9                   	leave  $/;"	l
abb	rm.asm	/^ abb:	c9                   	leave  $/;"	l
abb	sh.asm	/^     abb:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
abc	cat.asm	/^ abc:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
abc	echo.asm	/^ abc:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
abc	kill.asm	/^ abc:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
abc	ln.asm	/^ abc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
abc	ls.asm	/^     abc:	31 33                	xor    %esi,(%ebx)$/;"	l
abc	mkdir.asm	/^ abc:	c3                   	ret    $/;"	l
abc	rm.asm	/^ abc:	c3                   	ret    $/;"	l
abc	stressfs.asm	/^     abc:	c3                   	ret    $/;"	l
abc	wc.asm	/^     abc:	cd 42                	int    $0x42$/;"	l
abd	cat.asm	/^ abd:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
abd	mkdir.asm	/^ abd:	55                   	push   %ebp$/;"	l
abd	rm.asm	/^ abd:	55                   	push   %ebp$/;"	l
abd	stressfs.asm	/^     abd:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
abd	zombie.asm	/^ abd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
abe	cat.asm	/^ abe:	34 35                	xor    $0x35,%al$/;"	l
abe	forktest.asm	/^ abe:	cd 42                	int    $0x42$/;"	l
abe	mkdir.asm	/^ abe:	89 e5                	mov    %esp,%ebp$/;"	l
abe	rm.asm	/^ abe:	89 e5                	mov    %esp,%ebp$/;"	l
abe	wc.asm	/^     abe:	c3                   	ret    $/;"	l
abf	cs550_user.asm	/^     abf:	cd 42                	int    $0x42$/;"	l
abf	echo.asm	/^ abf:	f7 d8                	neg    %eax$/;"	l
abf	grep.asm	/^     abf:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
abf	kill.asm	/^ abf:	eb 06                	jmp    ac7 <printint+0x32>$/;"	l
abf	ls.asm	/^     abf:	b8 b5 0a 00 00       	mov    $0xab5,%eax$/;"	l
abf	sh.asm	/^     abf:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
abf	wc.asm	/^     abf:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ac	cat.asm	/^  ac:	89 04 24             	mov    %eax,(%esp)$/;"	l
ac	sh.asm	/^      ac:	85 c0                	test   %eax,%eax$/;"	l
ac	stressfs.asm	/^      ac:	00 $/;"	l
ac	wc.asm	/^      ac:	0f 8f 70 ff ff ff    	jg     22 <wc+0x22>$/;"	l
ac0	forktest.asm	/^ ac0:	c3                   	ret    $/;"	l
ac0	grep.asm	/^     ac0:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ac0	init.asm	/^ ac0:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ac0	ln.asm	/^ ac0:	79 11                	jns    ad3 <printint+0x2c>$/;"	l
ac0	mkdir.asm	/^ ac0:	56                   	push   %esi$/;"	l
ac0	rm.asm	/^ ac0:	56                   	push   %esi$/;"	l
ac1	cat.asm	/^ ac1:	b8 b7 0a 00 00       	mov    $0xab7,%eax$/;"	l
ac1	cs550_user.asm	/^     ac1:	c3                   	ret    $/;"	l
ac1	echo.asm	/^ ac1:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ac1	forktest.asm	/^ ac1:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ac1	grep.asm	/^     ac1:	31 33                	xor    %esi,(%ebx)$/;"	l
ac1	init.asm	/^ ac1:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ac1	kill.asm	/^ ac1:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ac1	mkdir.asm	/^ ac1:	53                   	push   %ebx$/;"	l
ac1	rm.asm	/^ ac1:	53                   	push   %ebx$/;"	l
ac1	zombie.asm	/^ ac1:	75 c7                	jne    a8a <printint+0x39>$/;"	l
ac2	cs550_user.asm	/^     ac2:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ac2	init.asm	/^ ac2:	34 36                	xor    $0x36,%al$/;"	l
ac2	ln.asm	/^ ac2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
ac2	mkdir.asm	/^ ac2:	83 ec 30             	sub    $0x30,%esp$/;"	l
ac2	rm.asm	/^ ac2:	83 ec 30             	sub    $0x30,%esp$/;"	l
ac2	sh.asm	/^     ac2:	89 04 24             	mov    %eax,(%esp)$/;"	l
ac2	stressfs.asm	/^     ac2:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ac3	stressfs.asm	/^     ac3:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ac3	zombie.asm	/^ ac3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
ac4	echo.asm	/^ ac4:	eb 06                	jmp    acc <printint+0x32>$/;"	l
ac4	grep.asm	/^     ac4:	b8 ba 0a 00 00       	mov    $0xaba,%eax$/;"	l
ac4	kill.asm	/^ ac4:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ac4	ls.asm	/^     ac4:	cd 42                	int    $0x42$/;"	l
ac4	stressfs.asm	/^     ac4:	33 37                	xor    (%edi),%esi$/;"	l
ac4	wc.asm	/^     ac4:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ac5	init.asm	/^ ac5:	b8 bb 0a 00 00       	mov    $0xabb,%eax$/;"	l
ac5	mkdir.asm	/^ ac5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
ac5	rm.asm	/^ ac5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
ac5	sh.asm	/^     ac5:	e8 0c fe ff ff       	call   8d6 <parseredirs>$/;"	l
ac5	wc.asm	/^     ac5:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ac6	cat.asm	/^ ac6:	cd 42                	int    $0x42$/;"	l
ac6	echo.asm	/^ ac6:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ac6	forktest.asm	/^ ac6:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ac6	ls.asm	/^     ac6:	c3                   	ret    $/;"	l
ac6	wc.asm	/^     ac6:	33 35 00 b8 bf 0a    	xor    0xabfb800,%esi$/;"	l
ac7	cs550_user.asm	/^     ac7:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ac7	forktest.asm	/^ ac7:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ac7	kill.asm	/^ ac7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
ac7	ls.asm	/^     ac7:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ac7	stressfs.asm	/^     ac7:	b8 bd 0a 00 00       	mov    $0xabd,%eax$/;"	l
ac7	zombie.asm	/^ ac7:	74 10                	je     ad9 <printint+0x88>$/;"	l
ac8	cat.asm	/^ ac8:	c3                   	ret    $/;"	l
ac8	cs550_user.asm	/^     ac8:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ac8	forktest.asm	/^ ac8:	34 36                	xor    $0x36,%al$/;"	l
ac9	cat.asm	/^ ac9:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ac9	cs550_user.asm	/^     ac9:	32 31                	xor    (%ecx),%dh$/;"	l
ac9	echo.asm	/^ ac9:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ac9	grep.asm	/^     ac9:	cd 42                	int    $0x42$/;"	l
ac9	ln.asm	/^ ac9:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ac9	wc.asm	/^     ac9:	b8 bf 0a 00 00       	mov    $0xabf,%eax$/;"	l
ac9	zombie.asm	/^ ac9:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
aca	init.asm	/^ aca:	cd 42                	int    $0x42$/;"	l
aca	sh.asm	/^     aca:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
acb	forktest.asm	/^ acb:	b8 c1 0a 00 00       	mov    $0xac1,%eax$/;"	l
acb	grep.asm	/^     acb:	c3                   	ret    $/;"	l
acc	cs550_user.asm	/^     acc:	b8 c2 0a 00 00       	mov    $0xac2,%eax$/;"	l
acc	echo.asm	/^ acc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
acc	grep.asm	/^     acc:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
acc	init.asm	/^ acc:	c3                   	ret    $/;"	l
acc	ln.asm	/^ acc:	f7 d8                	neg    %eax$/;"	l
acc	ls.asm	/^     acc:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
acc	mkdir.asm	/^ acc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
acc	rm.asm	/^ acc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
acc	stressfs.asm	/^     acc:	cd 42                	int    $0x42$/;"	l
acc	zombie.asm	/^ acc:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
acd	init.asm	/^ acd:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
acd	ls.asm	/^     acd:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
acd	sh.asm	/^     acd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ace	cat.asm	/^ ace:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ace	kill.asm	/^ ace:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
ace	ln.asm	/^ ace:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ace	ls.asm	/^     ace:	31 34 00             	xor    %esi,(%eax,%eax,1)$/;"	l
ace	stressfs.asm	/^     ace:	c3                   	ret    $/;"	l
ace	wc.asm	/^     ace:	cd 42                	int    $0x42$/;"	l
acf	cat.asm	/^ acf:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
acf	stressfs.asm	/^     acf:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
acf	zombie.asm	/^ acf:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
acquire	spinlock.s	/^acquire:$/;"	l
ad	echo.asm	/^  ad:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
ad	grep.asm	/^      ad:	7e 29                	jle    d8 <grep+0xd8>$/;"	l
ad	init.asm	/^  ad:	c7 44 24 04 5c 12 00 	movl   $0x125c,0x4(%esp)$/;"	l
ad	ls.asm	/^      ad:	5b                   	pop    %ebx$/;"	l
ad	mkdir.asm	/^  ad:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
ad	rm.asm	/^  ad:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
ad	stressfs.asm	/^      ad:	89 c2                	mov    %eax,%edx$/;"	l
ad0	cat.asm	/^ ad0:	34 36                	xor    $0x36,%al$/;"	l
ad0	forktest.asm	/^ ad0:	cd 42                	int    $0x42$/;"	l
ad0	mkdir.asm	/^ ad0:	74 17                	je     ae9 <printint+0x2c>$/;"	l
ad0	rm.asm	/^ ad0:	74 17                	je     ae9 <printint+0x2c>$/;"	l
ad0	sh.asm	/^     ad0:	c9                   	leave  $/;"	l
ad0	wc.asm	/^     ad0:	c3                   	ret    $/;"	l
ad1	cs550_user.asm	/^     ad1:	cd 42                	int    $0x42$/;"	l
ad1	grep.asm	/^     ad1:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ad1	kill.asm	/^ ad1:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
ad1	ln.asm	/^ ad1:	eb 06                	jmp    ad9 <printint+0x32>$/;"	l
ad1	ls.asm	/^     ad1:	b8 c7 0a 00 00       	mov    $0xac7,%eax$/;"	l
ad1	sh.asm	/^     ad1:	c3                   	ret    $/;"	l
ad1	wc.asm	/^     ad1:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ad2	forktest.asm	/^ ad2:	c3                   	ret    $/;"	l
ad2	grep.asm	/^     ad2:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ad2	init.asm	/^ ad2:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ad2	mkdir.asm	/^ ad2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
ad2	rm.asm	/^ ad2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
ad2	sh.asm	/^     ad2:	55                   	push   %ebp$/;"	l
ad2	zombie.asm	/^ ad2:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
ad3	cat.asm	/^ ad3:	b8 c9 0a 00 00       	mov    $0xac9,%eax$/;"	l
ad3	cs550_user.asm	/^     ad3:	c3                   	ret    $/;"	l
ad3	echo.asm	/^ ad3:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
ad3	forktest.asm	/^ ad3:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ad3	grep.asm	/^     ad3:	31 34 00             	xor    %esi,(%eax,%eax,1)$/;"	l
ad3	init.asm	/^ ad3:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ad3	ln.asm	/^ ad3:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ad3	sh.asm	/^     ad3:	89 e5                	mov    %esp,%ebp$/;"	l
ad4	cs550_user.asm	/^     ad4:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ad4	init.asm	/^ ad4:	34 37                	xor    $0x37,%al$/;"	l
ad4	kill.asm	/^ ad4:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ad4	stressfs.asm	/^     ad4:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ad5	sh.asm	/^     ad5:	83 ec 38             	sub    $0x38,%esp$/;"	l
ad5	stressfs.asm	/^     ad5:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ad6	echo.asm	/^ ad6:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
ad6	grep.asm	/^     ad6:	b8 cc 0a 00 00       	mov    $0xacc,%eax$/;"	l
ad6	ln.asm	/^ ad6:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ad6	ls.asm	/^     ad6:	cd 42                	int    $0x42$/;"	l
ad6	mkdir.asm	/^ ad6:	79 11                	jns    ae9 <printint+0x2c>$/;"	l
ad6	rm.asm	/^ ad6:	79 11                	jns    ae9 <printint+0x2c>$/;"	l
ad6	stressfs.asm	/^     ad6:	33 38                	xor    (%eax),%edi$/;"	l
ad6	wc.asm	/^     ad6:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ad7	init.asm	/^ ad7:	b8 cd 0a 00 00       	mov    $0xacd,%eax$/;"	l
ad7	kill.asm	/^ ad7:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
ad7	wc.asm	/^     ad7:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ad7	zombie.asm	/^ ad7:	eb 1f                	jmp    af8 <printint+0xa7>$/;"	l
ad8	cat.asm	/^ ad8:	cd 42                	int    $0x42$/;"	l
ad8	forktest.asm	/^ ad8:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ad8	ls.asm	/^     ad8:	c3                   	ret    $/;"	l
ad8	mkdir.asm	/^ ad8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
ad8	rm.asm	/^ ad8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
ad8	sh.asm	/^     ad8:	c7 44 24 08 4f 1c 00 	movl   $0x1c4f,0x8(%esp)$/;"	l
ad8	wc.asm	/^     ad8:	33 36                	xor    (%esi),%esi$/;"	l
ad9	cs550_user.asm	/^     ad9:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ad9	echo.asm	/^ ad9:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ad9	forktest.asm	/^ ad9:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ad9	ln.asm	/^ ad9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
ad9	ls.asm	/^     ad9:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ad9	stressfs.asm	/^     ad9:	b8 cf 0a 00 00       	mov    $0xacf,%eax$/;"	l
ad9	zombie.asm	/^ ad9:	eb 1d                	jmp    af8 <printint+0xa7>$/;"	l
ada	cat.asm	/^ ada:	c3                   	ret    $/;"	l
ada	cs550_user.asm	/^     ada:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ada	forktest.asm	/^ ada:	34 37                	xor    $0x37,%al$/;"	l
ada	kill.asm	/^ ada:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
adb	cat.asm	/^ adb:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
adb	cs550_user.asm	/^     adb:	32 32                	xor    (%edx),%dh$/;"	l
adb	grep.asm	/^     adb:	cd 42                	int    $0x42$/;"	l
adb	wc.asm	/^     adb:	b8 d1 0a 00 00       	mov    $0xad1,%eax$/;"	l
adb	zombie.asm	/^ adb:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
adc	echo.asm	/^ adc:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
adc	init.asm	/^ adc:	cd 42                	int    $0x42$/;"	l
add	forktest.asm	/^ add:	b8 d3 0a 00 00       	mov    $0xad3,%eax$/;"	l
add	grep.asm	/^     add:	c3                   	ret    $/;"	l
add	kill.asm	/^ add:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
addr	kernel.asm	/^  addr = p2v(a);$/;"	d
addr	kernel.asm	/^  addr = proc->sz;$/;"	d
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
ade	cs550_user.asm	/^     ade:	b8 d4 0a 00 00       	mov    $0xad4,%eax$/;"	l
ade	grep.asm	/^     ade:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ade	init.asm	/^ ade:	c3                   	ret    $/;"	l
ade	ls.asm	/^     ade:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ade	stressfs.asm	/^     ade:	cd 42                	int    $0x42$/;"	l
ade	zombie.asm	/^ ade:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
adf	echo.asm	/^ adf:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
adf	init.asm	/^ adf:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
adf	ls.asm	/^     adf:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
adf	mkdir.asm	/^ adf:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
adf	rm.asm	/^ adf:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
adf	sh.asm	/^     adf:	00 $/;"	l
ae	kill.asm	/^  ae:	88 10                	mov    %dl,(%eax)$/;"	l
ae	ln.asm	/^  ae:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
ae	ls.asm	/^      ae:	5d                   	pop    %ebp$/;"	l
ae	sh.asm	/^      ae:	79 23                	jns    d3 <runcmd+0xd3>$/;"	l
ae	zombie.asm	/^  ae:	0f b6 c0             	movzbl %al,%eax$/;"	l
ae0	cat.asm	/^ ae0:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ae0	ln.asm	/^ ae0:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
ae0	ls.asm	/^     ae0:	31 35 00 b8 d9 0a    	xor    %esi,0xad9b800$/;"	l
ae0	sh.asm	/^     ae0:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ae0	stressfs.asm	/^     ae0:	c3                   	ret    $/;"	l
ae0	wc.asm	/^     ae0:	cd 42                	int    $0x42$/;"	l
ae1	cat.asm	/^ ae1:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ae1	stressfs.asm	/^     ae1:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ae1	zombie.asm	/^ ae1:	01 d0                	add    %edx,%eax$/;"	l
ae2	cat.asm	/^ ae2:	34 37                	xor    $0x37,%al$/;"	l
ae2	echo.asm	/^ ae2:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ae2	forktest.asm	/^ ae2:	cd 42                	int    $0x42$/;"	l
ae2	kill.asm	/^ ae2:	f7 f3                	div    %ebx$/;"	l
ae2	mkdir.asm	/^ ae2:	f7 d8                	neg    %eax$/;"	l
ae2	rm.asm	/^ ae2:	f7 d8                	neg    %eax$/;"	l
ae2	wc.asm	/^     ae2:	c3                   	ret    $/;"	l
ae3	cs550_user.asm	/^     ae3:	cd 42                	int    $0x42$/;"	l
ae3	grep.asm	/^     ae3:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ae3	ln.asm	/^ ae3:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
ae3	ls.asm	/^     ae3:	b8 d9 0a 00 00       	mov    $0xad9,%eax$/;"	l
ae3	sh.asm	/^     ae3:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ae3	wc.asm	/^     ae3:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ae3	zombie.asm	/^ ae3:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ae4	forktest.asm	/^ ae4:	c3                   	ret    $/;"	l
ae4	grep.asm	/^     ae4:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ae4	init.asm	/^ ae4:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ae4	kill.asm	/^ ae4:	89 d0                	mov    %edx,%eax$/;"	l
ae4	mkdir.asm	/^ ae4:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ae4	rm.asm	/^ ae4:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ae5	cat.asm	/^ ae5:	b8 db 0a 00 00       	mov    $0xadb,%eax$/;"	l
ae5	cs550_user.asm	/^     ae5:	c3                   	ret    $/;"	l
ae5	forktest.asm	/^ ae5:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ae5	grep.asm	/^     ae5:	31 35 00 b8 de 0a    	xor    %esi,0xadeb800$/;"	l
ae5	init.asm	/^ ae5:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ae6	cs550_user.asm	/^     ae6:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ae6	init.asm	/^ ae6:	34 38                	xor    $0x38,%al$/;"	l
ae6	kill.asm	/^ ae6:	0f b6 80 78 11 00 00 	movzbl 0x1178(%eax),%eax$/;"	l
ae6	ln.asm	/^ ae6:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ae6	stressfs.asm	/^     ae6:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ae6	zombie.asm	/^ ae6:	0f be c0             	movsbl %al,%eax$/;"	l
ae7	echo.asm	/^ ae7:	f7 f3                	div    %ebx$/;"	l
ae7	mkdir.asm	/^ ae7:	eb 06                	jmp    aef <printint+0x32>$/;"	l
ae7	rm.asm	/^ ae7:	eb 06                	jmp    aef <printint+0x32>$/;"	l
ae7	sh.asm	/^     ae7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ae7	stressfs.asm	/^     ae7:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ae8	grep.asm	/^     ae8:	b8 de 0a 00 00       	mov    $0xade,%eax$/;"	l
ae8	ls.asm	/^     ae8:	cd 42                	int    $0x42$/;"	l
ae8	stressfs.asm	/^     ae8:	33 39                	xor    (%ecx),%edi$/;"	l
ae8	wc.asm	/^     ae8:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ae9	echo.asm	/^ ae9:	89 d0                	mov    %edx,%eax$/;"	l
ae9	init.asm	/^ ae9:	b8 df 0a 00 00       	mov    $0xadf,%eax$/;"	l
ae9	ln.asm	/^ ae9:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
ae9	mkdir.asm	/^ ae9:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ae9	rm.asm	/^ ae9:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ae9	wc.asm	/^     ae9:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ae9	zombie.asm	/^ ae9:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
aea	cat.asm	/^ aea:	cd 42                	int    $0x42$/;"	l
aea	forktest.asm	/^ aea:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aea	ls.asm	/^     aea:	c3                   	ret    $/;"	l
aea	sh.asm	/^     aea:	89 04 24             	mov    %eax,(%esp)$/;"	l
aea	wc.asm	/^     aea:	33 37                	xor    (%edi),%esi$/;"	l
aeb	cs550_user.asm	/^     aeb:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aeb	echo.asm	/^ aeb:	0f b6 80 74 11 00 00 	movzbl 0x1174(%eax),%eax$/;"	l
aeb	forktest.asm	/^ aeb:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aeb	ls.asm	/^     aeb:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
aeb	stressfs.asm	/^     aeb:	b8 e1 0a 00 00       	mov    $0xae1,%eax$/;"	l
aec	cat.asm	/^ aec:	c3                   	ret    $/;"	l
aec	cs550_user.asm	/^     aec:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
aec	forktest.asm	/^ aec:	34 38                	xor    $0x38,%al$/;"	l
aec	ln.asm	/^ aec:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
aec	mkdir.asm	/^ aec:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
aec	rm.asm	/^ aec:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
aed	cat.asm	/^ aed:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
aed	cs550_user.asm	/^     aed:	32 33                	xor    (%ebx),%dh$/;"	l
aed	grep.asm	/^     aed:	cd 42                	int    $0x42$/;"	l
aed	kill.asm	/^ aed:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
aed	sh.asm	/^     aed:	e8 8b fb ff ff       	call   67d <peek>$/;"	l
aed	wc.asm	/^     aed:	b8 e3 0a 00 00       	mov    $0xae3,%eax$/;"	l
aed	zombie.asm	/^ aed:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
aee	init.asm	/^ aee:	cd 42                	int    $0x42$/;"	l
aef	forktest.asm	/^ aef:	b8 e5 0a 00 00       	mov    $0xae5,%eax$/;"	l
aef	grep.asm	/^     aef:	c3                   	ret    $/;"	l
aef	ln.asm	/^ aef:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
aef	mkdir.asm	/^ aef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
aef	rm.asm	/^ aef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
af	cat.asm	/^  af:	e8 11 03 00 00       	call   3c5 <open>$/;"	l
af	cs550_user.asm	/^      af:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
af	grep.asm	/^      af:	ba 60 15 00 00       	mov    $0x1560,%edx$/;"	l
af	ls.asm	/^      af:	c3                   	ret    $/;"	l
af	stressfs.asm	/^      af:	8b 84 24 2c 02 00 00 	mov    0x22c(%esp),%eax$/;"	l
af0	cs550_user.asm	/^     af0:	b8 e6 0a 00 00       	mov    $0xae6,%eax$/;"	l
af0	grep.asm	/^     af0:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
af0	init.asm	/^ af0:	c3                   	ret    $/;"	l
af0	ls.asm	/^     af0:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
af0	stressfs.asm	/^     af0:	cd 42                	int    $0x42$/;"	l
af0	zombie.asm	/^ af0:	89 04 24             	mov    %eax,(%esp)$/;"	l
af1	init.asm	/^ af1:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
af1	kill.asm	/^ af1:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
af1	ls.asm	/^     af1:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
af2	cat.asm	/^ af2:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
af2	echo.asm	/^ af2:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
af2	ls.asm	/^     af2:	31 36                	xor    %esi,(%esi)$/;"	l
af2	sh.asm	/^     af2:	85 c0                	test   %eax,%eax$/;"	l
af2	stressfs.asm	/^     af2:	c3                   	ret    $/;"	l
af2	wc.asm	/^     af2:	cd 42                	int    $0x42$/;"	l
af3	cat.asm	/^ af3:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
af3	stressfs.asm	/^     af3:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
af3	zombie.asm	/^ af3:	e8 31 ff ff ff       	call   a29 <putc>$/;"	l
af4	cat.asm	/^ af4:	34 38                	xor    $0x38,%al$/;"	l
af4	forktest.asm	/^ af4:	cd 42                	int    $0x42$/;"	l
af4	kill.asm	/^ af4:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
af4	ln.asm	/^ af4:	f7 f3                	div    %ebx$/;"	l
af4	sh.asm	/^     af4:	74 17                	je     b0d <parseexec+0x3b>$/;"	l
af4	wc.asm	/^     af4:	c3                   	ret    $/;"	l
af5	cs550_user.asm	/^     af5:	cd 42                	int    $0x42$/;"	l
af5	grep.asm	/^     af5:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
af5	ls.asm	/^     af5:	b8 eb 0a 00 00       	mov    $0xaeb,%eax$/;"	l
af5	wc.asm	/^     af5:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
af6	echo.asm	/^ af6:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
af6	forktest.asm	/^ af6:	c3                   	ret    $/;"	l
af6	grep.asm	/^     af6:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
af6	init.asm	/^ af6:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
af6	ln.asm	/^ af6:	89 d0                	mov    %edx,%eax$/;"	l
af6	mkdir.asm	/^ af6:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
af6	rm.asm	/^ af6:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
af6	sh.asm	/^     af6:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
af7	cat.asm	/^ af7:	b8 ed 0a 00 00       	mov    $0xaed,%eax$/;"	l
af7	cs550_user.asm	/^     af7:	c3                   	ret    $/;"	l
af7	forktest.asm	/^ af7:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
af7	grep.asm	/^     af7:	31 36                	xor    %esi,(%esi)$/;"	l
af7	init.asm	/^ af7:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
af7	kill.asm	/^ af7:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
af8	cs550_user.asm	/^     af8:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
af8	init.asm	/^ af8:	34 39                	xor    $0x39,%al$/;"	l
af8	ln.asm	/^ af8:	0f b6 80 a0 11 00 00 	movzbl 0x11a0(%eax),%eax$/;"	l
af8	stressfs.asm	/^     af8:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
af8	zombie.asm	/^ af8:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
af9	echo.asm	/^ af9:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
af9	mkdir.asm	/^ af9:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
af9	rm.asm	/^ af9:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
af9	sh.asm	/^     af9:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
af9	stressfs.asm	/^     af9:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
afa	grep.asm	/^     afa:	b8 f0 0a 00 00       	mov    $0xaf0,%eax$/;"	l
afa	ls.asm	/^     afa:	cd 42                	int    $0x42$/;"	l
afa	stressfs.asm	/^     afa:	34 30                	xor    $0x30,%al$/;"	l
afa	wc.asm	/^     afa:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
afb	init.asm	/^ afb:	b8 f1 0a 00 00       	mov    $0xaf1,%eax$/;"	l
afb	wc.asm	/^     afb:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
afc	cat.asm	/^ afc:	cd 42                	int    $0x42$/;"	l
afc	echo.asm	/^ afc:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
afc	forktest.asm	/^ afc:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
afc	kill.asm	/^ afc:	f7 f6                	div    %esi$/;"	l
afc	ls.asm	/^     afc:	c3                   	ret    $/;"	l
afc	mkdir.asm	/^ afc:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
afc	rm.asm	/^ afc:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
afc	wc.asm	/^     afc:	33 38                	xor    (%eax),%edi$/;"	l
afc	zombie.asm	/^ afc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
afd	cs550_user.asm	/^     afd:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
afd	forktest.asm	/^ afd:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
afd	ls.asm	/^     afd:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
afd	sh.asm	/^     afd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
afd	stressfs.asm	/^     afd:	b8 f3 0a 00 00       	mov    $0xaf3,%eax$/;"	l
afe	cat.asm	/^ afe:	c3                   	ret    $/;"	l
afe	cs550_user.asm	/^     afe:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
afe	forktest.asm	/^ afe:	34 39                	xor    $0x39,%al$/;"	l
afe	kill.asm	/^ afe:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
aff	cat.asm	/^ aff:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
aff	cs550_user.asm	/^     aff:	32 34 00             	xor    (%eax,%eax,1),%dh$/;"	l
aff	grep.asm	/^     aff:	cd 42                	int    $0x42$/;"	l
aff	ln.asm	/^ aff:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
aff	mkdir.asm	/^ aff:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
aff	rm.asm	/^ aff:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
aff	wc.asm	/^     aff:	b8 f5 0a 00 00       	mov    $0xaf5,%eax$/;"	l
align	elf.h	/^  uint align;$/;"	m	struct:proghdr
allocproc	proc.c	/^allocproc(void)$/;"	f	file:
allocproc	proc.s	/^allocproc:$/;"	l
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
allocuvm	vm.s	/^allocuvm:$/;"	l
alltraps	kernel.asm	/^alltraps:$/;"	l
alltraps	trapasm.S	/^alltraps:$/;"	l
ap	cat.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	cs550_user.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	echo.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	grep.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	init.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	kill.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ln.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ls.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	mkdir.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	rm.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	sh.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	stressfs.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	wc.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	zombie.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argfd	sysfile.s	/^argfd:$/;"	l
argint	syscall.c	/^argint(int n, int *ip)$/;"	f
argint	syscall.s	/^argint:$/;"	l
argp	kernel.asm	/^  argp = (uint*)(void*)(&fmt + 1);$/;"	d
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f
argptr	syscall.s	/^argptr:$/;"	l
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f
argstr	syscall.s	/^argstr:$/;"	l
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	init.s	/^argv:$/;"	l
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f
atoi	ulib.s	/^atoi:$/;"	l
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
b	cat.asm	/^   b:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b	kernel.asm	/^  b = bget(dev, blockno);$/;"	d
b0	echo.asm	/^  b0:	0f b6 12             	movzbl (%edx),%edx$/;"	l
b0	forktest.asm	/^  b0:	00 $/;"	l
b0	kill.asm	/^  b0:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b0	ls.asm	/^      b0:	55                   	push   %ebp$/;"	l
b0	mkdir.asm	/^  b0:	5b                   	pop    %ebx$/;"	l
b0	rm.asm	/^  b0:	5b                   	pop    %ebx$/;"	l
b0	sh.asm	/^      b0:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b00	init.asm	/^ b00:	cd 42                	int    $0x42$/;"	l
b00	sh.asm	/^     b00:	89 04 24             	mov    %eax,(%esp)$/;"	l
b00	zombie.asm	/^ b00:	79 d9                	jns    adb <printint+0x8a>$/;"	l
b01	echo.asm	/^ b01:	f7 f6                	div    %esi$/;"	l
b01	forktest.asm	/^ b01:	b8 f7 0a 00 00       	mov    $0xaf7,%eax$/;"	l
b01	grep.asm	/^     b01:	c3                   	ret    $/;"	l
b01	kill.asm	/^ b01:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b02	cs550_user.asm	/^     b02:	b8 f8 0a 00 00       	mov    $0xaf8,%eax$/;"	l
b02	grep.asm	/^     b02:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b02	init.asm	/^ b02:	c3                   	ret    $/;"	l
b02	ls.asm	/^     b02:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b02	mkdir.asm	/^ b02:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b02	rm.asm	/^ b02:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b02	stressfs.asm	/^     b02:	cd 42                	int    $0x42$/;"	l
b02	zombie.asm	/^ b02:	83 c4 30             	add    $0x30,%esp$/;"	l
b03	echo.asm	/^ b03:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b03	init.asm	/^ b03:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b03	ln.asm	/^ b03:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
b03	ls.asm	/^     b03:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b03	sh.asm	/^     b03:	e8 f6 fe ff ff       	call   9fe <parseblock>$/;"	l
b04	cat.asm	/^ b04:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b04	ls.asm	/^     b04:	31 37                	xor    %esi,(%edi)$/;"	l
b04	stressfs.asm	/^     b04:	c3                   	ret    $/;"	l
b04	wc.asm	/^     b04:	cd 42                	int    $0x42$/;"	l
b05	cat.asm	/^ b05:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b05	kill.asm	/^ b05:	75 c7                	jne    ace <printint+0x39>$/;"	l
b05	mkdir.asm	/^ b05:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b05	rm.asm	/^ b05:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b05	stressfs.asm	/^     b05:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b05	zombie.asm	/^ b05:	5b                   	pop    %ebx$/;"	l
b06	cat.asm	/^ b06:	34 39                	xor    $0x39,%al$/;"	l
b06	echo.asm	/^ b06:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b06	forktest.asm	/^ b06:	cd 42                	int    $0x42$/;"	l
b06	ln.asm	/^ b06:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b06	wc.asm	/^     b06:	c3                   	ret    $/;"	l
b06	zombie.asm	/^ b06:	5e                   	pop    %esi$/;"	l
b07	cs550_user.asm	/^     b07:	cd 42                	int    $0x42$/;"	l
b07	grep.asm	/^     b07:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b07	kill.asm	/^ b07:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
b07	ls.asm	/^     b07:	b8 fd 0a 00 00       	mov    $0xafd,%eax$/;"	l
b07	wc.asm	/^     b07:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b07	zombie.asm	/^ b07:	5d                   	pop    %ebp$/;"	l
b08	forktest.asm	/^ b08:	c3                   	ret    $/;"	l
b08	grep.asm	/^     b08:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b08	init.asm	/^ b08:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b08	sh.asm	/^     b08:	e9 09 01 00 00       	jmp    c16 <parseexec+0x144>$/;"	l
b08	zombie.asm	/^ b08:	c3                   	ret    $/;"	l
b09	cat.asm	/^ b09:	b8 ff 0a 00 00       	mov    $0xaff,%eax$/;"	l
b09	cs550_user.asm	/^     b09:	c3                   	ret    $/;"	l
b09	forktest.asm	/^ b09:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b09	grep.asm	/^     b09:	31 37                	xor    %esi,(%edi)$/;"	l
b09	init.asm	/^ b09:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b09	ln.asm	/^ b09:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b09	zombie.asm	/^ b09:	55                   	push   %ebp$/;"	l
b0a	cs550_user.asm	/^     b0a:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b0a	echo.asm	/^ b0a:	75 c7                	jne    ad3 <printint+0x39>$/;"	l
b0a	init.asm	/^ b0a:	35 30 00 b8 03       	xor    $0x3b80030,%eax$/;"	l
b0a	mkdir.asm	/^ b0a:	f7 f3                	div    %ebx$/;"	l
b0a	rm.asm	/^ b0a:	f7 f3                	div    %ebx$/;"	l
b0a	stressfs.asm	/^     b0a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b0a	zombie.asm	/^ b0a:	89 e5                	mov    %esp,%ebp$/;"	l
b0b	kill.asm	/^ b0b:	74 10                	je     b1d <printint+0x88>$/;"	l
b0b	stressfs.asm	/^     b0b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b0c	echo.asm	/^ b0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
b0c	grep.asm	/^     b0c:	b8 02 0b 00 00       	mov    $0xb02,%eax$/;"	l
b0c	ls.asm	/^     b0c:	cd 42                	int    $0x42$/;"	l
b0c	mkdir.asm	/^ b0c:	89 d0                	mov    %edx,%eax$/;"	l
b0c	rm.asm	/^ b0c:	89 d0                	mov    %edx,%eax$/;"	l
b0c	stressfs.asm	/^     b0c:	34 31                	xor    $0x31,%al$/;"	l
b0c	wc.asm	/^     b0c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b0c	zombie.asm	/^ b0c:	83 ec 38             	sub    $0x38,%esp$/;"	l
b0d	init.asm	/^ b0d:	b8 03 0b 00 00       	mov    $0xb03,%eax$/;"	l
b0d	kill.asm	/^ b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b0d	sh.asm	/^     b0d:	e8 90 f8 ff ff       	call   3a2 <execcmd>$/;"	l
b0d	wc.asm	/^     b0d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b0e	cat.asm	/^ b0e:	cd 42                	int    $0x42$/;"	l
b0e	forktest.asm	/^ b0e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b0e	ln.asm	/^ b0e:	f7 f6                	div    %esi$/;"	l
b0e	ls.asm	/^     b0e:	c3                   	ret    $/;"	l
b0e	mkdir.asm	/^ b0e:	0f b6 80 c0 11 00 00 	movzbl 0x11c0(%eax),%eax$/;"	l
b0e	rm.asm	/^ b0e:	0f b6 80 bc 11 00 00 	movzbl 0x11bc(%eax),%eax$/;"	l
b0e	wc.asm	/^     b0e:	33 39                	xor    (%ecx),%edi$/;"	l
b0f	cs550_user.asm	/^     b0f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b0f	forktest.asm	/^ b0f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b0f	ls.asm	/^     b0f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b0f	stressfs.asm	/^     b0f:	b8 05 0b 00 00       	mov    $0xb05,%eax$/;"	l
b0f	zombie.asm	/^ b0f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
b1	forktest.asm	/^  b1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
b1	ln.asm	/^  b1:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
b1	ls.asm	/^      b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	mkdir.asm	/^  b1:	5f                   	pop    %edi$/;"	l
b1	rm.asm	/^  b1:	5f                   	pop    %edi$/;"	l
b1	zombie.asm	/^  b1:	29 c2                	sub    %eax,%edx$/;"	l
b10	cat.asm	/^ b10:	c3                   	ret    $/;"	l
b10	cs550_user.asm	/^     b10:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b10	echo.asm	/^ b10:	74 10                	je     b22 <printint+0x88>$/;"	l
b10	forktest.asm	/^ b10:	35 30 00 b8 09       	xor    $0x9b80030,%eax$/;"	l
b10	kill.asm	/^ b10:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
b10	ln.asm	/^ b10:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b11	cat.asm	/^ b11:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b11	cs550_user.asm	/^     b11:	32 35 00 b8 0a 0b    	xor    0xb0ab800,%dh$/;"	l
b11	grep.asm	/^     b11:	cd 42                	int    $0x42$/;"	l
b11	wc.asm	/^     b11:	b8 07 0b 00 00       	mov    $0xb07,%eax$/;"	l
b12	echo.asm	/^ b12:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b12	init.asm	/^ b12:	cd 42                	int    $0x42$/;"	l
b12	sh.asm	/^     b12:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
b13	forktest.asm	/^ b13:	b8 09 0b 00 00       	mov    $0xb09,%eax$/;"	l
b13	grep.asm	/^     b13:	c3                   	ret    $/;"	l
b13	kill.asm	/^ b13:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
b13	ln.asm	/^ b13:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b14	cs550_user.asm	/^     b14:	b8 0a 0b 00 00       	mov    $0xb0a,%eax$/;"	l
b14	grep.asm	/^     b14:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b14	init.asm	/^ b14:	c3                   	ret    $/;"	l
b14	ls.asm	/^     b14:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b14	stressfs.asm	/^     b14:	cd 42                	int    $0x42$/;"	l
b15	echo.asm	/^ b15:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
b15	init.asm	/^ b15:	55                   	push   %ebp$/;"	l
b15	ls.asm	/^     b15:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b15	mkdir.asm	/^ b15:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
b15	rm.asm	/^ b15:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
b15	sh.asm	/^     b15:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b16	cat.asm	/^ b16:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b16	init.asm	/^ b16:	89 e5                	mov    %esp,%ebp$/;"	l
b16	kill.asm	/^ b16:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
b16	ls.asm	/^     b16:	31 38                	xor    %edi,(%eax)$/;"	l
b16	stressfs.asm	/^     b16:	c3                   	ret    $/;"	l
b16	wc.asm	/^     b16:	cd 42                	int    $0x42$/;"	l
b16	zombie.asm	/^ b16:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
b17	cat.asm	/^ b17:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b17	ln.asm	/^ b17:	75 c7                	jne    ae0 <printint+0x39>$/;"	l
b17	stressfs.asm	/^     b17:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b18	cat.asm	/^ b18:	35 30 00 b8 11       	xor    $0x11b80030,%eax$/;"	l
b18	echo.asm	/^ b18:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
b18	forktest.asm	/^ b18:	cd 42                	int    $0x42$/;"	l
b18	init.asm	/^ b18:	83 ec 18             	sub    $0x18,%esp$/;"	l
b18	sh.asm	/^     b18:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b18	wc.asm	/^     b18:	c3                   	ret    $/;"	l
b19	cs550_user.asm	/^     b19:	cd 42                	int    $0x42$/;"	l
b19	grep.asm	/^     b19:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b19	ln.asm	/^ b19:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
b19	ls.asm	/^     b19:	b8 0f 0b 00 00       	mov    $0xb0f,%eax$/;"	l
b19	mkdir.asm	/^ b19:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
b19	rm.asm	/^ b19:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
b19	wc.asm	/^     b19:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b19	zombie.asm	/^ b19:	83 c0 04             	add    $0x4,%eax$/;"	l
b1a	forktest.asm	/^ b1a:	c3                   	ret    $/;"	l
b1a	grep.asm	/^     b1a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b1b	cat.asm	/^ b1b:	b8 11 0b 00 00       	mov    $0xb11,%eax$/;"	l
b1b	cs550_user.asm	/^     b1b:	c3                   	ret    $/;"	l
b1b	echo.asm	/^ b1b:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
b1b	grep.asm	/^     b1b:	31 38                	xor    %edi,(%eax)$/;"	l
b1b	init.asm	/^ b1b:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b1b	kill.asm	/^ b1b:	eb 1f                	jmp    b3c <printint+0xa7>$/;"	l
b1b	sh.asm	/^     b1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
b1c	cs550_user.asm	/^     b1c:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b1c	mkdir.asm	/^ b1c:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b1c	rm.asm	/^ b1c:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b1c	stressfs.asm	/^     b1c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b1c	zombie.asm	/^ b1c:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
b1d	kill.asm	/^ b1d:	eb 1d                	jmp    b3c <printint+0xa7>$/;"	l
b1d	ln.asm	/^ b1d:	74 10                	je     b2f <printint+0x88>$/;"	l
b1d	stressfs.asm	/^     b1d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b1e	grep.asm	/^     b1e:	b8 14 0b 00 00       	mov    $0xb14,%eax$/;"	l
b1e	init.asm	/^ b1e:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
b1e	ls.asm	/^     b1e:	cd 42                	int    $0x42$/;"	l
b1e	stressfs.asm	/^     b1e:	34 32                	xor    $0x32,%al$/;"	l
b1e	wc.asm	/^     b1e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b1f	kill.asm	/^ b1f:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
b1f	ln.asm	/^ b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b1f	mkdir.asm	/^ b1f:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b1f	rm.asm	/^ b1f:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b1f	wc.asm	/^     b1f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b1f	zombie.asm	/^ b1f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
b2	cs550_user.asm	/^      b2:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b2	mkdir.asm	/^  b2:	5d                   	pop    %ebp$/;"	l
b2	rm.asm	/^  b2:	5d                   	pop    %ebp$/;"	l
b2	wc.asm	/^      b2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
b20	cat.asm	/^ b20:	cd 42                	int    $0x42$/;"	l
b20	echo.asm	/^ b20:	eb 1f                	jmp    b41 <printint+0xa7>$/;"	l
b20	ls.asm	/^     b20:	c3                   	ret    $/;"	l
b20	wc.asm	/^     b20:	34 30                	xor    $0x30,%al$/;"	l
b21	cs550_user.asm	/^     b21:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b21	init.asm	/^ b21:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
b21	ls.asm	/^     b21:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b21	stressfs.asm	/^     b21:	b8 17 0b 00 00       	mov    $0xb17,%eax$/;"	l
b22	cat.asm	/^ b22:	c3                   	ret    $/;"	l
b22	cs550_user.asm	/^     b22:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b22	echo.asm	/^ b22:	eb 1d                	jmp    b41 <printint+0xa7>$/;"	l
b22	kill.asm	/^ b22:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b22	ln.asm	/^ b22:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
b22	sh.asm	/^     b22:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b23	cat.asm	/^ b23:	55                   	push   %ebp$/;"	l
b23	cs550_user.asm	/^     b23:	32 36                	xor    (%esi),%dh$/;"	l
b23	grep.asm	/^     b23:	cd 42                	int    $0x42$/;"	l
b23	wc.asm	/^     b23:	b8 19 0b 00 00       	mov    $0xb19,%eax$/;"	l
b24	cat.asm	/^ b24:	89 e5                	mov    %esp,%ebp$/;"	l
b24	echo.asm	/^ b24:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
b24	mkdir.asm	/^ b24:	f7 f6                	div    %esi$/;"	l
b24	rm.asm	/^ b24:	f7 f6                	div    %esi$/;"	l
b25	grep.asm	/^     b25:	c3                   	ret    $/;"	l
b25	kill.asm	/^ b25:	01 d0                	add    %edx,%eax$/;"	l
b25	ln.asm	/^ b25:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
b25	sh.asm	/^     b25:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b26	cat.asm	/^ b26:	83 ec 18             	sub    $0x18,%esp$/;"	l
b26	cs550_user.asm	/^     b26:	b8 1c 0b 00 00       	mov    $0xb1c,%eax$/;"	l
b26	grep.asm	/^     b26:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b26	ls.asm	/^     b26:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b26	mkdir.asm	/^ b26:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b26	rm.asm	/^ b26:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b26	stressfs.asm	/^     b26:	cd 42                	int    $0x42$/;"	l
b26	zombie.asm	/^ b26:	e9 7c 01 00 00       	jmp    ca7 <printf+0x19e>$/;"	l
b27	echo.asm	/^ b27:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b27	kill.asm	/^ b27:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b27	ls.asm	/^     b27:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b28	init.asm	/^ b28:	00 $/;"	l
b28	ln.asm	/^ b28:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
b28	ls.asm	/^     b28:	31 39                	xor    %edi,(%ecx)$/;"	l
b28	stressfs.asm	/^     b28:	c3                   	ret    $/;"	l
b28	wc.asm	/^     b28:	cd 42                	int    $0x42$/;"	l
b29	cat.asm	/^ b29:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b29	init.asm	/^ b29:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
b29	mkdir.asm	/^ b29:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b29	rm.asm	/^ b29:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b29	sh.asm	/^     b29:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b29	stressfs.asm	/^     b29:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b2a	echo.asm	/^ b2a:	01 d0                	add    %edx,%eax$/;"	l
b2a	kill.asm	/^ b2a:	0f be c0             	movsbl %al,%eax$/;"	l
b2a	wc.asm	/^     b2a:	c3                   	ret    $/;"	l
b2b	cs550_user.asm	/^     b2b:	cd 42                	int    $0x42$/;"	l
b2b	grep.asm	/^     b2b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b2b	ls.asm	/^     b2b:	b8 21 0b 00 00       	mov    $0xb21,%eax$/;"	l
b2b	wc.asm	/^     b2b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b2b	zombie.asm	/^ b2b:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
b2c	cat.asm	/^ b2c:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
b2c	echo.asm	/^ b2c:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b2c	grep.asm	/^     b2c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b2c	init.asm	/^ b2c:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b2c	sh.asm	/^     b2c:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b2d	cs550_user.asm	/^     b2d:	c3                   	ret    $/;"	l
b2d	grep.asm	/^     b2d:	31 39                	xor    %edi,(%ecx)$/;"	l
b2d	kill.asm	/^ b2d:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b2d	ln.asm	/^ b2d:	eb 1f                	jmp    b4e <printint+0xa7>$/;"	l
b2d	mkdir.asm	/^ b2d:	75 c7                	jne    af6 <printint+0x39>$/;"	l
b2d	rm.asm	/^ b2d:	75 c7                	jne    af6 <printint+0x39>$/;"	l
b2e	cs550_user.asm	/^     b2e:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b2e	stressfs.asm	/^     b2e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b2e	zombie.asm	/^ b2e:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b2f	cat.asm	/^ b2f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
b2f	echo.asm	/^ b2f:	0f be c0             	movsbl %al,%eax$/;"	l
b2f	ln.asm	/^ b2f:	eb 1d                	jmp    b4e <printint+0xa7>$/;"	l
b2f	mkdir.asm	/^ b2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
b2f	rm.asm	/^ b2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
b2f	stressfs.asm	/^     b2f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b3	echo.asm	/^  b3:	88 10                	mov    %dl,(%eax)$/;"	l
b3	kill.asm	/^  b3:	84 c0                	test   %al,%al$/;"	l
b3	ls.asm	/^      b3:	57                   	push   %edi$/;"	l
b3	mkdir.asm	/^  b3:	c3                   	ret    $/;"	l
b3	rm.asm	/^  b3:	c3                   	ret    $/;"	l
b3	sh.asm	/^      b3:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
b3	zombie.asm	/^  b3:	89 d0                	mov    %edx,%eax$/;"	l
b30	grep.asm	/^     b30:	b8 26 0b 00 00       	mov    $0xb26,%eax$/;"	l
b30	init.asm	/^ b30:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b30	ls.asm	/^     b30:	cd 42                	int    $0x42$/;"	l
b30	sh.asm	/^     b30:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b30	stressfs.asm	/^     b30:	34 33                	xor    $0x33,%al$/;"	l
b30	wc.asm	/^     b30:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b31	kill.asm	/^ b31:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b31	ln.asm	/^ b31:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
b31	wc.asm	/^     b31:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b31	zombie.asm	/^ b31:	01 d0                	add    %edx,%eax$/;"	l
b32	echo.asm	/^ b32:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b32	ls.asm	/^     b32:	c3                   	ret    $/;"	l
b32	wc.asm	/^     b32:	34 31                	xor    $0x31,%al$/;"	l
b33	cs550_user.asm	/^     b33:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b33	init.asm	/^ b33:	89 04 24             	mov    %eax,(%esp)$/;"	l
b33	ls.asm	/^     b33:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b33	mkdir.asm	/^ b33:	74 10                	je     b45 <printint+0x88>$/;"	l
b33	rm.asm	/^ b33:	74 10                	je     b45 <printint+0x88>$/;"	l
b33	sh.asm	/^     b33:	89 04 24             	mov    %eax,(%esp)$/;"	l
b33	stressfs.asm	/^     b33:	b8 29 0b 00 00       	mov    $0xb29,%eax$/;"	l
b33	zombie.asm	/^ b33:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b34	cs550_user.asm	/^     b34:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b34	kill.asm	/^ b34:	89 04 24             	mov    %eax,(%esp)$/;"	l
b34	ln.asm	/^ b34:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b35	cs550_user.asm	/^     b35:	32 37                	xor    (%edi),%dh$/;"	l
b35	grep.asm	/^     b35:	cd 42                	int    $0x42$/;"	l
b35	mkdir.asm	/^ b35:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b35	rm.asm	/^ b35:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b35	wc.asm	/^     b35:	b8 2b 0b 00 00       	mov    $0xb2b,%eax$/;"	l
b36	cat.asm	/^ b36:	00 $/;"	l
b36	echo.asm	/^ b36:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b36	init.asm	/^ b36:	e8 5c f8 ff ff       	call   397 <write>$/;"	l
b36	sh.asm	/^     b36:	e8 9b fd ff ff       	call   8d6 <parseredirs>$/;"	l
b36	zombie.asm	/^ b36:	0f be c0             	movsbl %al,%eax$/;"	l
b37	cat.asm	/^ b37:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
b37	grep.asm	/^     b37:	c3                   	ret    $/;"	l
b37	kill.asm	/^ b37:	e8 31 ff ff ff       	call   a6d <putc>$/;"	l
b37	ln.asm	/^ b37:	01 d0                	add    %edx,%eax$/;"	l
b38	cs550_user.asm	/^     b38:	b8 2e 0b 00 00       	mov    $0xb2e,%eax$/;"	l
b38	grep.asm	/^     b38:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b38	ls.asm	/^     b38:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b38	mkdir.asm	/^ b38:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
b38	rm.asm	/^ b38:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
b38	stressfs.asm	/^     b38:	cd 42                	int    $0x42$/;"	l
b39	echo.asm	/^ b39:	89 04 24             	mov    %eax,(%esp)$/;"	l
b39	ln.asm	/^ b39:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b39	ls.asm	/^     b39:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b39	zombie.asm	/^ b39:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
b3a	cat.asm	/^ b3a:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b3a	ls.asm	/^     b3a:	32 30                	xor    (%eax),%dh$/;"	l
b3a	stressfs.asm	/^     b3a:	c3                   	ret    $/;"	l
b3a	wc.asm	/^     b3a:	cd 42                	int    $0x42$/;"	l
b3b	init.asm	/^ b3b:	c9                   	leave  $/;"	l
b3b	mkdir.asm	/^ b3b:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
b3b	rm.asm	/^ b3b:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
b3b	sh.asm	/^     b3b:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
b3b	stressfs.asm	/^     b3b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b3c	echo.asm	/^ b3c:	e8 31 ff ff ff       	call   a72 <putc>$/;"	l
b3c	init.asm	/^ b3c:	c3                   	ret    $/;"	l
b3c	kill.asm	/^ b3c:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
b3c	ln.asm	/^ b3c:	0f be c0             	movsbl %al,%eax$/;"	l
b3c	wc.asm	/^     b3c:	c3                   	ret    $/;"	l
b3d	cs550_user.asm	/^     b3d:	cd 42                	int    $0x42$/;"	l
b3d	grep.asm	/^     b3d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b3d	init.asm	/^ b3d:	55                   	push   %ebp$/;"	l
b3d	ls.asm	/^     b3d:	b8 33 0b 00 00       	mov    $0xb33,%eax$/;"	l
b3d	wc.asm	/^     b3d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b3e	cat.asm	/^ b3e:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b3e	grep.asm	/^     b3e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b3e	init.asm	/^ b3e:	89 e5                	mov    %esp,%ebp$/;"	l
b3e	mkdir.asm	/^ b3e:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
b3e	rm.asm	/^ b3e:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
b3e	sh.asm	/^     b3e:	e9 8f 00 00 00       	jmp    bd2 <parseexec+0x100>$/;"	l
b3e	zombie.asm	/^ b3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
b3f	cs550_user.asm	/^     b3f:	c3                   	ret    $/;"	l
b3f	grep.asm	/^     b3f:	32 30                	xor    (%eax),%dh$/;"	l
b3f	ln.asm	/^ b3f:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b4	cat.asm	/^  b4:	89 44 24 18          	mov    %eax,0x18(%esp)$/;"	l
b4	grep.asm	/^      b4:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b4	init.asm	/^  b4:	00 $/;"	l
b4	ln.asm	/^  b4:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
b4	ls.asm	/^      b4:	56                   	push   %esi$/;"	l
b4	mkdir.asm	/^  b4:	55                   	push   %ebp$/;"	l
b4	rm.asm	/^  b4:	55                   	push   %ebp$/;"	l
b40	cs550_user.asm	/^     b40:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b40	init.asm	/^ b40:	56                   	push   %esi$/;"	l
b40	kill.asm	/^ b40:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
b40	stressfs.asm	/^     b40:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b41	cat.asm	/^ b41:	89 04 24             	mov    %eax,(%esp)$/;"	l
b41	echo.asm	/^ b41:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
b41	init.asm	/^ b41:	53                   	push   %ebx$/;"	l
b41	stressfs.asm	/^     b41:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b41	zombie.asm	/^ b41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b42	grep.asm	/^     b42:	b8 38 0b 00 00       	mov    $0xb38,%eax$/;"	l
b42	init.asm	/^ b42:	83 ec 30             	sub    $0x30,%esp$/;"	l
b42	ls.asm	/^     b42:	cd 42                	int    $0x42$/;"	l
b42	stressfs.asm	/^     b42:	34 34                	xor    $0x34,%al$/;"	l
b42	wc.asm	/^     b42:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b43	ln.asm	/^ b43:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b43	mkdir.asm	/^ b43:	eb 1f                	jmp    b64 <printint+0xa7>$/;"	l
b43	rm.asm	/^ b43:	eb 1f                	jmp    b64 <printint+0xa7>$/;"	l
b43	sh.asm	/^     b43:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
b43	wc.asm	/^     b43:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b44	cat.asm	/^ b44:	e8 5c f8 ff ff       	call   3a5 <write>$/;"	l
b44	kill.asm	/^ b44:	79 d9                	jns    b1f <printint+0x8a>$/;"	l
b44	ls.asm	/^     b44:	c3                   	ret    $/;"	l
b44	wc.asm	/^     b44:	34 32                	xor    $0x32,%al$/;"	l
b45	cs550_user.asm	/^     b45:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b45	echo.asm	/^ b45:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
b45	init.asm	/^ b45:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
b45	ls.asm	/^     b45:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b45	mkdir.asm	/^ b45:	eb 1d                	jmp    b64 <printint+0xa7>$/;"	l
b45	rm.asm	/^ b45:	eb 1d                	jmp    b64 <printint+0xa7>$/;"	l
b45	stressfs.asm	/^     b45:	b8 3b 0b 00 00       	mov    $0xb3b,%eax$/;"	l
b45	zombie.asm	/^ b45:	75 2c                	jne    b73 <printf+0x6a>$/;"	l
b46	cs550_user.asm	/^     b46:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b46	kill.asm	/^ b46:	83 c4 30             	add    $0x30,%esp$/;"	l
b46	ln.asm	/^ b46:	89 04 24             	mov    %eax,(%esp)$/;"	l
b46	sh.asm	/^     b46:	89 44 24 0c          	mov    %eax,0xc(%esp)$/;"	l
b47	cs550_user.asm	/^     b47:	32 38                	xor    (%eax),%bh$/;"	l
b47	grep.asm	/^     b47:	cd 42                	int    $0x42$/;"	l
b47	mkdir.asm	/^ b47:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
b47	rm.asm	/^ b47:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
b47	wc.asm	/^     b47:	b8 3d 0b 00 00       	mov    $0xb3d,%eax$/;"	l
b47	zombie.asm	/^ b47:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
b49	cat.asm	/^ b49:	c9                   	leave  $/;"	l
b49	echo.asm	/^ b49:	79 d9                	jns    b24 <printint+0x8a>$/;"	l
b49	grep.asm	/^     b49:	c3                   	ret    $/;"	l
b49	kill.asm	/^ b49:	5b                   	pop    %ebx$/;"	l
b49	ln.asm	/^ b49:	e8 31 ff ff ff       	call   a7f <putc>$/;"	l
b4a	cat.asm	/^ b4a:	c3                   	ret    $/;"	l
b4a	cs550_user.asm	/^     b4a:	b8 40 0b 00 00       	mov    $0xb40,%eax$/;"	l
b4a	grep.asm	/^     b4a:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b4a	kill.asm	/^ b4a:	5e                   	pop    %esi$/;"	l
b4a	ls.asm	/^     b4a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b4a	mkdir.asm	/^ b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b4a	rm.asm	/^ b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b4a	sh.asm	/^     b4a:	8d 45 e4             	lea    -0x1c(%ebp),%eax$/;"	l
b4a	stressfs.asm	/^     b4a:	cd 42                	int    $0x42$/;"	l
b4b	cat.asm	/^ b4b:	55                   	push   %ebp$/;"	l
b4b	echo.asm	/^ b4b:	83 c4 30             	add    $0x30,%esp$/;"	l
b4b	kill.asm	/^ b4b:	5d                   	pop    %ebp$/;"	l
b4b	ls.asm	/^     b4b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b4b	zombie.asm	/^ b4b:	75 0c                	jne    b59 <printf+0x50>$/;"	l
b4c	cat.asm	/^ b4c:	89 e5                	mov    %esp,%ebp$/;"	l
b4c	init.asm	/^ b4c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
b4c	kill.asm	/^ b4c:	c3                   	ret    $/;"	l
b4c	ls.asm	/^     b4c:	32 31                	xor    (%ecx),%dh$/;"	l
b4c	stressfs.asm	/^     b4c:	c3                   	ret    $/;"	l
b4c	wc.asm	/^     b4c:	cd 42                	int    $0x42$/;"	l
b4d	kill.asm	/^ b4d:	55                   	push   %ebp$/;"	l
b4d	mkdir.asm	/^ b4d:	01 d0                	add    %edx,%eax$/;"	l
b4d	rm.asm	/^ b4d:	01 d0                	add    %edx,%eax$/;"	l
b4d	sh.asm	/^     b4d:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b4d	stressfs.asm	/^     b4d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b4d	zombie.asm	/^ b4d:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
b4e	cat.asm	/^ b4e:	56                   	push   %esi$/;"	l
b4e	echo.asm	/^ b4e:	5b                   	pop    %ebx$/;"	l
b4e	kill.asm	/^ b4e:	89 e5                	mov    %esp,%ebp$/;"	l
b4e	ln.asm	/^ b4e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
b4e	wc.asm	/^     b4e:	c3                   	ret    $/;"	l
b4f	cat.asm	/^ b4f:	53                   	push   %ebx$/;"	l
b4f	cs550_user.asm	/^     b4f:	cd 42                	int    $0x42$/;"	l
b4f	echo.asm	/^ b4f:	5e                   	pop    %esi$/;"	l
b4f	grep.asm	/^     b4f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b4f	ls.asm	/^     b4f:	b8 45 0b 00 00       	mov    $0xb45,%eax$/;"	l
b4f	mkdir.asm	/^ b4f:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b4f	rm.asm	/^ b4f:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b4f	wc.asm	/^     b4f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b5	cs550_user.asm	/^      b5:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
b5	echo.asm	/^  b5:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b5	init.asm	/^  b5:	c7 04 24 c1 0f 00 00 	movl   $0xfc1,(%esp)$/;"	l
b5	kill.asm	/^  b5:	75 e2                	jne    99 <strcpy+0xd>$/;"	l
b5	ls.asm	/^      b5:	53                   	push   %ebx$/;"	l
b5	mkdir.asm	/^  b5:	89 e5                	mov    %esp,%ebp$/;"	l
b5	rm.asm	/^  b5:	89 e5                	mov    %esp,%ebp$/;"	l
b5	zombie.asm	/^  b5:	5d                   	pop    %ebp$/;"	l
b50	cat.asm	/^ b50:	83 ec 30             	sub    $0x30,%esp$/;"	l
b50	echo.asm	/^ b50:	5d                   	pop    %ebp$/;"	l
b50	grep.asm	/^     b50:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b50	init.asm	/^ b50:	74 17                	je     b69 <printint+0x2c>$/;"	l
b50	kill.asm	/^ b50:	83 ec 38             	sub    $0x38,%esp$/;"	l
b51	cs550_user.asm	/^     b51:	c3                   	ret    $/;"	l
b51	echo.asm	/^ b51:	c3                   	ret    $/;"	l
b51	grep.asm	/^     b51:	32 31                	xor    (%ecx),%dh$/;"	l
b51	sh.asm	/^     b51:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b52	cs550_user.asm	/^     b52:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b52	echo.asm	/^ b52:	55                   	push   %ebp$/;"	l
b52	init.asm	/^ b52:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
b52	ln.asm	/^ b52:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
b52	mkdir.asm	/^ b52:	0f be c0             	movsbl %al,%eax$/;"	l
b52	rm.asm	/^ b52:	0f be c0             	movsbl %al,%eax$/;"	l
b52	stressfs.asm	/^     b52:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b53	cat.asm	/^ b53:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
b53	echo.asm	/^ b53:	89 e5                	mov    %esp,%ebp$/;"	l
b53	kill.asm	/^ b53:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
b53	stressfs.asm	/^     b53:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b54	grep.asm	/^     b54:	b8 4a 0b 00 00       	mov    $0xb4a,%eax$/;"	l
b54	ls.asm	/^     b54:	cd 42                	int    $0x42$/;"	l
b54	sh.asm	/^     b54:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b54	stressfs.asm	/^     b54:	34 35                	xor    $0x35,%al$/;"	l
b54	wc.asm	/^     b54:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b54	zombie.asm	/^ b54:	e9 4a 01 00 00       	jmp    ca3 <printf+0x19a>$/;"	l
b55	echo.asm	/^ b55:	83 ec 38             	sub    $0x38,%esp$/;"	l
b55	mkdir.asm	/^ b55:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b55	rm.asm	/^ b55:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b55	wc.asm	/^     b55:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b56	init.asm	/^ b56:	79 11                	jns    b69 <printint+0x2c>$/;"	l
b56	ln.asm	/^ b56:	79 d9                	jns    b31 <printint+0x8a>$/;"	l
b56	ls.asm	/^     b56:	c3                   	ret    $/;"	l
b56	wc.asm	/^     b56:	34 33                	xor    $0x33,%al$/;"	l
b57	cs550_user.asm	/^     b57:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b57	ls.asm	/^     b57:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b57	stressfs.asm	/^     b57:	b8 4d 0b 00 00       	mov    $0xb4d,%eax$/;"	l
b58	cs550_user.asm	/^     b58:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b58	echo.asm	/^ b58:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
b58	init.asm	/^ b58:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
b58	ln.asm	/^ b58:	83 c4 30             	add    $0x30,%esp$/;"	l
b58	sh.asm	/^     b58:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b59	cs550_user.asm	/^     b59:	32 39                	xor    (%ecx),%bh$/;"	l
b59	grep.asm	/^     b59:	cd 42                	int    $0x42$/;"	l
b59	mkdir.asm	/^ b59:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b59	rm.asm	/^ b59:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b59	wc.asm	/^     b59:	b8 4f 0b 00 00       	mov    $0xb4f,%eax$/;"	l
b59	zombie.asm	/^ b59:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
b5a	cat.asm	/^ b5a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
b5a	kill.asm	/^ b5a:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
b5b	grep.asm	/^     b5b:	c3                   	ret    $/;"	l
b5b	ln.asm	/^ b5b:	5b                   	pop    %ebx$/;"	l
b5b	sh.asm	/^     b5b:	89 04 24             	mov    %eax,(%esp)$/;"	l
b5c	cs550_user.asm	/^     b5c:	b8 52 0b 00 00       	mov    $0xb52,%eax$/;"	l
b5c	grep.asm	/^     b5c:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b5c	ln.asm	/^ b5c:	5e                   	pop    %esi$/;"	l
b5c	ls.asm	/^     b5c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b5c	mkdir.asm	/^ b5c:	89 04 24             	mov    %eax,(%esp)$/;"	l
b5c	rm.asm	/^ b5c:	89 04 24             	mov    %eax,(%esp)$/;"	l
b5c	stressfs.asm	/^     b5c:	cd 42                	int    $0x42$/;"	l
b5c	zombie.asm	/^ b5c:	0f be c0             	movsbl %al,%eax$/;"	l
b5d	kill.asm	/^ b5d:	83 c0 04             	add    $0x4,%eax$/;"	l
b5d	ln.asm	/^ b5d:	5d                   	pop    %ebp$/;"	l
b5d	ls.asm	/^     b5d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b5e	cat.asm	/^ b5e:	74 17                	je     b77 <printint+0x2c>$/;"	l
b5e	ln.asm	/^ b5e:	c3                   	ret    $/;"	l
b5e	ls.asm	/^     b5e:	32 32                	xor    (%edx),%dh$/;"	l
b5e	sh.asm	/^     b5e:	e8 cf f9 ff ff       	call   532 <gettoken>$/;"	l
b5e	stressfs.asm	/^     b5e:	c3                   	ret    $/;"	l
b5e	wc.asm	/^     b5e:	cd 42                	int    $0x42$/;"	l
b5f	echo.asm	/^ b5f:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
b5f	init.asm	/^ b5f:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b5f	ln.asm	/^ b5f:	55                   	push   %ebp$/;"	l
b5f	mkdir.asm	/^ b5f:	e8 31 ff ff ff       	call   a95 <putc>$/;"	l
b5f	rm.asm	/^ b5f:	e8 31 ff ff ff       	call   a95 <putc>$/;"	l
b5f	stressfs.asm	/^     b5f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b5f	zombie.asm	/^ b5f:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b6	ls.asm	/^      b6:	81 ec 5c 02 00 00    	sub    $0x25c,%esp$/;"	l
b6	sh.asm	/^      b6:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b6	stressfs.asm	/^      b6:	01 d0                	add    %edx,%eax$/;"	l
b6	wc.asm	/^      b6:	79 19                	jns    d1 <wc+0xd1>$/;"	l
b6	zombie.asm	/^  b6:	c3                   	ret    $/;"	l
b60	cat.asm	/^ b60:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
b60	kill.asm	/^ b60:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
b60	ln.asm	/^ b60:	89 e5                	mov    %esp,%ebp$/;"	l
b60	wc.asm	/^     b60:	c3                   	ret    $/;"	l
b61	cs550_user.asm	/^     b61:	cd 42                	int    $0x42$/;"	l
b61	grep.asm	/^     b61:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b61	ls.asm	/^     b61:	b8 57 0b 00 00       	mov    $0xb57,%eax$/;"	l
b61	wc.asm	/^     b61:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b62	echo.asm	/^ b62:	83 c0 04             	add    $0x4,%eax$/;"	l
b62	grep.asm	/^     b62:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b62	init.asm	/^ b62:	f7 d8                	neg    %eax$/;"	l
b62	ln.asm	/^ b62:	83 ec 38             	sub    $0x38,%esp$/;"	l
b63	cs550_user.asm	/^     b63:	c3                   	ret    $/;"	l
b63	grep.asm	/^     b63:	32 32                	xor    (%edx),%dh$/;"	l
b63	kill.asm	/^ b63:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
b63	sh.asm	/^     b63:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
b63	zombie.asm	/^ b63:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b64	cat.asm	/^ b64:	79 11                	jns    b77 <printint+0x2c>$/;"	l
b64	cs550_user.asm	/^     b64:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b64	init.asm	/^ b64:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b64	mkdir.asm	/^ b64:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
b64	rm.asm	/^ b64:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
b64	stressfs.asm	/^     b64:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b65	echo.asm	/^ b65:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
b65	ln.asm	/^ b65:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
b65	stressfs.asm	/^     b65:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b66	cat.asm	/^ b66:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
b66	grep.asm	/^     b66:	b8 5c 0b 00 00       	mov    $0xb5c,%eax$/;"	l
b66	ls.asm	/^     b66:	cd 42                	int    $0x42$/;"	l
b66	sh.asm	/^     b66:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
b66	stressfs.asm	/^     b66:	34 36                	xor    $0x36,%al$/;"	l
b66	wc.asm	/^     b66:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b66	zombie.asm	/^ b66:	89 04 24             	mov    %eax,(%esp)$/;"	l
b67	init.asm	/^ b67:	eb 06                	jmp    b6f <printint+0x32>$/;"	l
b67	wc.asm	/^     b67:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b68	echo.asm	/^ b68:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
b68	ls.asm	/^     b68:	c3                   	ret    $/;"	l
b68	mkdir.asm	/^ b68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
b68	rm.asm	/^ b68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
b68	wc.asm	/^     b68:	34 34                	xor    $0x34,%al$/;"	l
b69	cs550_user.asm	/^     b69:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b69	init.asm	/^ b69:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b69	ls.asm	/^     b69:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b69	stressfs.asm	/^     b69:	b8 5f 0b 00 00       	mov    $0xb5f,%eax$/;"	l
b69	zombie.asm	/^ b69:	e8 bb fe ff ff       	call   a29 <putc>$/;"	l
b6a	cs550_user.asm	/^     b6a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b6a	kill.asm	/^ b6a:	e9 7c 01 00 00       	jmp    ceb <printf+0x19e>$/;"	l
b6a	sh.asm	/^     b6a:	75 05                	jne    b71 <parseexec+0x9f>$/;"	l
b6b	cs550_user.asm	/^     b6b:	33 30                	xor    (%eax),%esi$/;"	l
b6b	grep.asm	/^     b6b:	cd 42                	int    $0x42$/;"	l
b6b	wc.asm	/^     b6b:	b8 61 0b 00 00       	mov    $0xb61,%eax$/;"	l
b6c	init.asm	/^ b6c:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b6c	ln.asm	/^ b6c:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
b6c	mkdir.asm	/^ b6c:	79 d9                	jns    b47 <printint+0x8a>$/;"	l
b6c	rm.asm	/^ b6c:	79 d9                	jns    b47 <printint+0x8a>$/;"	l
b6c	sh.asm	/^     b6c:	e9 83 00 00 00       	jmp    bf4 <parseexec+0x122>$/;"	l
b6d	cat.asm	/^ b6d:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b6d	grep.asm	/^     b6d:	c3                   	ret    $/;"	l
b6e	cs550_user.asm	/^     b6e:	b8 64 0b 00 00       	mov    $0xb64,%eax$/;"	l
b6e	grep.asm	/^     b6e:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b6e	ls.asm	/^     b6e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b6e	mkdir.asm	/^ b6e:	83 c4 30             	add    $0x30,%esp$/;"	l
b6e	rm.asm	/^ b6e:	83 c4 30             	add    $0x30,%esp$/;"	l
b6e	stressfs.asm	/^     b6e:	cd 42                	int    $0x42$/;"	l
b6e	zombie.asm	/^ b6e:	e9 30 01 00 00       	jmp    ca3 <printf+0x19a>$/;"	l
b6f	echo.asm	/^ b6f:	e9 7c 01 00 00       	jmp    cf0 <printf+0x19e>$/;"	l
b6f	init.asm	/^ b6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
b6f	kill.asm	/^ b6f:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
b6f	ln.asm	/^ b6f:	83 c0 04             	add    $0x4,%eax$/;"	l
b6f	ls.asm	/^     b6f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b7	grep.asm	/^      b7:	29 c2                	sub    %eax,%edx$/;"	l
b7	kill.asm	/^  b7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
b7	ln.asm	/^  b7:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
b7	mkdir.asm	/^  b7:	83 ec 10             	sub    $0x10,%esp$/;"	l
b7	rm.asm	/^  b7:	83 ec 10             	sub    $0x10,%esp$/;"	l
b7	zombie.asm	/^  b7:	55                   	push   %ebp$/;"	l
b70	cat.asm	/^ b70:	f7 d8                	neg    %eax$/;"	l
b70	ls.asm	/^     b70:	32 33                	xor    (%ebx),%dh$/;"	l
b70	stressfs.asm	/^     b70:	c3                   	ret    $/;"	l
b70	wc.asm	/^     b70:	cd 42                	int    $0x42$/;"	l
b71	mkdir.asm	/^ b71:	5b                   	pop    %ebx$/;"	l
b71	rm.asm	/^ b71:	5b                   	pop    %ebx$/;"	l
b71	sh.asm	/^     b71:	83 7d e8 61          	cmpl   $0x61,-0x18(%ebp)$/;"	l
b71	stressfs.asm	/^     b71:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b72	cat.asm	/^ b72:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b72	kill.asm	/^ b72:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b72	ln.asm	/^ b72:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
b72	mkdir.asm	/^ b72:	5e                   	pop    %esi$/;"	l
b72	rm.asm	/^ b72:	5e                   	pop    %esi$/;"	l
b72	wc.asm	/^     b72:	c3                   	ret    $/;"	l
b73	cs550_user.asm	/^     b73:	cd 42                	int    $0x42$/;"	l
b73	grep.asm	/^     b73:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b73	ls.asm	/^     b73:	b8 69 0b 00 00       	mov    $0xb69,%eax$/;"	l
b73	mkdir.asm	/^ b73:	5d                   	pop    %ebp$/;"	l
b73	rm.asm	/^ b73:	5d                   	pop    %ebp$/;"	l
b73	wc.asm	/^     b73:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b73	zombie.asm	/^ b73:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
b74	echo.asm	/^ b74:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
b74	grep.asm	/^     b74:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b74	mkdir.asm	/^ b74:	c3                   	ret    $/;"	l
b74	rm.asm	/^ b74:	c3                   	ret    $/;"	l
b75	cat.asm	/^ b75:	eb 06                	jmp    b7d <printint+0x32>$/;"	l
b75	cs550_user.asm	/^     b75:	c3                   	ret    $/;"	l
b75	grep.asm	/^     b75:	32 33                	xor    (%ebx),%dh$/;"	l
b75	kill.asm	/^ b75:	01 d0                	add    %edx,%eax$/;"	l
b75	ln.asm	/^ b75:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
b75	mkdir.asm	/^ b75:	55                   	push   %ebp$/;"	l
b75	rm.asm	/^ b75:	55                   	push   %ebp$/;"	l
b75	sh.asm	/^     b75:	74 0c                	je     b83 <parseexec+0xb1>$/;"	l
b76	cs550_user.asm	/^     b76:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b76	init.asm	/^ b76:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
b76	mkdir.asm	/^ b76:	89 e5                	mov    %esp,%ebp$/;"	l
b76	rm.asm	/^ b76:	89 e5                	mov    %esp,%ebp$/;"	l
b76	stressfs.asm	/^     b76:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b77	cat.asm	/^ b77:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b77	echo.asm	/^ b77:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b77	kill.asm	/^ b77:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b77	sh.asm	/^     b77:	c7 04 24 22 1c 00 00 	movl   $0x1c22,(%esp)$/;"	l
b77	stressfs.asm	/^     b77:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b77	zombie.asm	/^ b77:	0f 85 26 01 00 00    	jne    ca3 <printf+0x19a>$/;"	l
b78	grep.asm	/^     b78:	b8 6e 0b 00 00       	mov    $0xb6e,%eax$/;"	l
b78	ls.asm	/^     b78:	cd 42                	int    $0x42$/;"	l
b78	mkdir.asm	/^ b78:	83 ec 38             	sub    $0x38,%esp$/;"	l
b78	rm.asm	/^ b78:	83 ec 38             	sub    $0x38,%esp$/;"	l
b78	stressfs.asm	/^     b78:	34 37                	xor    $0x37,%al$/;"	l
b78	wc.asm	/^     b78:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b79	init.asm	/^ b79:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
b79	wc.asm	/^     b79:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b7a	cat.asm	/^ b7a:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b7a	echo.asm	/^ b7a:	01 d0                	add    %edx,%eax$/;"	l
b7a	kill.asm	/^ b7a:	0f be c0             	movsbl %al,%eax$/;"	l
b7a	ls.asm	/^     b7a:	c3                   	ret    $/;"	l
b7a	wc.asm	/^     b7a:	34 35                	xor    $0x35,%al$/;"	l
b7b	cs550_user.asm	/^     b7b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b7b	ls.asm	/^     b7b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b7b	mkdir.asm	/^ b7b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
b7b	rm.asm	/^ b7b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
b7b	stressfs.asm	/^     b7b:	b8 71 0b 00 00       	mov    $0xb71,%eax$/;"	l
b7c	cs550_user.asm	/^     b7c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b7c	echo.asm	/^ b7c:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b7c	init.asm	/^ b7c:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
b7c	ln.asm	/^ b7c:	e9 7c 01 00 00       	jmp    cfd <printf+0x19e>$/;"	l
b7d	cat.asm	/^ b7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
b7d	cs550_user.asm	/^     b7d:	33 31                	xor    (%ecx),%esi$/;"	l
b7d	grep.asm	/^     b7d:	cd 42                	int    $0x42$/;"	l
b7d	kill.asm	/^ b7d:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
b7d	wc.asm	/^     b7d:	b8 73 0b 00 00       	mov    $0xb73,%eax$/;"	l
b7d	zombie.asm	/^ b7d:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
b7e	sh.asm	/^     b7e:	e8 d4 f7 ff ff       	call   357 <panic>$/;"	l
b7f	echo.asm	/^ b7f:	0f be c0             	movsbl %al,%eax$/;"	l
b7f	grep.asm	/^     b7f:	c3                   	ret    $/;"	l
b7f	init.asm	/^ b7f:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
b8	cat.asm	/^  b8:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)$/;"	l
b8	cs550_user.asm	/^      b8:	89 d1                	mov    %edx,%ecx$/;"	l
b8	echo.asm	/^  b8:	84 c0                	test   %al,%al$/;"	l
b8	forktest.asm	/^  b8:	e8 43 ff ff ff       	call   0 <printf>$/;"	l
b8	stressfs.asm	/^      b8:	88 84 24 26 02 00 00 	mov    %al,0x226(%esp)$/;"	l
b8	wc.asm	/^      b8:	c7 44 24 04 91 10 00 	movl   $0x1091,0x4(%esp)$/;"	l
b8	zombie.asm	/^  b8:	89 e5                	mov    %esp,%ebp$/;"	l
b80	cs550_user.asm	/^     b80:	b8 76 0b 00 00       	mov    $0xb76,%eax$/;"	l
b80	grep.asm	/^     b80:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b80	ls.asm	/^     b80:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b80	stressfs.asm	/^     b80:	cd 42                	int    $0x42$/;"	l
b81	ln.asm	/^ b81:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
b81	ls.asm	/^     b81:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b81	zombie.asm	/^ b81:	75 2d                	jne    bb0 <printf+0xa7>$/;"	l
b82	echo.asm	/^ b82:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
b82	init.asm	/^ b82:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b82	kill.asm	/^ b82:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
b82	ls.asm	/^     b82:	32 34 00             	xor    (%eax,%eax,1),%dh$/;"	l
b82	mkdir.asm	/^ b82:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
b82	rm.asm	/^ b82:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
b82	stressfs.asm	/^     b82:	c3                   	ret    $/;"	l
b82	wc.asm	/^     b82:	cd 42                	int    $0x42$/;"	l
b83	sh.asm	/^     b83:	8b 4d e4             	mov    -0x1c(%ebp),%ecx$/;"	l
b83	stressfs.asm	/^     b83:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b83	zombie.asm	/^ b83:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
b84	cat.asm	/^ b84:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
b84	ln.asm	/^ b84:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b84	wc.asm	/^     b84:	c3                   	ret    $/;"	l
b85	cs550_user.asm	/^     b85:	cd 42                	int    $0x42$/;"	l
b85	grep.asm	/^     b85:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b85	init.asm	/^ b85:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b85	kill.asm	/^ b85:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b85	ls.asm	/^     b85:	b8 7b 0b 00 00       	mov    $0xb7b,%eax$/;"	l
b85	mkdir.asm	/^ b85:	83 c0 04             	add    $0x4,%eax$/;"	l
b85	rm.asm	/^ b85:	83 c0 04             	add    $0x4,%eax$/;"	l
b85	wc.asm	/^     b85:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b86	grep.asm	/^     b86:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b86	sh.asm	/^     b86:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b86	zombie.asm	/^ b86:	8b 00                	mov    (%eax),%eax$/;"	l
b87	cat.asm	/^ b87:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
b87	cs550_user.asm	/^     b87:	c3                   	ret    $/;"	l
b87	echo.asm	/^ b87:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
b87	grep.asm	/^     b87:	32 34 00             	xor    (%eax,%eax,1),%dh$/;"	l
b87	ln.asm	/^ b87:	01 d0                	add    %edx,%eax$/;"	l
b88	cs550_user.asm	/^     b88:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b88	mkdir.asm	/^ b88:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
b88	rm.asm	/^ b88:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
b88	stressfs.asm	/^     b88:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b88	zombie.asm	/^ b88:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
b89	kill.asm	/^ b89:	75 2c                	jne    bb7 <printf+0x6a>$/;"	l
b89	ln.asm	/^ b89:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b89	sh.asm	/^     b89:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
b89	stressfs.asm	/^     b89:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b8a	cat.asm	/^ b8a:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
b8a	echo.asm	/^ b8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b8a	grep.asm	/^     b8a:	b8 80 0b 00 00       	mov    $0xb80,%eax$/;"	l
b8a	init.asm	/^ b8a:	f7 f3                	div    %ebx$/;"	l
b8a	ls.asm	/^     b8a:	cd 42                	int    $0x42$/;"	l
b8a	stressfs.asm	/^     b8a:	34 38                	xor    $0x38,%al$/;"	l
b8a	wc.asm	/^     b8a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b8b	kill.asm	/^ b8b:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
b8b	mkdir.asm	/^ b8b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
b8b	rm.asm	/^ b8b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
b8b	wc.asm	/^     b8b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b8c	init.asm	/^ b8c:	89 d0                	mov    %edx,%eax$/;"	l
b8c	ln.asm	/^ b8c:	0f be c0             	movsbl %al,%eax$/;"	l
b8c	ls.asm	/^     b8c:	c3                   	ret    $/;"	l
b8c	sh.asm	/^     b8c:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)$/;"	l
b8c	wc.asm	/^     b8c:	34 36                	xor    $0x36,%al$/;"	l
b8d	cat.asm	/^ b8d:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
b8d	cs550_user.asm	/^     b8d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b8d	ls.asm	/^     b8d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b8d	stressfs.asm	/^     b8d:	b8 83 0b 00 00       	mov    $0xb83,%eax$/;"	l
b8e	cs550_user.asm	/^     b8e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b8e	echo.asm	/^ b8e:	75 2c                	jne    bbc <printf+0x6a>$/;"	l
b8e	init.asm	/^ b8e:	0f b6 80 64 12 00 00 	movzbl 0x1264(%eax),%eax$/;"	l
b8f	cs550_user.asm	/^     b8f:	33 32                	xor    (%edx),%esi$/;"	l
b8f	grep.asm	/^     b8f:	cd 42                	int    $0x42$/;"	l
b8f	kill.asm	/^ b8f:	75 0c                	jne    b9d <printf+0x50>$/;"	l
b8f	ln.asm	/^ b8f:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
b8f	wc.asm	/^     b8f:	b8 85 0b 00 00       	mov    $0xb85,%eax$/;"	l
b8f	zombie.asm	/^ b8f:	00 $/;"	l
b9	grep.asm	/^      b9:	89 d0                	mov    %edx,%eax$/;"	l
b90	cat.asm	/^ b90:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b90	echo.asm	/^ b90:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
b90	sh.asm	/^     b90:	8b 55 e0             	mov    -0x20(%ebp),%edx$/;"	l
b90	zombie.asm	/^ b90:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
b91	grep.asm	/^     b91:	c3                   	ret    $/;"	l
b91	kill.asm	/^ b91:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
b92	cs550_user.asm	/^     b92:	b8 88 0b 00 00       	mov    $0xb88,%eax$/;"	l
b92	grep.asm	/^     b92:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b92	ls.asm	/^     b92:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b92	mkdir.asm	/^ b92:	e9 7c 01 00 00       	jmp    d13 <printf+0x19e>$/;"	l
b92	rm.asm	/^ b92:	e9 7c 01 00 00       	jmp    d13 <printf+0x19e>$/;"	l
b92	stressfs.asm	/^     b92:	cd 42                	int    $0x42$/;"	l
b93	cat.asm	/^ b93:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b93	ls.asm	/^     b93:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b93	sh.asm	/^     b93:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b94	echo.asm	/^ b94:	75 0c                	jne    ba2 <printf+0x50>$/;"	l
b94	ln.asm	/^ b94:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
b94	ls.asm	/^     b94:	32 35 00 b8 8d 0b    	xor    0xb8db800,%dh$/;"	l
b94	stressfs.asm	/^     b94:	c3                   	ret    $/;"	l
b94	wc.asm	/^     b94:	cd 42                	int    $0x42$/;"	l
b95	init.asm	/^ b95:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
b95	stressfs.asm	/^     b95:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b96	echo.asm	/^ b96:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
b96	sh.asm	/^     b96:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
b96	wc.asm	/^     b96:	c3                   	ret    $/;"	l
b97	cs550_user.asm	/^     b97:	cd 42                	int    $0x42$/;"	l
b97	grep.asm	/^     b97:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b97	ln.asm	/^ b97:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b97	ls.asm	/^     b97:	b8 8d 0b 00 00       	mov    $0xb8d,%eax$/;"	l
b97	mkdir.asm	/^ b97:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
b97	rm.asm	/^ b97:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
b97	wc.asm	/^     b97:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b97	zombie.asm	/^ b97:	00 $/;"	l
b98	cat.asm	/^ b98:	f7 f3                	div    %ebx$/;"	l
b98	grep.asm	/^     b98:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b98	kill.asm	/^ b98:	e9 4a 01 00 00       	jmp    ce7 <printf+0x19a>$/;"	l
b98	zombie.asm	/^ b98:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b99	cs550_user.asm	/^     b99:	c3                   	ret    $/;"	l
b99	grep.asm	/^     b99:	32 35 00 b8 92 0b    	xor    0xb92b800,%dh$/;"	l
b99	init.asm	/^ b99:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
b99	sh.asm	/^     b99:	83 c1 08             	add    $0x8,%ecx$/;"	l
b9a	cat.asm	/^ b9a:	89 d0                	mov    %edx,%eax$/;"	l
b9a	cs550_user.asm	/^     b9a:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b9a	mkdir.asm	/^ b9a:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b9a	rm.asm	/^ b9a:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b9a	stressfs.asm	/^     b9a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b9b	ln.asm	/^ b9b:	75 2c                	jne    bc9 <printf+0x6a>$/;"	l
b9b	stressfs.asm	/^     b9b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b9c	cat.asm	/^ b9c:	0f b6 80 60 12 00 00 	movzbl 0x1260(%eax),%eax$/;"	l
b9c	grep.asm	/^     b9c:	b8 92 0b 00 00       	mov    $0xb92,%eax$/;"	l
b9c	init.asm	/^ b9c:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b9c	ls.asm	/^     b9c:	cd 42                	int    $0x42$/;"	l
b9c	sh.asm	/^     b9c:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)$/;"	l
b9c	stressfs.asm	/^     b9c:	34 39                	xor    $0x39,%al$/;"	l
b9c	wc.asm	/^     b9c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b9c	zombie.asm	/^ b9c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b9d	echo.asm	/^ b9d:	e9 4a 01 00 00       	jmp    cec <printf+0x19a>$/;"	l
b9d	kill.asm	/^ b9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
b9d	ln.asm	/^ b9d:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
b9d	mkdir.asm	/^ b9d:	01 d0                	add    %edx,%eax$/;"	l
b9d	rm.asm	/^ b9d:	01 d0                	add    %edx,%eax$/;"	l
b9d	wc.asm	/^     b9d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b9e	ls.asm	/^     b9e:	c3                   	ret    $/;"	l
b9e	wc.asm	/^     b9e:	34 37                	xor    $0x37,%al$/;"	l
b9f	cs550_user.asm	/^     b9f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
b9f	init.asm	/^ b9f:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b9f	ls.asm	/^     b9f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
b9f	mkdir.asm	/^ b9f:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b9f	rm.asm	/^ b9f:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b9f	stressfs.asm	/^     b9f:	b8 95 0b 00 00       	mov    $0xb95,%eax$/;"	l
b9f	zombie.asm	/^ b9f:	89 04 24             	mov    %eax,(%esp)$/;"	l
ba	cs550_user.asm	/^      ba:	29 c1                	sub    %eax,%ecx$/;"	l
ba	echo.asm	/^  ba:	75 e2                	jne    9e <strcpy+0xd>$/;"	l
ba	kill.asm	/^  ba:	c9                   	leave  $/;"	l
ba	ln.asm	/^  ba:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
ba	mkdir.asm	/^  ba:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ba	rm.asm	/^  ba:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ba	sh.asm	/^      ba:	c7 44 24 04 c3 1b 00 	movl   $0x1bc3,0x4(%esp)$/;"	l
ba	zombie.asm	/^  ba:	83 ec 10             	sub    $0x10,%esp$/;"	l
ba0	cs550_user.asm	/^     ba0:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ba0	kill.asm	/^ ba0:	0f be c0             	movsbl %al,%eax$/;"	l
ba0	sh.asm	/^     ba0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
ba1	cs550_user.asm	/^     ba1:	33 33                	xor    (%ebx),%esi$/;"	l
ba1	grep.asm	/^     ba1:	cd 42                	int    $0x42$/;"	l
ba1	ln.asm	/^ ba1:	75 0c                	jne    baf <printf+0x50>$/;"	l
ba1	wc.asm	/^     ba1:	b8 97 0b 00 00       	mov    $0xb97,%eax$/;"	l
ba2	echo.asm	/^ ba2:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
ba2	mkdir.asm	/^ ba2:	0f be c0             	movsbl %al,%eax$/;"	l
ba2	rm.asm	/^ ba2:	0f be c0             	movsbl %al,%eax$/;"	l
ba2	zombie.asm	/^ ba2:	e8 aa fe ff ff       	call   a51 <printint>$/;"	l
ba3	cat.asm	/^ ba3:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
ba3	grep.asm	/^     ba3:	c3                   	ret    $/;"	l
ba3	kill.asm	/^ ba3:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ba3	ln.asm	/^ ba3:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
ba4	cs550_user.asm	/^     ba4:	b8 9a 0b 00 00       	mov    $0xb9a,%eax$/;"	l
ba4	grep.asm	/^     ba4:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ba4	init.asm	/^ ba4:	f7 f6                	div    %esi$/;"	l
ba4	ls.asm	/^     ba4:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ba4	sh.asm	/^     ba4:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
ba4	stressfs.asm	/^     ba4:	cd 42                	int    $0x42$/;"	l
ba5	echo.asm	/^ ba5:	0f be c0             	movsbl %al,%eax$/;"	l
ba5	ls.asm	/^     ba5:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ba5	mkdir.asm	/^ ba5:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
ba5	rm.asm	/^ ba5:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
ba6	init.asm	/^ ba6:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ba6	ls.asm	/^     ba6:	32 36                	xor    (%esi),%dh$/;"	l
ba6	stressfs.asm	/^     ba6:	c3                   	ret    $/;"	l
ba6	wc.asm	/^     ba6:	cd 42                	int    $0x42$/;"	l
ba7	cat.asm	/^ ba7:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
ba7	kill.asm	/^ ba7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ba7	stressfs.asm	/^     ba7:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ba7	zombie.asm	/^ ba7:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
ba8	echo.asm	/^ ba8:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ba8	sh.asm	/^     ba8:	7e 0c                	jle    bb6 <parseexec+0xe4>$/;"	l
ba8	wc.asm	/^     ba8:	c3                   	ret    $/;"	l
ba9	cs550_user.asm	/^     ba9:	cd 42                	int    $0x42$/;"	l
ba9	grep.asm	/^     ba9:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ba9	init.asm	/^ ba9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
ba9	ls.asm	/^     ba9:	b8 9f 0b 00 00       	mov    $0xb9f,%eax$/;"	l
ba9	wc.asm	/^     ba9:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
baa	cat.asm	/^ baa:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
baa	grep.asm	/^     baa:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
baa	kill.asm	/^ baa:	89 04 24             	mov    %eax,(%esp)$/;"	l
baa	ln.asm	/^ baa:	e9 4a 01 00 00       	jmp    cf9 <printf+0x19a>$/;"	l
baa	mkdir.asm	/^ baa:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
baa	rm.asm	/^ baa:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
baa	sh.asm	/^     baa:	c7 04 24 71 1c 00 00 	movl   $0x1c71,(%esp)$/;"	l
bab	cs550_user.asm	/^     bab:	c3                   	ret    $/;"	l
bab	grep.asm	/^     bab:	32 36                	xor    (%esi),%dh$/;"	l
bab	zombie.asm	/^ bab:	e9 ec 00 00 00       	jmp    c9c <printf+0x193>$/;"	l
bac	cs550_user.asm	/^     bac:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bac	echo.asm	/^ bac:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bac	stressfs.asm	/^     bac:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
backcmd	sh.s	/^backcmd:$/;"	l
bad	cat.asm	/^ bad:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
bad	init.asm	/^ bad:	75 c7                	jne    b76 <printint+0x39>$/;"	l
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bad	kill.asm	/^ bad:	e8 bb fe ff ff       	call   a6d <putc>$/;"	l
bad	mkdir.asm	/^ bad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
bad	rm.asm	/^ bad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
bad	stressfs.asm	/^     bad:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bae	grep.asm	/^     bae:	b8 a4 0b 00 00       	mov    $0xba4,%eax$/;"	l
bae	ls.asm	/^     bae:	cd 42                	int    $0x42$/;"	l
bae	stressfs.asm	/^     bae:	35 30 00 b8 a7       	xor    $0xa7b80030,%eax$/;"	l
bae	wc.asm	/^     bae:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
baf	echo.asm	/^ baf:	89 04 24             	mov    %eax,(%esp)$/;"	l
baf	init.asm	/^ baf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
baf	ln.asm	/^ baf:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
baf	wc.asm	/^     baf:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	fs.s	/^balloc:$/;"	l
balloc	mkfs.c	/^balloc(int used)$/;"	f
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
bb	grep.asm	/^      bb:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
bb	kill.asm	/^  bb:	c3                   	ret    $/;"	l
bb0	ls.asm	/^     bb0:	c3                   	ret    $/;"	l
bb0	wc.asm	/^     bb0:	34 38                	xor    $0x38,%al$/;"	l
bb0	zombie.asm	/^ bb0:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
bb1	cs550_user.asm	/^     bb1:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bb1	ls.asm	/^     bb1:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bb1	mkdir.asm	/^ bb1:	75 2c                	jne    bdf <printf+0x6a>$/;"	l
bb1	rm.asm	/^ bb1:	75 2c                	jne    bdf <printf+0x6a>$/;"	l
bb1	sh.asm	/^     bb1:	e8 a1 f7 ff ff       	call   357 <panic>$/;"	l
bb1	stressfs.asm	/^     bb1:	b8 a7 0b 00 00       	mov    $0xba7,%eax$/;"	l
bb2	cat.asm	/^ bb2:	f7 f6                	div    %esi$/;"	l
bb2	cs550_user.asm	/^     bb2:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bb2	echo.asm	/^ bb2:	e8 bb fe ff ff       	call   a72 <putc>$/;"	l
bb2	kill.asm	/^ bb2:	e9 30 01 00 00       	jmp    ce7 <printf+0x19a>$/;"	l
bb2	ln.asm	/^ bb2:	0f be c0             	movsbl %al,%eax$/;"	l
bb3	cs550_user.asm	/^     bb3:	33 34 00             	xor    (%eax,%eax,1),%esi$/;"	l
bb3	grep.asm	/^     bb3:	cd 42                	int    $0x42$/;"	l
bb3	init.asm	/^ bb3:	74 10                	je     bc5 <printint+0x88>$/;"	l
bb3	mkdir.asm	/^ bb3:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
bb3	rm.asm	/^ bb3:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
bb3	wc.asm	/^     bb3:	b8 a9 0b 00 00       	mov    $0xba9,%eax$/;"	l
bb4	cat.asm	/^ bb4:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
bb4	zombie.asm	/^ bb4:	74 06                	je     bbc <printf+0xb3>$/;"	l
bb5	grep.asm	/^     bb5:	c3                   	ret    $/;"	l
bb5	init.asm	/^ bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
bb5	ln.asm	/^ bb5:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bb6	cs550_user.asm	/^     bb6:	b8 ac 0b 00 00       	mov    $0xbac,%eax$/;"	l
bb6	grep.asm	/^     bb6:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bb6	ls.asm	/^     bb6:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bb6	sh.asm	/^     bb6:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
bb6	stressfs.asm	/^     bb6:	cd 42                	int    $0x42$/;"	l
bb6	zombie.asm	/^ bb6:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
bb7	cat.asm	/^ bb7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
bb7	echo.asm	/^ bb7:	e9 30 01 00 00       	jmp    cec <printf+0x19a>$/;"	l
bb7	kill.asm	/^ bb7:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
bb7	ls.asm	/^     bb7:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bb7	mkdir.asm	/^ bb7:	75 0c                	jne    bc5 <printf+0x50>$/;"	l
bb7	rm.asm	/^ bb7:	75 0c                	jne    bc5 <printf+0x50>$/;"	l
bb8	init.asm	/^ bb8:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
bb8	ls.asm	/^     bb8:	32 37                	xor    (%edi),%dh$/;"	l
bb8	stressfs.asm	/^     bb8:	c3                   	ret    $/;"	l
bb8	wc.asm	/^     bb8:	cd 42                	int    $0x42$/;"	l
bb9	ln.asm	/^ bb9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bb9	mkdir.asm	/^ bb9:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
bb9	rm.asm	/^ bb9:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
bb9	sh.asm	/^     bb9:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
bb9	stressfs.asm	/^     bb9:	55                   	push   %ebp$/;"	l
bba	stressfs.asm	/^     bba:	89 e5                	mov    %esp,%ebp$/;"	l
bba	wc.asm	/^     bba:	c3                   	ret    $/;"	l
bba	zombie.asm	/^ bba:	75 2d                	jne    be9 <printf+0xe0>$/;"	l
bbb	cat.asm	/^ bbb:	75 c7                	jne    b84 <printint+0x39>$/;"	l
bbb	cs550_user.asm	/^     bbb:	cd 42                	int    $0x42$/;"	l
bbb	grep.asm	/^     bbb:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bbb	init.asm	/^ bbb:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
bbb	kill.asm	/^ bbb:	0f 85 26 01 00 00    	jne    ce7 <printf+0x19a>$/;"	l
bbb	ls.asm	/^     bbb:	b8 b1 0b 00 00       	mov    $0xbb1,%eax$/;"	l
bbb	wc.asm	/^     bbb:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bbc	echo.asm	/^ bbc:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
bbc	grep.asm	/^     bbc:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bbc	ln.asm	/^ bbc:	89 04 24             	mov    %eax,(%esp)$/;"	l
bbc	stressfs.asm	/^     bbc:	83 ec 18             	sub    $0x18,%esp$/;"	l
bbc	zombie.asm	/^ bbc:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
bbd	cat.asm	/^ bbd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
bbd	cs550_user.asm	/^     bbd:	c3                   	ret    $/;"	l
bbd	grep.asm	/^     bbd:	32 37                	xor    (%edi),%dh$/;"	l
bbd	sh.asm	/^     bbd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bbe	cs550_user.asm	/^     bbe:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bbe	init.asm	/^ bbe:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
bbf	ln.asm	/^ bbf:	e8 bb fe ff ff       	call   a7f <putc>$/;"	l
bbf	stressfs.asm	/^     bbf:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
bbf	zombie.asm	/^ bbf:	8b 00                	mov    (%eax),%eax$/;"	l
bc	cs550_user.asm	/^      bc:	ba ad 8b db 68       	mov    $0x68db8bad,%edx$/;"	l
bc	echo.asm	/^  bc:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
bc	init.asm	/^  bc:	e8 ee 02 00 00       	call   3af <exec>$/;"	l
bc	kill.asm	/^  bc:	55                   	push   %ebp$/;"	l
bc	ls.asm	/^      bc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
bc0	echo.asm	/^ bc0:	0f 85 26 01 00 00    	jne    cec <printf+0x19a>$/;"	l
bc0	grep.asm	/^     bc0:	b8 b6 0b 00 00       	mov    $0xbb6,%eax$/;"	l
bc0	ls.asm	/^     bc0:	cd 42                	int    $0x42$/;"	l
bc0	mkdir.asm	/^ bc0:	e9 4a 01 00 00       	jmp    d0f <printf+0x19a>$/;"	l
bc0	rm.asm	/^ bc0:	e9 4a 01 00 00       	jmp    d0f <printf+0x19a>$/;"	l
bc0	sh.asm	/^     bc0:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bc0	wc.asm	/^     bc0:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bc1	cat.asm	/^ bc1:	74 10                	je     bd3 <printint+0x88>$/;"	l
bc1	kill.asm	/^ bc1:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
bc1	wc.asm	/^     bc1:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bc1	zombie.asm	/^ bc1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
bc2	ls.asm	/^     bc2:	c3                   	ret    $/;"	l
bc2	stressfs.asm	/^     bc2:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
bc2	wc.asm	/^     bc2:	34 39                	xor    $0x39,%al$/;"	l
bc3	cat.asm	/^ bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
bc3	cs550_user.asm	/^     bc3:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bc3	init.asm	/^ bc3:	eb 1f                	jmp    be4 <printint+0xa7>$/;"	l
bc3	ls.asm	/^     bc3:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bc4	cs550_user.asm	/^     bc4:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bc4	ln.asm	/^ bc4:	e9 30 01 00 00       	jmp    cf9 <printf+0x19a>$/;"	l
bc4	sh.asm	/^     bc4:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
bc5	cs550_user.asm	/^     bc5:	33 35 00 b8 be 0b    	xor    0xbbeb800,%esi$/;"	l
bc5	grep.asm	/^     bc5:	cd 42                	int    $0x42$/;"	l
bc5	init.asm	/^ bc5:	eb 1d                	jmp    be4 <printint+0xa7>$/;"	l
bc5	kill.asm	/^ bc5:	75 2d                	jne    bf4 <printf+0xa7>$/;"	l
bc5	mkdir.asm	/^ bc5:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
bc5	rm.asm	/^ bc5:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
bc5	stressfs.asm	/^     bc5:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
bc5	wc.asm	/^     bc5:	b8 bb 0b 00 00       	mov    $0xbbb,%eax$/;"	l
bc6	cat.asm	/^ bc6:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
bc6	echo.asm	/^ bc6:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
bc7	grep.asm	/^     bc7:	c3                   	ret    $/;"	l
bc7	init.asm	/^ bc7:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
bc7	kill.asm	/^ bc7:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
bc7	sh.asm	/^     bc7:	89 04 24             	mov    %eax,(%esp)$/;"	l
bc8	cs550_user.asm	/^     bc8:	b8 be 0b 00 00       	mov    $0xbbe,%eax$/;"	l
bc8	grep.asm	/^     bc8:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bc8	ls.asm	/^     bc8:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bc8	mkdir.asm	/^ bc8:	0f be c0             	movsbl %al,%eax$/;"	l
bc8	rm.asm	/^ bc8:	0f be c0             	movsbl %al,%eax$/;"	l
bc8	zombie.asm	/^ bc8:	00 $/;"	l
bc9	cat.asm	/^ bc9:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
bc9	ln.asm	/^ bc9:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
bc9	ls.asm	/^     bc9:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bc9	zombie.asm	/^ bc9:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
bca	echo.asm	/^ bca:	75 2d                	jne    bf9 <printf+0xa7>$/;"	l
bca	init.asm	/^ bca:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
bca	kill.asm	/^ bca:	8b 00                	mov    (%eax),%eax$/;"	l
bca	ls.asm	/^     bca:	32 38                	xor    (%eax),%bh$/;"	l
bca	sh.asm	/^     bca:	e8 07 fd ff ff       	call   8d6 <parseredirs>$/;"	l
bca	wc.asm	/^     bca:	cd 42                	int    $0x42$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon1
bcb	mkdir.asm	/^ bcb:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bcb	rm.asm	/^ bcb:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bcc	cat.asm	/^ bcc:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
bcc	echo.asm	/^ bcc:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
bcc	kill.asm	/^ bcc:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
bcc	stressfs.asm	/^     bcc:	00 $/;"	l
bcc	wc.asm	/^     bcc:	c3                   	ret    $/;"	l
bcd	cs550_user.asm	/^     bcd:	cd 42                	int    $0x42$/;"	l
bcd	grep.asm	/^     bcd:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bcd	init.asm	/^ bcd:	01 d0                	add    %edx,%eax$/;"	l
bcd	kernel.asm	/^  bcd = (sb & (1 << 2)) == 0;$/;"	d
bcd	ln.asm	/^ bcd:	0f 85 26 01 00 00    	jne    cf9 <printf+0x19a>$/;"	l
bcd	ls.asm	/^     bcd:	b8 c3 0b 00 00       	mov    $0xbc3,%eax$/;"	l
bcd	stressfs.asm	/^     bcd:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
bcd	wc.asm	/^     bcd:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bce	grep.asm	/^     bce:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bcf	cs550_user.asm	/^     bcf:	c3                   	ret    $/;"	l
bcf	echo.asm	/^ bcf:	8b 00                	mov    (%eax),%eax$/;"	l
bcf	grep.asm	/^     bcf:	32 38                	xor    (%eax),%bh$/;"	l
bcf	init.asm	/^ bcf:	0f b6 00             	movzbl (%eax),%eax$/;"	l
bcf	mkdir.asm	/^ bcf:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bcf	rm.asm	/^ bcf:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bcf	sh.asm	/^     bcf:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bcpu	kernel.asm	/^        bcpu = &cpus[ncpu];$/;"	d
bcpu	kernel.asm	/^  bcpu = &cpus[0];$/;"	d
bcpu	mp.c	/^static struct cpu *bcpu;$/;"	v	typeref:struct:cpu	file:
bd	cat.asm	/^  bd:	79 2f                	jns    ee <main+0x86>$/;"	l
bd	forktest.asm	/^  bd:	e8 bb 02 00 00       	call   37d <exit>$/;"	l
bd	kill.asm	/^  bd:	89 e5                	mov    %esp,%ebp$/;"	l
bd	ln.asm	/^  bd:	0f b6 12             	movzbl (%edx),%edx$/;"	l
bd	mkdir.asm	/^  bd:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
bd	rm.asm	/^  bd:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
bd	zombie.asm	/^  bd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
bd0	cs550_user.asm	/^     bd0:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bd0	stressfs.asm	/^     bd0:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bd0	zombie.asm	/^ bd0:	00 $/;"	l
bd1	cat.asm	/^ bd1:	eb 1f                	jmp    bf2 <printint+0xa7>$/;"	l
bd1	echo.asm	/^ bd1:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
bd1	zombie.asm	/^ bd1:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bd2	grep.asm	/^     bd2:	b8 c8 0b 00 00       	mov    $0xbc8,%eax$/;"	l
bd2	init.asm	/^ bd2:	0f be c0             	movsbl %al,%eax$/;"	l
bd2	ls.asm	/^     bd2:	cd 42                	int    $0x42$/;"	l
bd2	mkdir.asm	/^ bd2:	89 04 24             	mov    %eax,(%esp)$/;"	l
bd2	rm.asm	/^ bd2:	89 04 24             	mov    %eax,(%esp)$/;"	l
bd2	sh.asm	/^     bd2:	c7 44 24 08 7f 1c 00 	movl   $0x1c7f,0x8(%esp)$/;"	l
bd2	wc.asm	/^     bd2:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bd3	cat.asm	/^ bd3:	eb 1d                	jmp    bf2 <printint+0xa7>$/;"	l
bd3	kill.asm	/^ bd3:	00 $/;"	l
bd3	ln.asm	/^ bd3:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
bd3	wc.asm	/^     bd3:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bd4	kill.asm	/^ bd4:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
bd4	ls.asm	/^     bd4:	c3                   	ret    $/;"	l
bd4	stressfs.asm	/^     bd4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bd4	wc.asm	/^     bd4:	35 30 00 b8 cd       	xor    $0xcdb80030,%eax$/;"	l
bd5	cat.asm	/^ bd5:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
bd5	cs550_user.asm	/^     bd5:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bd5	init.asm	/^ bd5:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bd5	ls.asm	/^     bd5:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bd5	mkdir.asm	/^ bd5:	e8 bb fe ff ff       	call   a95 <putc>$/;"	l
bd5	rm.asm	/^ bd5:	e8 bb fe ff ff       	call   a95 <putc>$/;"	l
bd5	zombie.asm	/^ bd5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bd6	cs550_user.asm	/^     bd6:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bd7	cs550_user.asm	/^     bd7:	33 36                	xor    (%esi),%esi$/;"	l
bd7	grep.asm	/^     bd7:	cd 42                	int    $0x42$/;"	l
bd7	ln.asm	/^ bd7:	75 2d                	jne    c06 <printf+0xa7>$/;"	l
bd7	stressfs.asm	/^     bd7:	89 04 24             	mov    %eax,(%esp)$/;"	l
bd7	wc.asm	/^     bd7:	b8 cd 0b 00 00       	mov    $0xbcd,%eax$/;"	l
bd8	cat.asm	/^ bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
bd8	echo.asm	/^ bd8:	00 $/;"	l
bd8	zombie.asm	/^ bd8:	89 04 24             	mov    %eax,(%esp)$/;"	l
bd9	echo.asm	/^ bd9:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
bd9	grep.asm	/^     bd9:	c3                   	ret    $/;"	l
bd9	init.asm	/^ bd9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bd9	ln.asm	/^ bd9:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
bd9	sh.asm	/^     bd9:	00 $/;"	l
bda	cs550_user.asm	/^     bda:	b8 d0 0b 00 00       	mov    $0xbd0,%eax$/;"	l
bda	grep.asm	/^     bda:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bda	kernel.asm	/^  bda = (uchar *) P2V(0x400);$/;"	d
bda	ls.asm	/^     bda:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bda	mkdir.asm	/^ bda:	e9 30 01 00 00       	jmp    d0f <printf+0x19a>$/;"	l
bda	rm.asm	/^ bda:	e9 30 01 00 00       	jmp    d0f <printf+0x19a>$/;"	l
bda	sh.asm	/^     bda:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
bda	stressfs.asm	/^     bda:	e8 5c f8 ff ff       	call   43b <write>$/;"	l
bdb	cat.asm	/^ bdb:	01 d0                	add    %edx,%eax$/;"	l
bdb	kill.asm	/^ bdb:	00 $/;"	l
bdb	ls.asm	/^     bdb:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bdb	zombie.asm	/^ bdb:	e8 71 fe ff ff       	call   a51 <printint>$/;"	l
bdc	init.asm	/^ bdc:	89 04 24             	mov    %eax,(%esp)$/;"	l
bdc	kill.asm	/^ bdc:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bdc	ln.asm	/^ bdc:	8b 00                	mov    (%eax),%eax$/;"	l
bdc	ls.asm	/^     bdc:	32 39                	xor    (%ecx),%bh$/;"	l
bdc	wc.asm	/^     bdc:	cd 42                	int    $0x42$/;"	l
bdd	cat.asm	/^ bdd:	0f b6 00             	movzbl (%eax),%eax$/;"	l
bdd	sh.asm	/^     bdd:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bde	ln.asm	/^ bde:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
bde	wc.asm	/^     bde:	c3                   	ret    $/;"	l
bdf	cs550_user.asm	/^     bdf:	cd 42                	int    $0x42$/;"	l
bdf	grep.asm	/^     bdf:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bdf	init.asm	/^ bdf:	e8 31 ff ff ff       	call   b15 <putc>$/;"	l
bdf	ls.asm	/^     bdf:	b8 d5 0b 00 00       	mov    $0xbd5,%eax$/;"	l
bdf	mkdir.asm	/^ bdf:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
bdf	rm.asm	/^ bdf:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
bdf	stressfs.asm	/^     bdf:	c9                   	leave  $/;"	l
bdf	wc.asm	/^     bdf:	55                   	push   %ebp$/;"	l
be	grep.asm	/^      be:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
be0	cat.asm	/^ be0:	0f be c0             	movsbl %al,%eax$/;"	l
be0	echo.asm	/^ be0:	00 $/;"	l
be0	grep.asm	/^     be0:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
be0	kill.asm	/^ be0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
be0	stressfs.asm	/^     be0:	c3                   	ret    $/;"	l
be0	wc.asm	/^     be0:	89 e5                	mov    %esp,%ebp$/;"	l
be0	zombie.asm	/^ be0:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
be1	cs550_user.asm	/^     be1:	c3                   	ret    $/;"	l
be1	echo.asm	/^ be1:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
be1	grep.asm	/^     be1:	32 39                	xor    (%ecx),%bh$/;"	l
be1	sh.asm	/^     be1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
be1	stressfs.asm	/^     be1:	55                   	push   %ebp$/;"	l
be2	cs550_user.asm	/^     be2:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
be2	stressfs.asm	/^     be2:	89 e5                	mov    %esp,%ebp$/;"	l
be2	wc.asm	/^     be2:	83 ec 18             	sub    $0x18,%esp$/;"	l
be3	cat.asm	/^ be3:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
be3	kill.asm	/^ be3:	89 04 24             	mov    %eax,(%esp)$/;"	l
be3	mkdir.asm	/^ be3:	0f 85 26 01 00 00    	jne    d0f <printf+0x19a>$/;"	l
be3	rm.asm	/^ be3:	0f 85 26 01 00 00    	jne    d0f <printf+0x19a>$/;"	l
be4	grep.asm	/^     be4:	b8 da 0b 00 00       	mov    $0xbda,%eax$/;"	l
be4	init.asm	/^ be4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
be4	ls.asm	/^     be4:	cd 42                	int    $0x42$/;"	l
be4	sh.asm	/^     be4:	89 04 24             	mov    %eax,(%esp)$/;"	l
be4	stressfs.asm	/^     be4:	56                   	push   %esi$/;"	l
be4	zombie.asm	/^ be4:	e9 b3 00 00 00       	jmp    c9c <printf+0x193>$/;"	l
be5	echo.asm	/^ be5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
be5	ln.asm	/^ be5:	00 $/;"	l
be5	stressfs.asm	/^     be5:	53                   	push   %ebx$/;"	l
be5	wc.asm	/^     be5:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
be6	kill.asm	/^ be6:	e8 aa fe ff ff       	call   a95 <printint>$/;"	l
be6	ln.asm	/^ be6:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
be6	ls.asm	/^     be6:	c3                   	ret    $/;"	l
be6	stressfs.asm	/^     be6:	83 ec 30             	sub    $0x30,%esp$/;"	l
be7	cat.asm	/^ be7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
be7	cs550_user.asm	/^     be7:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
be7	ls.asm	/^     be7:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
be7	sh.asm	/^     be7:	e8 91 fa ff ff       	call   67d <peek>$/;"	l
be8	cs550_user.asm	/^     be8:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
be8	echo.asm	/^ be8:	89 04 24             	mov    %eax,(%esp)$/;"	l
be8	init.asm	/^ be8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
be8	wc.asm	/^     be8:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
be9	cs550_user.asm	/^     be9:	33 37                	xor    (%edi),%esi$/;"	l
be9	grep.asm	/^     be9:	cd 42                	int    $0x42$/;"	l
be9	mkdir.asm	/^ be9:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
be9	rm.asm	/^ be9:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
be9	stressfs.asm	/^     be9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
be9	zombie.asm	/^ be9:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
bea	cat.asm	/^ bea:	89 04 24             	mov    %eax,(%esp)$/;"	l
beb	echo.asm	/^ beb:	e8 aa fe ff ff       	call   a9a <printint>$/;"	l
beb	grep.asm	/^     beb:	c3                   	ret    $/;"	l
beb	kill.asm	/^ beb:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
beb	wc.asm	/^     beb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
bec	cs550_user.asm	/^     bec:	b8 e2 0b 00 00       	mov    $0xbe2,%eax$/;"	l
bec	grep.asm	/^     bec:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bec	init.asm	/^ bec:	79 d9                	jns    bc7 <printint+0x8a>$/;"	l
bec	ls.asm	/^     bec:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bec	sh.asm	/^     bec:	85 c0                	test   %eax,%eax$/;"	l
bed	cat.asm	/^ bed:	e8 31 ff ff ff       	call   b23 <putc>$/;"	l
bed	ln.asm	/^ bed:	00 $/;"	l
bed	ls.asm	/^     bed:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bed	mkdir.asm	/^ bed:	75 2d                	jne    c1c <printf+0xa7>$/;"	l
bed	rm.asm	/^ bed:	75 2d                	jne    c1c <printf+0xa7>$/;"	l
bed	zombie.asm	/^ bed:	75 45                	jne    c34 <printf+0x12b>$/;"	l
bee	init.asm	/^ bee:	83 c4 30             	add    $0x30,%esp$/;"	l
bee	ln.asm	/^ bee:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bee	ls.asm	/^     bee:	33 30                	xor    (%eax),%esi$/;"	l
bee	sh.asm	/^     bee:	0f 84 4f ff ff ff    	je     b43 <parseexec+0x71>$/;"	l
bef	kill.asm	/^ bef:	e9 ec 00 00 00       	jmp    ce0 <printf+0x193>$/;"	l
bef	mkdir.asm	/^ bef:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
bef	rm.asm	/^ bef:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
bef	zombie.asm	/^ bef:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
begin_op	log.c	/^begin_op(void)$/;"	f
begin_op	log.s	/^begin_op:$/;"	l
bf	cat.asm	/^  bf:	8b 44 24 1c          	mov    0x1c(%esp),%eax$/;"	l
bf	echo.asm	/^  bf:	c9                   	leave  $/;"	l
bf	kill.asm	/^  bf:	eb 08                	jmp    c9 <strcmp+0xd>$/;"	l
bf	stressfs.asm	/^      bf:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)$/;"	l
bf	wc.asm	/^      bf:	00 $/;"	l
bf0	echo.asm	/^ bf0:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
bf0	stressfs.asm	/^     bf0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
bf1	cs550_user.asm	/^     bf1:	cd 42                	int    $0x42$/;"	l
bf1	grep.asm	/^     bf1:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bf1	init.asm	/^ bf1:	5b                   	pop    %ebx$/;"	l
bf1	ls.asm	/^     bf1:	b8 e7 0b 00 00       	mov    $0xbe7,%eax$/;"	l
bf2	cat.asm	/^ bf2:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
bf2	grep.asm	/^     bf2:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bf2	init.asm	/^ bf2:	5e                   	pop    %esi$/;"	l
bf2	ln.asm	/^ bf2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bf2	mkdir.asm	/^ bf2:	8b 00                	mov    (%eax),%eax$/;"	l
bf2	rm.asm	/^ bf2:	8b 00                	mov    (%eax),%eax$/;"	l
bf2	wc.asm	/^     bf2:	00 $/;"	l
bf2	zombie.asm	/^ bf2:	8b 00                	mov    (%eax),%eax$/;"	l
bf3	cs550_user.asm	/^     bf3:	c3                   	ret    $/;"	l
bf3	grep.asm	/^     bf3:	33 30                	xor    (%eax),%esi$/;"	l
bf3	init.asm	/^ bf3:	5d                   	pop    %ebp$/;"	l
bf3	wc.asm	/^     bf3:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
bf4	cs550_user.asm	/^     bf4:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bf4	echo.asm	/^ bf4:	e9 ec 00 00 00       	jmp    ce5 <printf+0x193>$/;"	l
bf4	init.asm	/^ bf4:	c3                   	ret    $/;"	l
bf4	kill.asm	/^ bf4:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
bf4	mkdir.asm	/^ bf4:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
bf4	rm.asm	/^ bf4:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
bf4	sh.asm	/^     bf4:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
bf4	stressfs.asm	/^     bf4:	74 17                	je     c0d <printint+0x2c>$/;"	l
bf4	zombie.asm	/^ bf4:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
bf5	init.asm	/^ bf5:	55                   	push   %ebp$/;"	l
bf5	ln.asm	/^ bf5:	89 04 24             	mov    %eax,(%esp)$/;"	l
bf6	cat.asm	/^ bf6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
bf6	grep.asm	/^     bf6:	b8 ec 0b 00 00       	mov    $0xbec,%eax$/;"	l
bf6	init.asm	/^ bf6:	89 e5                	mov    %esp,%ebp$/;"	l
bf6	ls.asm	/^     bf6:	cd 42                	int    $0x42$/;"	l
bf6	stressfs.asm	/^     bf6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
bf6	wc.asm	/^     bf6:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bf7	sh.asm	/^     bf7:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
bf7	zombie.asm	/^ bf7:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
bf8	init.asm	/^ bf8:	83 ec 38             	sub    $0x38,%esp$/;"	l
bf8	kill.asm	/^ bf8:	74 06                	je     c00 <printf+0xb3>$/;"	l
bf8	ln.asm	/^ bf8:	e8 aa fe ff ff       	call   aa7 <printint>$/;"	l
bf8	ls.asm	/^     bf8:	c3                   	ret    $/;"	l
bf9	cs550_user.asm	/^     bf9:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bf9	echo.asm	/^ bf9:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
bf9	ls.asm	/^     bf9:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bfa	cat.asm	/^ bfa:	79 d9                	jns    bd5 <printint+0x8a>$/;"	l
bfa	cs550_user.asm	/^     bfa:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bfa	kill.asm	/^ bfa:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
bfa	sh.asm	/^     bfa:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)$/;"	l
bfa	stressfs.asm	/^     bfa:	79 11                	jns    c0d <printint+0x2c>$/;"	l
bfa	wc.asm	/^     bfa:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bfb	cs550_user.asm	/^     bfb:	33 38                	xor    (%eax),%edi$/;"	l
bfb	grep.asm	/^     bfb:	cd 42                	int    $0x42$/;"	l
bfb	init.asm	/^ bfb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
bfb	mkdir.asm	/^ bfb:	00 $/;"	l
bfb	rm.asm	/^ bfb:	00 $/;"	l
bfb	zombie.asm	/^ bfb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
bfc	cat.asm	/^ bfc:	83 c4 30             	add    $0x30,%esp$/;"	l
bfc	mkdir.asm	/^ bfc:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
bfc	rm.asm	/^ bfc:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
bfc	stressfs.asm	/^     bfc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
bfd	echo.asm	/^ bfd:	74 06                	je     c05 <printf+0xb3>$/;"	l
bfd	grep.asm	/^     bfd:	c3                   	ret    $/;"	l
bfd	ln.asm	/^ bfd:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
bfd	wc.asm	/^     bfd:	89 04 24             	mov    %eax,(%esp)$/;"	l
bfe	cs550_user.asm	/^     bfe:	b8 f4 0b 00 00       	mov    $0xbf4,%eax$/;"	l
bfe	grep.asm	/^     bfe:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
bfe	kill.asm	/^ bfe:	75 2d                	jne    c2d <printf+0xe0>$/;"	l
bfe	ls.asm	/^     bfe:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bff	cat.asm	/^ bff:	5b                   	pop    %ebx$/;"	l
bff	echo.asm	/^ bff:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
bff	ls.asm	/^     bff:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
bff	zombie.asm	/^ bff:	75 09                	jne    c0a <printf+0x101>$/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bfree	fs.s	/^bfree:$/;"	l
bget	bio.c	/^bget(uint dev, uint blockno)$/;"	f	file:
bget	bio.s	/^bget:$/;"	l
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	usertests.c	/^bigargtest(void)$/;"	f
bigdir	usertests.c	/^bigdir(void)$/;"	f
bigfile	usertests.c	/^bigfile(void)$/;"	f
bigwrite	usertests.c	/^bigwrite(void)$/;"	f
binit	bio.c	/^binit(void)$/;"	f
binit	bio.s	/^binit:$/;"	l
block	log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	file:
blockno	buf.h	/^  uint blockno;$/;"	m	struct:buf
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
bmap	fs.s	/^bmap:$/;"	l
bmapstart	fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock
bootmain	bootmain.c	/^bootmain(void)$/;"	f
bp	cat.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	cs550_user.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(dev, IBLOCK(inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	kernel.asm	/^  bp = 0;$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kill.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	stressfs.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*)ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint blockno)$/;"	f
bread	bio.s	/^bread:$/;"	l
brelse	bio.c	/^brelse(struct buf *b)$/;"	f
brelse	bio.s	/^brelse:$/;"	l
bsstest	usertests.c	/^bsstest(void)$/;"	f
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon6	file:
buf	grep.c	/^char buf[1024];$/;"	v
buf	kernel.asm	/^  buf = (char*)p;$/;"	d
buf	usertests.c	/^char buf[8192];$/;"	v
buf	wc.c	/^char buf[512];$/;"	v
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f
bwrite	bio.s	/^bwrite:$/;"	l
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:
bzero	fs.s	/^bzero:$/;"	l
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	cs550_user.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	forktest.asm	/^   c:	e8 98 01 00 00       	call   1a9 <strlen>$/;"	l
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	initcode.asm	/^   c:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
c	kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpunum()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^       c:	e8 50 0f 00 00       	call   f61 <exit>$/;"	l
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^       c:	c7 84 24 1e 02 00 00 	movl   $0x65727473,0x21e(%esp)$/;"	l
c	stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	echo.asm	/^  c0:	c3                   	ret    $/;"	l
c0	ln.asm	/^  c0:	88 10                	mov    %dl,(%eax)$/;"	l
c0	mkdir.asm	/^  c0:	90                   	nop$/;"	l
c0	rm.asm	/^  c0:	90                   	nop$/;"	l
c0	wc.asm	/^      c0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c00	cat.asm	/^ c00:	5e                   	pop    %esi$/;"	l
c00	kill.asm	/^ c00:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c00	ls.asm	/^     c00:	33 31                	xor    (%ecx),%esi$/;"	l
c00	wc.asm	/^     c00:	e8 5c f8 ff ff       	call   461 <write>$/;"	l
c01	cat.asm	/^ c01:	5d                   	pop    %ebp$/;"	l
c01	ln.asm	/^ c01:	e9 ec 00 00 00       	jmp    cf2 <printf+0x193>$/;"	l
c01	sh.asm	/^     c01:	00 $/;"	l
c01	zombie.asm	/^ c01:	c7 45 f4 d5 0e 00 00 	movl   $0xed5,-0xc(%ebp)$/;"	l
c02	cat.asm	/^ c02:	c3                   	ret    $/;"	l
c02	init.asm	/^ c02:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
c02	sh.asm	/^     c02:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c03	cat.asm	/^ c03:	55                   	push   %ebp$/;"	l
c03	cs550_user.asm	/^     c03:	cd 42                	int    $0x42$/;"	l
c03	echo.asm	/^ c03:	75 2d                	jne    c32 <printf+0xe0>$/;"	l
c03	grep.asm	/^     c03:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c03	kill.asm	/^ c03:	8b 00                	mov    (%eax),%eax$/;"	l
c03	ls.asm	/^     c03:	b8 f9 0b 00 00       	mov    $0xbf9,%eax$/;"	l
c03	mkdir.asm	/^ c03:	00 $/;"	l
c03	rm.asm	/^ c03:	00 $/;"	l
c03	stressfs.asm	/^     c03:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c04	cat.asm	/^ c04:	89 e5                	mov    %esp,%ebp$/;"	l
c04	grep.asm	/^     c04:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c04	mkdir.asm	/^ c04:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c04	rm.asm	/^ c04:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c05	cs550_user.asm	/^     c05:	c3                   	ret    $/;"	l
c05	echo.asm	/^ c05:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c05	grep.asm	/^     c05:	33 31                	xor    (%ecx),%esi$/;"	l
c05	init.asm	/^ c05:	83 c0 04             	add    $0x4,%eax$/;"	l
c05	kill.asm	/^ c05:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
c05	sh.asm	/^     c05:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
c05	wc.asm	/^     c05:	c9                   	leave  $/;"	l
c06	cat.asm	/^ c06:	83 ec 38             	sub    $0x38,%esp$/;"	l
c06	cs550_user.asm	/^     c06:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c06	ln.asm	/^ c06:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
c06	stressfs.asm	/^     c06:	f7 d8                	neg    %eax$/;"	l
c06	wc.asm	/^     c06:	c3                   	ret    $/;"	l
c07	wc.asm	/^     c07:	55                   	push   %ebp$/;"	l
c08	echo.asm	/^ c08:	8b 00                	mov    (%eax),%eax$/;"	l
c08	grep.asm	/^     c08:	b8 fe 0b 00 00       	mov    $0xbfe,%eax$/;"	l
c08	init.asm	/^ c08:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
c08	ls.asm	/^     c08:	cd 42                	int    $0x42$/;"	l
c08	mkdir.asm	/^ c08:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c08	rm.asm	/^ c08:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c08	sh.asm	/^     c08:	83 c2 08             	add    $0x8,%edx$/;"	l
c08	stressfs.asm	/^     c08:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
c08	wc.asm	/^     c08:	89 e5                	mov    %esp,%ebp$/;"	l
c08	zombie.asm	/^ c08:	eb 1e                	jmp    c28 <printf+0x11f>$/;"	l
c09	cat.asm	/^ c09:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
c0a	echo.asm	/^ c0a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
c0a	ln.asm	/^ c0a:	74 06                	je     c12 <printf+0xb3>$/;"	l
c0a	ls.asm	/^     c0a:	c3                   	ret    $/;"	l
c0a	wc.asm	/^     c0a:	56                   	push   %esi$/;"	l
c0a	zombie.asm	/^ c0a:	eb 1c                	jmp    c28 <printf+0x11f>$/;"	l
c0b	cs550_user.asm	/^     c0b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c0b	init.asm	/^ c0b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
c0b	ls.asm	/^     c0b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c0b	mkdir.asm	/^ c0b:	89 04 24             	mov    %eax,(%esp)$/;"	l
c0b	rm.asm	/^ c0b:	89 04 24             	mov    %eax,(%esp)$/;"	l
c0b	sh.asm	/^     c0b:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)$/;"	l
c0b	stressfs.asm	/^     c0b:	eb 06                	jmp    c13 <printint+0x32>$/;"	l
c0b	wc.asm	/^     c0b:	53                   	push   %ebx$/;"	l
c0c	cs550_user.asm	/^     c0c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c0c	kill.asm	/^ c0c:	00 $/;"	l
c0c	ln.asm	/^ c0c:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
c0c	wc.asm	/^     c0c:	83 ec 30             	sub    $0x30,%esp$/;"	l
c0c	zombie.asm	/^ c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c0d	cs550_user.asm	/^     c0d:	33 39                	xor    (%ecx),%edi$/;"	l
c0d	grep.asm	/^     c0d:	cd 42                	int    $0x42$/;"	l
c0d	kill.asm	/^ c0d:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
c0d	stressfs.asm	/^     c0d:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c0e	mkdir.asm	/^ c0e:	e8 aa fe ff ff       	call   abd <printint>$/;"	l
c0e	rm.asm	/^ c0e:	e8 aa fe ff ff       	call   abd <printint>$/;"	l
c0f	grep.asm	/^     c0f:	c3                   	ret    $/;"	l
c0f	wc.asm	/^     c0f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
c0f	zombie.asm	/^ c0f:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c1	cs550_user.asm	/^      c1:	89 c8                	mov    %ecx,%eax$/;"	l
c1	echo.asm	/^  c1:	55                   	push   %ebp$/;"	l
c1	grep.asm	/^      c1:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
c1	init.asm	/^  c1:	c7 44 24 04 f2 0f 00 	movl   $0xff2,0x4(%esp)$/;"	l
c1	kill.asm	/^  c1:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
c1	mkdir.asm	/^  c1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c1	rm.asm	/^  c1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c1	sh.asm	/^      c1:	00 $/;"	l
c10	cat.asm	/^ c10:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
c10	cs550_user.asm	/^     c10:	b8 06 0c 00 00       	mov    $0xc06,%eax$/;"	l
c10	grep.asm	/^     c10:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c10	ln.asm	/^ c10:	75 2d                	jne    c3f <printf+0xe0>$/;"	l
c10	ls.asm	/^     c10:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c10	stressfs.asm	/^     c10:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
c11	echo.asm	/^ c11:	00 $/;"	l
c11	ls.asm	/^     c11:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c12	echo.asm	/^ c12:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
c12	init.asm	/^ c12:	e9 7c 01 00 00       	jmp    d93 <printf+0x19e>$/;"	l
c12	ln.asm	/^ c12:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c12	ls.asm	/^     c12:	33 32                	xor    (%edx),%esi$/;"	l
c12	sh.asm	/^     c12:	00 $/;"	l
c12	zombie.asm	/^ c12:	0f be c0             	movsbl %al,%eax$/;"	l
c13	cat.asm	/^ c13:	83 c0 04             	add    $0x4,%eax$/;"	l
c13	mkdir.asm	/^ c13:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c13	rm.asm	/^ c13:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c13	sh.asm	/^     c13:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c13	stressfs.asm	/^     c13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
c14	kill.asm	/^ c14:	00 $/;"	l
c15	cs550_user.asm	/^     c15:	cd 42                	int    $0x42$/;"	l
c15	grep.asm	/^     c15:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c15	kill.asm	/^ c15:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c15	ln.asm	/^ c15:	8b 00                	mov    (%eax),%eax$/;"	l
c15	ls.asm	/^     c15:	b8 0b 0c 00 00       	mov    $0xc0b,%eax$/;"	l
c15	zombie.asm	/^ c15:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c16	cat.asm	/^ c16:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
c16	grep.asm	/^     c16:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c16	sh.asm	/^     c16:	c9                   	leave  $/;"	l
c16	wc.asm	/^     c16:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
c17	cs550_user.asm	/^     c17:	c3                   	ret    $/;"	l
c17	grep.asm	/^     c17:	33 32                	xor    (%edx),%esi$/;"	l
c17	init.asm	/^ c17:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
c17	ln.asm	/^ c17:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
c17	mkdir.asm	/^ c17:	e9 ec 00 00 00       	jmp    d08 <printf+0x193>$/;"	l
c17	rm.asm	/^ c17:	e9 ec 00 00 00       	jmp    d08 <printf+0x193>$/;"	l
c17	sh.asm	/^     c17:	c3                   	ret    $/;"	l
c18	cs550_user.asm	/^     c18:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c18	sh.asm	/^     c18:	55                   	push   %ebp$/;"	l
c19	cat.asm	/^ c19:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
c19	echo.asm	/^ c19:	00 $/;"	l
c19	kill.asm	/^ c19:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c19	sh.asm	/^     c19:	89 e5                	mov    %esp,%ebp$/;"	l
c19	zombie.asm	/^ c19:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c1a	echo.asm	/^ c1a:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c1a	grep.asm	/^     c1a:	b8 10 0c 00 00       	mov    $0xc10,%eax$/;"	l
c1a	init.asm	/^ c1a:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c1a	ls.asm	/^     c1a:	cd 42                	int    $0x42$/;"	l
c1a	stressfs.asm	/^     c1a:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
c1a	wc.asm	/^     c1a:	74 17                	je     c33 <printint+0x2c>$/;"	l
c1b	sh.asm	/^     c1b:	83 ec 38             	sub    $0x38,%esp$/;"	l
c1c	kill.asm	/^ c1c:	89 04 24             	mov    %eax,(%esp)$/;"	l
c1c	ls.asm	/^     c1c:	c3                   	ret    $/;"	l
c1c	mkdir.asm	/^ c1c:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
c1c	rm.asm	/^ c1c:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
c1c	wc.asm	/^     c1c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
c1c	zombie.asm	/^ c1c:	89 04 24             	mov    %eax,(%esp)$/;"	l
c1d	cs550_user.asm	/^     c1d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c1d	init.asm	/^ c1d:	01 d0                	add    %edx,%eax$/;"	l
c1d	ls.asm	/^     c1d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c1d	stressfs.asm	/^     c1d:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
c1e	cs550_user.asm	/^     c1e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c1e	echo.asm	/^ c1e:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c1e	ln.asm	/^ c1e:	00 $/;"	l
c1e	sh.asm	/^     c1e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)$/;"	l
c1f	cs550_user.asm	/^     c1f:	34 30                	xor    $0x30,%al$/;"	l
c1f	grep.asm	/^     c1f:	cd 42                	int    $0x42$/;"	l
c1f	init.asm	/^ c1f:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c1f	kill.asm	/^ c1f:	e8 71 fe ff ff       	call   a95 <printint>$/;"	l
c1f	ln.asm	/^ c1f:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
c1f	zombie.asm	/^ c1f:	e8 05 fe ff ff       	call   a29 <putc>$/;"	l
c2	echo.asm	/^  c2:	89 e5                	mov    %esp,%ebp$/;"	l
c2	forktest.asm	/^  c2:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
c2	ln.asm	/^  c2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c2	sh.asm	/^      c2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)$/;"	l
c20	cat.asm	/^ c20:	e9 7c 01 00 00       	jmp    da1 <printf+0x19e>$/;"	l
c20	mkdir.asm	/^ c20:	74 06                	je     c28 <printf+0xb3>$/;"	l
c20	rm.asm	/^ c20:	74 06                	je     c28 <printf+0xb3>$/;"	l
c20	stressfs.asm	/^     c20:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
c20	wc.asm	/^     c20:	79 11                	jns    c33 <printint+0x2c>$/;"	l
c21	echo.asm	/^ c21:	89 04 24             	mov    %eax,(%esp)$/;"	l
c21	grep.asm	/^     c21:	c3                   	ret    $/;"	l
c22	cs550_user.asm	/^     c22:	b8 18 0c 00 00       	mov    $0xc18,%eax$/;"	l
c22	grep.asm	/^     c22:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c22	init.asm	/^ c22:	0f be c0             	movsbl %al,%eax$/;"	l
c22	ls.asm	/^     c22:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c22	mkdir.asm	/^ c22:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
c22	rm.asm	/^ c22:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
c22	sh.asm	/^     c22:	75 0a                	jne    c2e <nulterminate+0x16>$/;"	l
c22	wc.asm	/^     c22:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
c23	ls.asm	/^     c23:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c23	stressfs.asm	/^     c23:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
c24	echo.asm	/^ c24:	e8 71 fe ff ff       	call   a9a <printint>$/;"	l
c24	kill.asm	/^ c24:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c24	ls.asm	/^     c24:	33 33                	xor    (%ebx),%esi$/;"	l
c24	sh.asm	/^     c24:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c24	zombie.asm	/^ c24:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
c25	cat.asm	/^ c25:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
c25	init.asm	/^ c25:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
c26	ln.asm	/^ c26:	00 $/;"	l
c26	mkdir.asm	/^ c26:	75 2d                	jne    c55 <printf+0xe0>$/;"	l
c26	rm.asm	/^ c26:	75 2d                	jne    c55 <printf+0xe0>$/;"	l
c26	stressfs.asm	/^     c26:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c27	cs550_user.asm	/^     c27:	cd 42                	int    $0x42$/;"	l
c27	grep.asm	/^     c27:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c27	ln.asm	/^ c27:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c27	ls.asm	/^     c27:	b8 1d 0c 00 00       	mov    $0xc1d,%eax$/;"	l
c28	cat.asm	/^ c28:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c28	grep.asm	/^     c28:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c28	kill.asm	/^ c28:	e9 b3 00 00 00       	jmp    ce0 <printf+0x193>$/;"	l
c28	mkdir.asm	/^ c28:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c28	rm.asm	/^ c28:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c28	zombie.asm	/^ c28:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c29	cs550_user.asm	/^     c29:	c3                   	ret    $/;"	l
c29	echo.asm	/^ c29:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c29	grep.asm	/^     c29:	33 33                	xor    (%ebx),%esi$/;"	l
c29	sh.asm	/^     c29:	e9 c9 00 00 00       	jmp    cf7 <nulterminate+0xdf>$/;"	l
c29	stressfs.asm	/^     c29:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
c29	wc.asm	/^     c29:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c2a	cs550_user.asm	/^     c2a:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c2a	init.asm	/^ c2a:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
c2b	cat.asm	/^ c2b:	01 d0                	add    %edx,%eax$/;"	l
c2b	ln.asm	/^ c2b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c2b	mkdir.asm	/^ c2b:	8b 00                	mov    (%eax),%eax$/;"	l
c2b	rm.asm	/^ c2b:	8b 00                	mov    (%eax),%eax$/;"	l
c2b	zombie.asm	/^ c2b:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c2c	grep.asm	/^     c2c:	b8 22 0c 00 00       	mov    $0xc22,%eax$/;"	l
c2c	ls.asm	/^     c2c:	cd 42                	int    $0x42$/;"	l
c2c	wc.asm	/^     c2c:	f7 d8                	neg    %eax$/;"	l
c2d	cat.asm	/^ c2d:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c2d	echo.asm	/^ c2d:	e9 b3 00 00 00       	jmp    ce5 <printf+0x193>$/;"	l
c2d	init.asm	/^ c2d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
c2d	kill.asm	/^ c2d:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
c2d	mkdir.asm	/^ c2d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
c2d	rm.asm	/^ c2d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
c2e	ln.asm	/^ c2e:	89 04 24             	mov    %eax,(%esp)$/;"	l
c2e	ls.asm	/^     c2e:	c3                   	ret    $/;"	l
c2e	sh.asm	/^     c2e:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c2e	stressfs.asm	/^     c2e:	f7 f3                	div    %ebx$/;"	l
c2e	wc.asm	/^     c2e:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
c2e	zombie.asm	/^ c2e:	84 c0                	test   %al,%al$/;"	l
c2f	cs550_user.asm	/^     c2f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c2f	ls.asm	/^     c2f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c3	cat.asm	/^  c3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx$/;"	l
c3	cs550_user.asm	/^      c3:	f7 ea                	imul   %edx$/;"	l
c3	ls.asm	/^      c3:	00 $/;"	l
c30	cat.asm	/^ c30:	0f be c0             	movsbl %al,%eax$/;"	l
c30	cs550_user.asm	/^     c30:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c30	stressfs.asm	/^     c30:	89 d0                	mov    %edx,%eax$/;"	l
c30	zombie.asm	/^ c30:	75 da                	jne    c0c <printf+0x103>$/;"	l
c31	cs550_user.asm	/^     c31:	34 31                	xor    $0x31,%al$/;"	l
c31	grep.asm	/^     c31:	cd 42                	int    $0x42$/;"	l
c31	init.asm	/^ c31:	75 2c                	jne    c5f <printf+0x6a>$/;"	l
c31	kill.asm	/^ c31:	75 45                	jne    c78 <printf+0x12b>$/;"	l
c31	ln.asm	/^ c31:	e8 71 fe ff ff       	call   aa7 <printint>$/;"	l
c31	sh.asm	/^     c31:	8b 00                	mov    (%eax),%eax$/;"	l
c31	wc.asm	/^     c31:	eb 06                	jmp    c39 <printint+0x32>$/;"	l
c32	echo.asm	/^ c32:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
c32	stressfs.asm	/^     c32:	0f b6 80 d4 12 00 00 	movzbl 0x12d4(%eax),%eax$/;"	l
c32	zombie.asm	/^ c32:	eb 68                	jmp    c9c <printf+0x193>$/;"	l
c33	cat.asm	/^ c33:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
c33	grep.asm	/^     c33:	c3                   	ret    $/;"	l
c33	init.asm	/^ c33:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
c33	kill.asm	/^ c33:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c33	sh.asm	/^     c33:	83 f8 05             	cmp    $0x5,%eax$/;"	l
c33	wc.asm	/^     c33:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c34	cs550_user.asm	/^     c34:	b8 2a 0c 00 00       	mov    $0xc2a,%eax$/;"	l
c34	grep.asm	/^     c34:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c34	ls.asm	/^     c34:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c34	mkdir.asm	/^ c34:	00 $/;"	l
c34	rm.asm	/^ c34:	00 $/;"	l
c34	zombie.asm	/^ c34:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
c35	ls.asm	/^     c35:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c35	mkdir.asm	/^ c35:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
c35	rm.asm	/^ c35:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
c36	echo.asm	/^ c36:	75 45                	jne    c7d <printf+0x12b>$/;"	l
c36	kill.asm	/^ c36:	8b 00                	mov    (%eax),%eax$/;"	l
c36	ln.asm	/^ c36:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c36	ls.asm	/^     c36:	33 34 00             	xor    (%eax,%eax,1),%esi$/;"	l
c36	sh.asm	/^     c36:	0f 87 b8 00 00 00    	ja     cf4 <nulterminate+0xdc>$/;"	l
c36	wc.asm	/^     c36:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
c37	init.asm	/^ c37:	75 0c                	jne    c45 <printf+0x50>$/;"	l
c38	cat.asm	/^ c38:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
c38	echo.asm	/^ c38:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c38	kill.asm	/^ c38:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
c38	zombie.asm	/^ c38:	75 1d                	jne    c57 <printf+0x14e>$/;"	l
c39	cs550_user.asm	/^     c39:	cd 42                	int    $0x42$/;"	l
c39	grep.asm	/^     c39:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c39	init.asm	/^ c39:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
c39	ls.asm	/^     c39:	b8 2f 0c 00 00       	mov    $0xc2f,%eax$/;"	l
c39	stressfs.asm	/^     c39:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
c39	wc.asm	/^     c39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
c3a	grep.asm	/^     c3a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c3a	ln.asm	/^ c3a:	e9 b3 00 00 00       	jmp    cf2 <printf+0x193>$/;"	l
c3a	zombie.asm	/^ c3a:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c3b	cat.asm	/^ c3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
c3b	cs550_user.asm	/^     c3b:	c3                   	ret    $/;"	l
c3b	echo.asm	/^ c3b:	8b 00                	mov    (%eax),%eax$/;"	l
c3b	grep.asm	/^     c3b:	33 34 00             	xor    (%eax,%eax,1),%esi$/;"	l
c3b	kill.asm	/^ c3b:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c3c	cs550_user.asm	/^     c3c:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c3c	mkdir.asm	/^ c3c:	00 $/;"	l
c3c	rm.asm	/^ c3c:	00 $/;"	l
c3c	sh.asm	/^     c3c:	8b 04 85 84 1c 00 00 	mov    0x1c84(,%eax,4),%eax$/;"	l
c3d	echo.asm	/^ c3d:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
c3d	mkdir.asm	/^ c3d:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c3d	rm.asm	/^ c3d:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c3d	stressfs.asm	/^     c3d:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
c3d	zombie.asm	/^ c3d:	8b 00                	mov    (%eax),%eax$/;"	l
c3e	grep.asm	/^     c3e:	b8 34 0c 00 00       	mov    $0xc34,%eax$/;"	l
c3e	ls.asm	/^     c3e:	cd 42                	int    $0x42$/;"	l
c3f	cat.asm	/^ c3f:	75 2c                	jne    c6d <printf+0x6a>$/;"	l
c3f	kill.asm	/^ c3f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
c3f	ln.asm	/^ c3f:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
c3f	zombie.asm	/^ c3f:	0f be c0             	movsbl %al,%eax$/;"	l
c4	echo.asm	/^  c4:	eb 08                	jmp    ce <strcmp+0xd>$/;"	l
c4	ls.asm	/^      c4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c4	mkdir.asm	/^  c4:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
c4	rm.asm	/^  c4:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
c4	zombie.asm	/^  c4:	eb 04                	jmp    ca <strlen+0x13>$/;"	l
c40	echo.asm	/^ c40:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c40	init.asm	/^ c40:	e9 4a 01 00 00       	jmp    d8f <printf+0x19a>$/;"	l
c40	ls.asm	/^     c40:	c3                   	ret    $/;"	l
c40	stressfs.asm	/^     c40:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c40	wc.asm	/^     c40:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
c41	cat.asm	/^ c41:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
c41	cs550_user.asm	/^     c41:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c41	ls.asm	/^     c41:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c41	mkdir.asm	/^ c41:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c41	rm.asm	/^ c41:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c42	cs550_user.asm	/^     c42:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c42	zombie.asm	/^ c42:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c43	cs550_user.asm	/^     c43:	34 32                	xor    $0x32,%al$/;"	l
c43	grep.asm	/^     c43:	cd 42                	int    $0x42$/;"	l
c43	kill.asm	/^ c43:	75 09                	jne    c4e <printf+0x101>$/;"	l
c43	ln.asm	/^ c43:	75 45                	jne    c8a <printf+0x12b>$/;"	l
c43	sh.asm	/^     c43:	ff e0                	jmp    *%eax$/;"	l
c43	stressfs.asm	/^     c43:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
c43	wc.asm	/^     c43:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
c44	echo.asm	/^ c44:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
c44	mkdir.asm	/^ c44:	89 04 24             	mov    %eax,(%esp)$/;"	l
c44	rm.asm	/^ c44:	89 04 24             	mov    %eax,(%esp)$/;"	l
c45	cat.asm	/^ c45:	75 0c                	jne    c53 <printf+0x50>$/;"	l
c45	grep.asm	/^     c45:	c3                   	ret    $/;"	l
c45	init.asm	/^ c45:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c45	kill.asm	/^ c45:	c7 45 f4 2d 0f 00 00 	movl   $0xf2d,-0xc(%ebp)$/;"	l
c45	ln.asm	/^ c45:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c45	sh.asm	/^     c45:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c46	cs550_user.asm	/^     c46:	b8 3c 0c 00 00       	mov    $0xc3c,%eax$/;"	l
c46	grep.asm	/^     c46:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c46	ls.asm	/^     c46:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c46	wc.asm	/^     c46:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
c46	zombie.asm	/^ c46:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c47	cat.asm	/^ c47:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
c47	ls.asm	/^     c47:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c47	mkdir.asm	/^ c47:	e8 71 fe ff ff       	call   abd <printint>$/;"	l
c47	rm.asm	/^ c47:	e8 71 fe ff ff       	call   abd <printint>$/;"	l
c48	echo.asm	/^ c48:	75 09                	jne    c53 <printf+0x101>$/;"	l
c48	init.asm	/^ c48:	0f be c0             	movsbl %al,%eax$/;"	l
c48	ln.asm	/^ c48:	8b 00                	mov    (%eax),%eax$/;"	l
c48	ls.asm	/^     c48:	33 35 00 b8 41 0c    	xor    0xc41b800,%esi$/;"	l
c48	sh.asm	/^     c48:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
c48	stressfs.asm	/^     c48:	f7 f6                	div    %esi$/;"	l
c49	wc.asm	/^     c49:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
c49	zombie.asm	/^ c49:	89 04 24             	mov    %eax,(%esp)$/;"	l
c4a	echo.asm	/^ c4a:	c7 45 f4 27 0f 00 00 	movl   $0xf27,-0xc(%ebp)$/;"	l
c4a	ln.asm	/^ c4a:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
c4a	stressfs.asm	/^     c4a:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
c4b	cs550_user.asm	/^     c4b:	cd 42                	int    $0x42$/;"	l
c4b	grep.asm	/^     c4b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c4b	init.asm	/^ c4b:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c4b	ls.asm	/^     c4b:	b8 41 0c 00 00       	mov    $0xc41,%eax$/;"	l
c4b	sh.asm	/^     c4b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
c4c	grep.asm	/^     c4c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c4c	kill.asm	/^ c4c:	eb 1e                	jmp    c6c <printf+0x11f>$/;"	l
c4c	mkdir.asm	/^ c4c:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c4c	rm.asm	/^ c4c:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c4c	wc.asm	/^     c4c:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c4c	zombie.asm	/^ c4c:	e8 d8 fd ff ff       	call   a29 <putc>$/;"	l
c4d	cs550_user.asm	/^     c4d:	c3                   	ret    $/;"	l
c4d	grep.asm	/^     c4d:	33 35 00 b8 46 0c    	xor    0xc46b800,%esi$/;"	l
c4d	ln.asm	/^ c4d:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c4d	stressfs.asm	/^     c4d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
c4e	cat.asm	/^ c4e:	e9 4a 01 00 00       	jmp    d9d <printf+0x19a>$/;"	l
c4e	cs550_user.asm	/^     c4e:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c4e	kill.asm	/^ c4e:	eb 1c                	jmp    c6c <printf+0x11f>$/;"	l
c4f	init.asm	/^ c4f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c4f	wc.asm	/^     c4f:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
c5	cs550_user.asm	/^      c5:	c1 fa 0c             	sar    $0xc,%edx$/;"	l
c5	grep.asm	/^      c5:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c5	kill.asm	/^  c5:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
c5	ln.asm	/^  c5:	84 c0                	test   %al,%al$/;"	l
c50	grep.asm	/^     c50:	b8 46 0c 00 00       	mov    $0xc46,%eax$/;"	l
c50	kill.asm	/^ c50:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c50	ls.asm	/^     c50:	cd 42                	int    $0x42$/;"	l
c50	mkdir.asm	/^ c50:	e9 b3 00 00 00       	jmp    d08 <printf+0x193>$/;"	l
c50	rm.asm	/^ c50:	e9 b3 00 00 00       	jmp    d08 <printf+0x193>$/;"	l
c51	echo.asm	/^ c51:	eb 1e                	jmp    c71 <printf+0x11f>$/;"	l
c51	ln.asm	/^ c51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
c51	stressfs.asm	/^     c51:	75 c7                	jne    c1a <printint+0x39>$/;"	l
c51	zombie.asm	/^ c51:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c52	init.asm	/^ c52:	89 04 24             	mov    %eax,(%esp)$/;"	l
c52	ls.asm	/^     c52:	c3                   	ret    $/;"	l
c52	sh.asm	/^     c52:	eb 14                	jmp    c68 <nulterminate+0x50>$/;"	l
c53	cat.asm	/^ c53:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c53	cs550_user.asm	/^     c53:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c53	echo.asm	/^ c53:	eb 1c                	jmp    c71 <printf+0x11f>$/;"	l
c53	kill.asm	/^ c53:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c53	ls.asm	/^     c53:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c53	stressfs.asm	/^     c53:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
c54	cs550_user.asm	/^     c54:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c54	sh.asm	/^     c54:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c54	wc.asm	/^     c54:	f7 f3                	div    %ebx$/;"	l
c55	cs550_user.asm	/^     c55:	34 33                	xor    $0x33,%al$/;"	l
c55	echo.asm	/^ c55:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c55	grep.asm	/^     c55:	cd 42                	int    $0x42$/;"	l
c55	init.asm	/^ c55:	e8 bb fe ff ff       	call   b15 <putc>$/;"	l
c55	ln.asm	/^ c55:	75 09                	jne    c60 <printf+0x101>$/;"	l
c55	mkdir.asm	/^ c55:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
c55	rm.asm	/^ c55:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
c55	zombie.asm	/^ c55:	eb 45                	jmp    c9c <printf+0x193>$/;"	l
c56	cat.asm	/^ c56:	0f be c0             	movsbl %al,%eax$/;"	l
c56	kill.asm	/^ c56:	0f be c0             	movsbl %al,%eax$/;"	l
c56	wc.asm	/^     c56:	89 d0                	mov    %edx,%eax$/;"	l
c57	grep.asm	/^     c57:	c3                   	ret    $/;"	l
c57	ln.asm	/^ c57:	c7 45 f4 52 0f 00 00 	movl   $0xf52,-0xc(%ebp)$/;"	l
c57	sh.asm	/^     c57:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
c57	stressfs.asm	/^     c57:	74 10                	je     c69 <printint+0x88>$/;"	l
c57	zombie.asm	/^ c57:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
c58	cs550_user.asm	/^     c58:	b8 4e 0c 00 00       	mov    $0xc4e,%eax$/;"	l
c58	echo.asm	/^ c58:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c58	grep.asm	/^     c58:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c58	ls.asm	/^     c58:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c58	wc.asm	/^     c58:	0f b6 80 30 13 00 00 	movzbl 0x1330(%eax),%eax$/;"	l
c59	cat.asm	/^ c59:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c59	kill.asm	/^ c59:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c59	ls.asm	/^     c59:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c59	mkdir.asm	/^ c59:	75 45                	jne    ca0 <printf+0x12b>$/;"	l
c59	rm.asm	/^ c59:	75 45                	jne    ca0 <printf+0x12b>$/;"	l
c59	stressfs.asm	/^     c59:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c5a	init.asm	/^ c5a:	e9 30 01 00 00       	jmp    d8f <printf+0x19a>$/;"	l
c5a	ls.asm	/^     c5a:	33 36                	xor    (%esi),%esi$/;"	l
c5a	sh.asm	/^     c5a:	83 c2 08             	add    $0x8,%edx$/;"	l
c5b	echo.asm	/^ c5b:	0f be c0             	movsbl %al,%eax$/;"	l
c5b	mkdir.asm	/^ c5b:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c5b	rm.asm	/^ c5b:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c5b	zombie.asm	/^ c5b:	75 17                	jne    c74 <printf+0x16b>$/;"	l
c5c	stressfs.asm	/^     c5c:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
c5d	cat.asm	/^ c5d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c5d	cs550_user.asm	/^     c5d:	cd 42                	int    $0x42$/;"	l
c5d	grep.asm	/^     c5d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c5d	kill.asm	/^ c5d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c5d	ls.asm	/^     c5d:	b8 53 0c 00 00       	mov    $0xc53,%eax$/;"	l
c5d	sh.asm	/^     c5d:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax$/;"	l
c5d	zombie.asm	/^ c5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c5e	echo.asm	/^ c5e:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c5e	grep.asm	/^     c5e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c5e	ln.asm	/^ c5e:	eb 1e                	jmp    c7e <printf+0x11f>$/;"	l
c5e	mkdir.asm	/^ c5e:	8b 00                	mov    (%eax),%eax$/;"	l
c5e	rm.asm	/^ c5e:	8b 00                	mov    (%eax),%eax$/;"	l
c5f	cs550_user.asm	/^     c5f:	c3                   	ret    $/;"	l
c5f	grep.asm	/^     c5f:	33 36                	xor    (%esi),%esi$/;"	l
c5f	init.asm	/^ c5f:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
c5f	stressfs.asm	/^     c5f:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
c5f	wc.asm	/^     c5f:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
c6	echo.asm	/^  c6:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
c6	forktest.asm	/^  c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
c6	stressfs.asm	/^      c6:	00 $/;"	l
c6	zombie.asm	/^  c6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
c60	cat.asm	/^ c60:	89 04 24             	mov    %eax,(%esp)$/;"	l
c60	cs550_user.asm	/^     c60:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c60	kill.asm	/^ c60:	89 04 24             	mov    %eax,(%esp)$/;"	l
c60	ln.asm	/^ c60:	eb 1c                	jmp    c7e <printf+0x11f>$/;"	l
c60	mkdir.asm	/^ c60:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
c60	rm.asm	/^ c60:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
c60	zombie.asm	/^ c60:	0f be c0             	movsbl %al,%eax$/;"	l
c61	sh.asm	/^     c61:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
c62	echo.asm	/^ c62:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c62	grep.asm	/^     c62:	b8 58 0c 00 00       	mov    $0xc58,%eax$/;"	l
c62	ln.asm	/^ c62:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c62	ls.asm	/^     c62:	cd 42                	int    $0x42$/;"	l
c62	stressfs.asm	/^     c62:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
c63	cat.asm	/^ c63:	e8 bb fe ff ff       	call   b23 <putc>$/;"	l
c63	init.asm	/^ c63:	0f 85 26 01 00 00    	jne    d8f <printf+0x19a>$/;"	l
c63	kill.asm	/^ c63:	e8 05 fe ff ff       	call   a6d <putc>$/;"	l
c63	mkdir.asm	/^ c63:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c63	rm.asm	/^ c63:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c63	wc.asm	/^     c63:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
c63	zombie.asm	/^ c63:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c64	ls.asm	/^     c64:	c3                   	ret    $/;"	l
c64	sh.asm	/^     c64:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
c65	cs550_user.asm	/^     c65:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c65	echo.asm	/^ c65:	89 04 24             	mov    %eax,(%esp)$/;"	l
c65	ln.asm	/^ c65:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c65	ls.asm	/^     c65:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c66	cs550_user.asm	/^     c66:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c66	wc.asm	/^     c66:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c67	cs550_user.asm	/^     c67:	34 34                	xor    $0x34,%al$/;"	l
c67	grep.asm	/^     c67:	cd 42                	int    $0x42$/;"	l
c67	mkdir.asm	/^ c67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
c67	rm.asm	/^ c67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
c67	stressfs.asm	/^     c67:	eb 1f                	jmp    c88 <printint+0xa7>$/;"	l
c67	zombie.asm	/^ c67:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c68	cat.asm	/^ c68:	e9 30 01 00 00       	jmp    d9d <printf+0x19a>$/;"	l
c68	echo.asm	/^ c68:	e8 05 fe ff ff       	call   a72 <putc>$/;"	l
c68	kill.asm	/^ c68:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
c68	ln.asm	/^ c68:	0f be c0             	movsbl %al,%eax$/;"	l
c68	sh.asm	/^     c68:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c69	grep.asm	/^     c69:	c3                   	ret    $/;"	l
c69	init.asm	/^ c69:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
c69	stressfs.asm	/^     c69:	eb 1d                	jmp    c88 <printint+0xa7>$/;"	l
c69	wc.asm	/^     c69:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
c6a	cs550_user.asm	/^     c6a:	b8 60 0c 00 00       	mov    $0xc60,%eax$/;"	l
c6a	grep.asm	/^     c6a:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c6a	ls.asm	/^     c6a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c6a	zombie.asm	/^ c6a:	89 04 24             	mov    %eax,(%esp)$/;"	l
c6b	ln.asm	/^ c6b:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c6b	ls.asm	/^     c6b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c6b	mkdir.asm	/^ c6b:	75 09                	jne    c76 <printf+0x101>$/;"	l
c6b	rm.asm	/^ c6b:	75 09                	jne    c76 <printf+0x101>$/;"	l
c6b	sh.asm	/^     c6b:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
c6b	stressfs.asm	/^     c6b:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
c6c	kill.asm	/^ c6c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c6c	ls.asm	/^     c6c:	33 37                	xor    (%edi),%esi$/;"	l
c6d	cat.asm	/^ c6d:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
c6d	echo.asm	/^ c6d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
c6d	init.asm	/^ c6d:	75 2d                	jne    c9c <printf+0xa7>$/;"	l
c6d	mkdir.asm	/^ c6d:	c7 45 f4 74 0f 00 00 	movl   $0xf74,-0xc(%ebp)$/;"	l
c6d	rm.asm	/^ c6d:	c7 45 f4 6e 0f 00 00 	movl   $0xf6e,-0xc(%ebp)$/;"	l
c6d	zombie.asm	/^ c6d:	e8 b7 fd ff ff       	call   a29 <putc>$/;"	l
c6e	sh.asm	/^     c6e:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax$/;"	l
c6e	stressfs.asm	/^     c6e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c6e	wc.asm	/^     c6e:	f7 f6                	div    %esi$/;"	l
c6f	cs550_user.asm	/^     c6f:	cd 42                	int    $0x42$/;"	l
c6f	grep.asm	/^     c6f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c6f	init.asm	/^ c6f:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c6f	kill.asm	/^ c6f:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c6f	ln.asm	/^ c6f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c6f	ls.asm	/^     c6f:	b8 65 0c 00 00       	mov    $0xc65,%eax$/;"	l
c7	ln.asm	/^  c7:	75 e2                	jne    ab <strcpy+0xd>$/;"	l
c7	ls.asm	/^      c7:	89 04 24             	mov    %eax,(%esp)$/;"	l
c7	mkdir.asm	/^  c7:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
c7	rm.asm	/^  c7:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
c7	stressfs.asm	/^      c7:	8d 84 24 1e 02 00 00 	lea    0x21e(%esp),%eax$/;"	l
c7	wc.asm	/^      c7:	e8 f3 0b 00 00       	call   cbf <printf>$/;"	l
c70	grep.asm	/^     c70:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c70	wc.asm	/^     c70:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
c71	cat.asm	/^ c71:	0f 85 26 01 00 00    	jne    d9d <printf+0x19a>$/;"	l
c71	cs550_user.asm	/^     c71:	c3                   	ret    $/;"	l
c71	echo.asm	/^ c71:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c71	grep.asm	/^     c71:	33 37                	xor    (%edi),%esi$/;"	l
c71	stressfs.asm	/^     c71:	01 d0                	add    %edx,%eax$/;"	l
c72	cs550_user.asm	/^     c72:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c72	init.asm	/^ c72:	8b 00                	mov    (%eax),%eax$/;"	l
c72	kill.asm	/^ c72:	84 c0                	test   %al,%al$/;"	l
c72	ln.asm	/^ c72:	89 04 24             	mov    %eax,(%esp)$/;"	l
c72	sh.asm	/^     c72:	85 c0                	test   %eax,%eax$/;"	l
c72	zombie.asm	/^ c72:	eb 28                	jmp    c9c <printf+0x193>$/;"	l
c73	stressfs.asm	/^     c73:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c73	wc.asm	/^     c73:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
c74	echo.asm	/^ c74:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c74	grep.asm	/^     c74:	b8 6a 0c 00 00       	mov    $0xc6a,%eax$/;"	l
c74	init.asm	/^ c74:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
c74	kill.asm	/^ c74:	75 da                	jne    c50 <printf+0x103>$/;"	l
c74	ls.asm	/^     c74:	cd 42                	int    $0x42$/;"	l
c74	mkdir.asm	/^ c74:	eb 1e                	jmp    c94 <printf+0x11f>$/;"	l
c74	rm.asm	/^ c74:	eb 1e                	jmp    c94 <printf+0x11f>$/;"	l
c74	sh.asm	/^     c74:	75 de                	jne    c54 <nulterminate+0x3c>$/;"	l
c74	zombie.asm	/^ c74:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
c75	ln.asm	/^ c75:	e8 05 fe ff ff       	call   a7f <putc>$/;"	l
c76	kill.asm	/^ c76:	eb 68                	jmp    ce0 <printf+0x193>$/;"	l
c76	ls.asm	/^     c76:	c3                   	ret    $/;"	l
c76	mkdir.asm	/^ c76:	eb 1c                	jmp    c94 <printf+0x11f>$/;"	l
c76	rm.asm	/^ c76:	eb 1c                	jmp    c94 <printf+0x11f>$/;"	l
c76	sh.asm	/^     c76:	eb 7c                	jmp    cf4 <nulterminate+0xdc>$/;"	l
c76	stressfs.asm	/^     c76:	0f be c0             	movsbl %al,%eax$/;"	l
c77	cat.asm	/^ c77:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
c77	cs550_user.asm	/^     c77:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c77	echo.asm	/^ c77:	84 c0                	test   %al,%al$/;"	l
c77	ls.asm	/^     c77:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c77	wc.asm	/^     c77:	75 c7                	jne    c40 <printint+0x39>$/;"	l
c78	cs550_user.asm	/^     c78:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c78	kill.asm	/^ c78:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
c78	mkdir.asm	/^ c78:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c78	rm.asm	/^ c78:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c78	sh.asm	/^     c78:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c79	cs550_user.asm	/^     c79:	34 35                	xor    $0x35,%al$/;"	l
c79	echo.asm	/^ c79:	75 da                	jne    c55 <printf+0x103>$/;"	l
c79	grep.asm	/^     c79:	cd 42                	int    $0x42$/;"	l
c79	stressfs.asm	/^     c79:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c79	wc.asm	/^     c79:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
c7a	ln.asm	/^ c7a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
c7b	cat.asm	/^ c7b:	75 2d                	jne    caa <printf+0xa7>$/;"	l
c7b	echo.asm	/^ c7b:	eb 68                	jmp    ce5 <printf+0x193>$/;"	l
c7b	grep.asm	/^     c7b:	c3                   	ret    $/;"	l
c7b	init.asm	/^ c7b:	00 $/;"	l
c7b	mkdir.asm	/^ c7b:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c7b	rm.asm	/^ c7b:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c7b	sh.asm	/^     c7b:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
c7b	zombie.asm	/^ c7b:	00 $/;"	l
c7c	cs550_user.asm	/^     c7c:	b8 72 0c 00 00       	mov    $0xc72,%eax$/;"	l
c7c	grep.asm	/^     c7c:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c7c	init.asm	/^ c7c:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
c7c	kill.asm	/^ c7c:	75 1d                	jne    c9b <printf+0x14e>$/;"	l
c7c	ls.asm	/^     c7c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c7c	zombie.asm	/^ c7c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c7d	cat.asm	/^ c7d:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c7d	echo.asm	/^ c7d:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
c7d	ls.asm	/^     c7d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c7d	stressfs.asm	/^     c7d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c7d	wc.asm	/^     c7d:	74 10                	je     c8f <printint+0x88>$/;"	l
c7e	kill.asm	/^ c7e:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c7e	ln.asm	/^ c7e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c7e	ls.asm	/^     c7e:	33 38                	xor    (%eax),%edi$/;"	l
c7e	mkdir.asm	/^ c7e:	0f be c0             	movsbl %al,%eax$/;"	l
c7e	rm.asm	/^ c7e:	0f be c0             	movsbl %al,%eax$/;"	l
c7e	sh.asm	/^     c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c7f	wc.asm	/^     c7f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c7f	zombie.asm	/^ c7f:	89 04 24             	mov    %eax,(%esp)$/;"	l
c8	cs550_user.asm	/^      c8:	89 c8                	mov    %ecx,%eax$/;"	l
c8	grep.asm	/^      c8:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c8	init.asm	/^  c8:	00 $/;"	l
c80	cat.asm	/^ c80:	8b 00                	mov    (%eax),%eax$/;"	l
c80	stressfs.asm	/^     c80:	89 04 24             	mov    %eax,(%esp)$/;"	l
c81	cs550_user.asm	/^     c81:	cd 42                	int    $0x42$/;"	l
c81	echo.asm	/^ c81:	75 1d                	jne    ca0 <printf+0x14e>$/;"	l
c81	grep.asm	/^     c81:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c81	kill.asm	/^ c81:	8b 00                	mov    (%eax),%eax$/;"	l
c81	ln.asm	/^ c81:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c81	ls.asm	/^     c81:	b8 77 0c 00 00       	mov    $0xc77,%eax$/;"	l
c81	mkdir.asm	/^ c81:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c81	rm.asm	/^ c81:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c81	sh.asm	/^     c81:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
c82	cat.asm	/^ c82:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
c82	grep.asm	/^     c82:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c82	wc.asm	/^     c82:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
c82	zombie.asm	/^ c82:	e8 a2 fd ff ff       	call   a29 <putc>$/;"	l
c83	cs550_user.asm	/^     c83:	c3                   	ret    $/;"	l
c83	echo.asm	/^ c83:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c83	grep.asm	/^     c83:	33 38                	xor    (%eax),%edi$/;"	l
c83	init.asm	/^ c83:	00 $/;"	l
c83	kill.asm	/^ c83:	0f be c0             	movsbl %al,%eax$/;"	l
c83	stressfs.asm	/^     c83:	e8 31 ff ff ff       	call   bb9 <putc>$/;"	l
c84	cs550_user.asm	/^     c84:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c84	init.asm	/^ c84:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c84	ln.asm	/^ c84:	84 c0                	test   %al,%al$/;"	l
c84	sh.asm	/^     c84:	89 04 24             	mov    %eax,(%esp)$/;"	l
c85	mkdir.asm	/^ c85:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c85	rm.asm	/^ c85:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c85	wc.asm	/^     c85:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
c86	echo.asm	/^ c86:	8b 00                	mov    (%eax),%eax$/;"	l
c86	grep.asm	/^     c86:	b8 7c 0c 00 00       	mov    $0xc7c,%eax$/;"	l
c86	kill.asm	/^ c86:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c86	ln.asm	/^ c86:	75 da                	jne    c62 <printf+0x103>$/;"	l
c86	ls.asm	/^     c86:	cd 42                	int    $0x42$/;"	l
c87	sh.asm	/^     c87:	e8 8c ff ff ff       	call   c18 <nulterminate>$/;"	l
c87	zombie.asm	/^ c87:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c88	echo.asm	/^ c88:	0f be c0             	movsbl %al,%eax$/;"	l
c88	init.asm	/^ c88:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c88	ln.asm	/^ c88:	eb 68                	jmp    cf2 <printf+0x193>$/;"	l
c88	ls.asm	/^     c88:	c3                   	ret    $/;"	l
c88	mkdir.asm	/^ c88:	89 04 24             	mov    %eax,(%esp)$/;"	l
c88	rm.asm	/^ c88:	89 04 24             	mov    %eax,(%esp)$/;"	l
c88	stressfs.asm	/^     c88:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
c88	wc.asm	/^     c88:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
c89	cat.asm	/^ c89:	00 $/;"	l
c89	cs550_user.asm	/^     c89:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c89	ls.asm	/^     c89:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c8a	cat.asm	/^ c8a:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
c8a	cs550_user.asm	/^     c8a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c8a	kill.asm	/^ c8a:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c8a	ln.asm	/^ c8a:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
c8a	zombie.asm	/^ c8a:	0f be c0             	movsbl %al,%eax$/;"	l
c8b	cs550_user.asm	/^     c8b:	34 36                	xor    $0x36,%al$/;"	l
c8b	echo.asm	/^ c8b:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c8b	grep.asm	/^     c8b:	cd 42                	int    $0x42$/;"	l
c8b	init.asm	/^ c8b:	89 04 24             	mov    %eax,(%esp)$/;"	l
c8b	mkdir.asm	/^ c8b:	e8 05 fe ff ff       	call   a95 <putc>$/;"	l
c8b	rm.asm	/^ c8b:	e8 05 fe ff ff       	call   a95 <putc>$/;"	l
c8c	sh.asm	/^     c8c:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c8c	stressfs.asm	/^     c8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
c8d	grep.asm	/^     c8d:	c3                   	ret    $/;"	l
c8d	kill.asm	/^ c8d:	89 04 24             	mov    %eax,(%esp)$/;"	l
c8d	wc.asm	/^     c8d:	eb 1f                	jmp    cae <printint+0xa7>$/;"	l
c8d	zombie.asm	/^ c8d:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c8e	cs550_user.asm	/^     c8e:	b8 84 0c 00 00       	mov    $0xc84,%eax$/;"	l
c8e	grep.asm	/^     c8e:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c8e	init.asm	/^ c8e:	e8 aa fe ff ff       	call   b3d <printint>$/;"	l
c8e	ln.asm	/^ c8e:	75 1d                	jne    cad <printf+0x14e>$/;"	l
c8e	ls.asm	/^     c8e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c8f	echo.asm	/^ c8f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c8f	ls.asm	/^     c8f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c8f	sh.asm	/^     c8f:	8b 40 0c             	mov    0xc(%eax),%eax$/;"	l
c8f	wc.asm	/^     c8f:	eb 1d                	jmp    cae <printint+0xa7>$/;"	l
c9	init.asm	/^  c9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c9	kill.asm	/^  c9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c9	ln.asm	/^  c9:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c9	sh.asm	/^      c9:	e8 11 17 00 00       	call   17df <printf>$/;"	l
c90	kill.asm	/^ c90:	e8 d8 fd ff ff       	call   a6d <putc>$/;"	l
c90	ln.asm	/^ c90:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c90	ls.asm	/^     c90:	33 39                	xor    (%ecx),%edi$/;"	l
c90	mkdir.asm	/^ c90:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
c90	rm.asm	/^ c90:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
c90	stressfs.asm	/^     c90:	79 d9                	jns    c6b <printint+0x8a>$/;"	l
c91	cat.asm	/^ c91:	00 $/;"	l
c91	wc.asm	/^     c91:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
c91	zombie.asm	/^ c91:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c92	cat.asm	/^ c92:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c92	echo.asm	/^ c92:	89 04 24             	mov    %eax,(%esp)$/;"	l
c92	sh.asm	/^     c92:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
c92	stressfs.asm	/^     c92:	83 c4 30             	add    $0x30,%esp$/;"	l
c93	cs550_user.asm	/^     c93:	cd 42                	int    $0x42$/;"	l
c93	grep.asm	/^     c93:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c93	init.asm	/^ c93:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c93	ln.asm	/^ c93:	8b 00                	mov    (%eax),%eax$/;"	l
c93	ls.asm	/^     c93:	b8 89 0c 00 00       	mov    $0xc89,%eax$/;"	l
c94	grep.asm	/^     c94:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c94	mkdir.asm	/^ c94:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c94	rm.asm	/^ c94:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c94	wc.asm	/^     c94:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c94	zombie.asm	/^ c94:	89 04 24             	mov    %eax,(%esp)$/;"	l
c95	cs550_user.asm	/^     c95:	c3                   	ret    $/;"	l
c95	echo.asm	/^ c95:	e8 d8 fd ff ff       	call   a72 <putc>$/;"	l
c95	grep.asm	/^     c95:	33 39                	xor    (%ecx),%edi$/;"	l
c95	kill.asm	/^ c95:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c95	ln.asm	/^ c95:	0f be c0             	movsbl %al,%eax$/;"	l
c95	sh.asm	/^     c95:	eb 5d                	jmp    cf4 <nulterminate+0xdc>$/;"	l
c95	stressfs.asm	/^     c95:	5b                   	pop    %ebx$/;"	l
c96	cat.asm	/^ c96:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c96	cs550_user.asm	/^     c96:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c96	stressfs.asm	/^     c96:	5e                   	pop    %esi$/;"	l
c97	init.asm	/^ c97:	e9 ec 00 00 00       	jmp    d88 <printf+0x193>$/;"	l
c97	mkdir.asm	/^ c97:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c97	rm.asm	/^ c97:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c97	sh.asm	/^     c97:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c97	stressfs.asm	/^     c97:	5d                   	pop    %ebp$/;"	l
c97	wc.asm	/^     c97:	01 d0                	add    %edx,%eax$/;"	l
c97	zombie.asm	/^ c97:	e8 8d fd ff ff       	call   a29 <putc>$/;"	l
c98	grep.asm	/^     c98:	b8 8e 0c 00 00       	mov    $0xc8e,%eax$/;"	l
c98	ln.asm	/^ c98:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c98	ls.asm	/^     c98:	cd 42                	int    $0x42$/;"	l
c98	stressfs.asm	/^     c98:	c3                   	ret    $/;"	l
c99	cat.asm	/^ c99:	89 04 24             	mov    %eax,(%esp)$/;"	l
c99	kill.asm	/^ c99:	eb 45                	jmp    ce0 <printf+0x193>$/;"	l
c99	stressfs.asm	/^     c99:	55                   	push   %ebp$/;"	l
c99	wc.asm	/^     c99:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c9a	echo.asm	/^ c9a:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
c9a	ls.asm	/^     c9a:	c3                   	ret    $/;"	l
c9a	mkdir.asm	/^ c9a:	84 c0                	test   %al,%al$/;"	l
c9a	rm.asm	/^ c9a:	84 c0                	test   %al,%al$/;"	l
c9a	sh.asm	/^     c9a:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
c9a	stressfs.asm	/^     c9a:	89 e5                	mov    %esp,%ebp$/;"	l
c9b	cs550_user.asm	/^     c9b:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c9b	kill.asm	/^ c9b:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
c9b	ls.asm	/^     c9b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
c9c	cat.asm	/^ c9c:	e8 aa fe ff ff       	call   b4b <printint>$/;"	l
c9c	cs550_user.asm	/^     c9c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
c9c	init.asm	/^ c9c:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
c9c	ln.asm	/^ c9c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c9c	mkdir.asm	/^ c9c:	75 da                	jne    c78 <printf+0x103>$/;"	l
c9c	rm.asm	/^ c9c:	75 da                	jne    c78 <printf+0x103>$/;"	l
c9c	stressfs.asm	/^     c9c:	83 ec 38             	sub    $0x38,%esp$/;"	l
c9c	wc.asm	/^     c9c:	0f be c0             	movsbl %al,%eax$/;"	l
c9c	zombie.asm	/^ c9c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
c9d	cs550_user.asm	/^     c9d:	34 37                	xor    $0x37,%al$/;"	l
c9d	grep.asm	/^     c9d:	cd 42                	int    $0x42$/;"	l
c9d	sh.asm	/^     c9d:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c9e	echo.asm	/^ c9e:	eb 45                	jmp    ce5 <printf+0x193>$/;"	l
c9e	mkdir.asm	/^ c9e:	eb 68                	jmp    d08 <printf+0x193>$/;"	l
c9e	rm.asm	/^ c9e:	eb 68                	jmp    d08 <printf+0x193>$/;"	l
c9f	grep.asm	/^     c9f:	c3                   	ret    $/;"	l
c9f	kill.asm	/^ c9f:	75 17                	jne    cb8 <printf+0x16b>$/;"	l
c9f	ln.asm	/^ c9f:	89 04 24             	mov    %eax,(%esp)$/;"	l
c9f	stressfs.asm	/^     c9f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
c9f	wc.asm	/^     c9f:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ca	cat.asm	/^  ca:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ca	cs550_user.asm	/^      ca:	c1 f8 1f             	sar    $0x1f,%eax$/;"	l
ca	echo.asm	/^  ca:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ca	forktest.asm	/^  ca:	7f d4                	jg     a0 <forktest+0x77>$/;"	l
ca	ls.asm	/^      ca:	e8 34 05 00 00       	call   603 <open>$/;"	l
ca	mkdir.asm	/^  ca:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
ca	rm.asm	/^  ca:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
ca	zombie.asm	/^  ca:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
ca0	cs550_user.asm	/^     ca0:	b8 96 0c 00 00       	mov    $0xc96,%eax$/;"	l
ca0	echo.asm	/^ ca0:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
ca0	grep.asm	/^     ca0:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ca0	init.asm	/^ ca0:	74 06                	je     ca8 <printf+0xb3>$/;"	l
ca0	ls.asm	/^     ca0:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ca0	mkdir.asm	/^ ca0:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
ca0	rm.asm	/^ ca0:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
ca0	sh.asm	/^     ca0:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ca1	cat.asm	/^ ca1:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
ca1	kill.asm	/^ ca1:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
ca1	ls.asm	/^     ca1:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ca2	init.asm	/^ ca2:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
ca2	ln.asm	/^ ca2:	e8 d8 fd ff ff       	call   a7f <putc>$/;"	l
ca2	ls.asm	/^     ca2:	34 30                	xor    $0x30,%al$/;"	l
ca3	sh.asm	/^     ca3:	89 04 24             	mov    %eax,(%esp)$/;"	l
ca3	wc.asm	/^     ca3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ca3	zombie.asm	/^ ca3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
ca4	echo.asm	/^ ca4:	75 17                	jne    cbd <printf+0x16b>$/;"	l
ca4	kill.asm	/^ ca4:	0f be c0             	movsbl %al,%eax$/;"	l
ca4	mkdir.asm	/^ ca4:	75 1d                	jne    cc3 <printf+0x14e>$/;"	l
ca4	rm.asm	/^ ca4:	75 1d                	jne    cc3 <printf+0x14e>$/;"	l
ca5	cat.asm	/^ ca5:	e9 ec 00 00 00       	jmp    d96 <printf+0x193>$/;"	l
ca5	cs550_user.asm	/^     ca5:	cd 42                	int    $0x42$/;"	l
ca5	grep.asm	/^     ca5:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ca5	ls.asm	/^     ca5:	b8 9b 0c 00 00       	mov    $0xc9b,%eax$/;"	l
ca6	echo.asm	/^ ca6:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
ca6	grep.asm	/^     ca6:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ca6	init.asm	/^ ca6:	75 2d                	jne    cd5 <printf+0xe0>$/;"	l
ca6	mkdir.asm	/^ ca6:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
ca6	rm.asm	/^ ca6:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
ca6	sh.asm	/^     ca6:	e8 6d ff ff ff       	call   c18 <nulterminate>$/;"	l
ca6	stressfs.asm	/^     ca6:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
ca6	wc.asm	/^     ca6:	89 04 24             	mov    %eax,(%esp)$/;"	l
ca7	cs550_user.asm	/^     ca7:	c3                   	ret    $/;"	l
ca7	grep.asm	/^     ca7:	34 30                	xor    $0x30,%al$/;"	l
ca7	kill.asm	/^ ca7:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ca7	ln.asm	/^ ca7:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
ca7	zombie.asm	/^ ca7:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
ca8	cs550_user.asm	/^     ca8:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ca8	init.asm	/^ ca8:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
ca9	echo.asm	/^ ca9:	0f be c0             	movsbl %al,%eax$/;"	l
ca9	mkdir.asm	/^ ca9:	8b 00                	mov    (%eax),%eax$/;"	l
ca9	rm.asm	/^ ca9:	8b 00                	mov    (%eax),%eax$/;"	l
ca9	stressfs.asm	/^     ca9:	83 c0 04             	add    $0x4,%eax$/;"	l
ca9	wc.asm	/^     ca9:	e8 31 ff ff ff       	call   bdf <putc>$/;"	l
caa	cat.asm	/^ caa:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
caa	grep.asm	/^     caa:	b8 a0 0c 00 00       	mov    $0xca0,%eax$/;"	l
caa	ls.asm	/^     caa:	cd 42                	int    $0x42$/;"	l
caa	zombie.asm	/^ caa:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
cab	init.asm	/^ cab:	8b 00                	mov    (%eax),%eax$/;"	l
cab	kill.asm	/^ cab:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cab	ln.asm	/^ cab:	eb 45                	jmp    cf2 <printf+0x193>$/;"	l
cab	mkdir.asm	/^ cab:	0f be c0             	movsbl %al,%eax$/;"	l
cab	rm.asm	/^ cab:	0f be c0             	movsbl %al,%eax$/;"	l
cab	sh.asm	/^     cab:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
cac	echo.asm	/^ cac:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cac	ls.asm	/^     cac:	c3                   	ret    $/;"	l
cac	stressfs.asm	/^     cac:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
cad	cs550_user.asm	/^     cad:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cad	init.asm	/^ cad:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
cad	ln.asm	/^ cad:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
cad	ls.asm	/^     cad:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
cad	zombie.asm	/^ cad:	01 d0                	add    %edx,%eax$/;"	l
cae	cat.asm	/^ cae:	74 06                	je     cb6 <printf+0xb3>$/;"	l
cae	cs550_user.asm	/^     cae:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cae	kill.asm	/^ cae:	89 04 24             	mov    %eax,(%esp)$/;"	l
cae	mkdir.asm	/^ cae:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cae	rm.asm	/^ cae:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cae	sh.asm	/^     cae:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
cae	wc.asm	/^     cae:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
caf	cs550_user.asm	/^     caf:	34 38                	xor    $0x38,%al$/;"	l
caf	grep.asm	/^     caf:	cd 42                	int    $0x42$/;"	l
caf	stressfs.asm	/^     caf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
caf	zombie.asm	/^ caf:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f
cat	cat.s	/^cat:$/;"	l
cb0	cat.asm	/^ cb0:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
cb0	echo.asm	/^ cb0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cb1	grep.asm	/^     cb1:	c3                   	ret    $/;"	l
cb1	kill.asm	/^ cb1:	e8 b7 fd ff ff       	call   a6d <putc>$/;"	l
cb1	ln.asm	/^ cb1:	75 17                	jne    cca <printf+0x16b>$/;"	l
cb1	sh.asm	/^     cb1:	89 04 24             	mov    %eax,(%esp)$/;"	l
cb2	cs550_user.asm	/^     cb2:	b8 a8 0c 00 00       	mov    $0xca8,%eax$/;"	l
cb2	grep.asm	/^     cb2:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
cb2	ls.asm	/^     cb2:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cb2	mkdir.asm	/^ cb2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cb2	rm.asm	/^ cb2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cb2	wc.asm	/^     cb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
cb2	zombie.asm	/^ cb2:	84 c0                	test   %al,%al$/;"	l
cb3	echo.asm	/^ cb3:	89 04 24             	mov    %eax,(%esp)$/;"	l
cb3	ln.asm	/^ cb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
cb3	ls.asm	/^     cb3:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cb4	cat.asm	/^ cb4:	75 2d                	jne    ce3 <printf+0xe0>$/;"	l
cb4	init.asm	/^ cb4:	00 $/;"	l
cb4	ls.asm	/^     cb4:	34 31                	xor    $0x31,%al$/;"	l
cb4	sh.asm	/^     cb4:	e8 5f ff ff ff       	call   c18 <nulterminate>$/;"	l
cb4	zombie.asm	/^ cb4:	0f 85 71 fe ff ff    	jne    b2b <printf+0x22>$/;"	l
cb5	init.asm	/^ cb5:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
cb5	mkdir.asm	/^ cb5:	89 04 24             	mov    %eax,(%esp)$/;"	l
cb5	rm.asm	/^ cb5:	89 04 24             	mov    %eax,(%esp)$/;"	l
cb6	cat.asm	/^ cb6:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
cb6	echo.asm	/^ cb6:	e8 b7 fd ff ff       	call   a72 <putc>$/;"	l
cb6	kill.asm	/^ cb6:	eb 28                	jmp    ce0 <printf+0x193>$/;"	l
cb6	ln.asm	/^ cb6:	0f be c0             	movsbl %al,%eax$/;"	l
cb6	stressfs.asm	/^     cb6:	e9 7c 01 00 00       	jmp    e37 <printf+0x19e>$/;"	l
cb6	wc.asm	/^     cb6:	79 d9                	jns    c91 <printint+0x8a>$/;"	l
cb7	cs550_user.asm	/^     cb7:	cd 42                	int    $0x42$/;"	l
cb7	grep.asm	/^     cb7:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cb7	ls.asm	/^     cb7:	b8 ad 0c 00 00       	mov    $0xcad,%eax$/;"	l
cb8	grep.asm	/^     cb8:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cb8	kill.asm	/^ cb8:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
cb8	mkdir.asm	/^ cb8:	e8 d8 fd ff ff       	call   a95 <putc>$/;"	l
cb8	rm.asm	/^ cb8:	e8 d8 fd ff ff       	call   a95 <putc>$/;"	l
cb8	wc.asm	/^     cb8:	83 c4 30             	add    $0x30,%esp$/;"	l
cb9	cat.asm	/^ cb9:	8b 00                	mov    (%eax),%eax$/;"	l
cb9	cs550_user.asm	/^     cb9:	c3                   	ret    $/;"	l
cb9	grep.asm	/^     cb9:	34 31                	xor    $0x31,%al$/;"	l
cb9	ln.asm	/^ cb9:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cb9	sh.asm	/^     cb9:	eb 39                	jmp    cf4 <nulterminate+0xdc>$/;"	l
cba	cs550_user.asm	/^     cba:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
cba	zombie.asm	/^ cba:	c9                   	leave  $/;"	l
cbb	cat.asm	/^ cbb:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
cbb	echo.asm	/^ cbb:	eb 28                	jmp    ce5 <printf+0x193>$/;"	l
cbb	sh.asm	/^     cbb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cbb	stressfs.asm	/^     cbb:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
cbb	wc.asm	/^     cbb:	5b                   	pop    %ebx$/;"	l
cbb	zombie.asm	/^ cbb:	c3                   	ret    $/;"	l
cbc	grep.asm	/^     cbc:	b8 b2 0c 00 00       	mov    $0xcb2,%eax$/;"	l
cbc	init.asm	/^ cbc:	00 $/;"	l
cbc	ls.asm	/^     cbc:	cd 42                	int    $0x42$/;"	l
cbc	wc.asm	/^     cbc:	5e                   	pop    %esi$/;"	l
cbc	zombie.asm	/^ cbc:	55                   	push   %ebp$/;"	l
cbd	echo.asm	/^ cbd:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
cbd	init.asm	/^ cbd:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cbd	ln.asm	/^ cbd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cbd	mkdir.asm	/^ cbd:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
cbd	rm.asm	/^ cbd:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
cbd	wc.asm	/^     cbd:	5d                   	pop    %ebp$/;"	l
cbd	zombie.asm	/^ cbd:	89 e5                	mov    %esp,%ebp$/;"	l
cbe	ls.asm	/^     cbe:	c3                   	ret    $/;"	l
cbe	sh.asm	/^     cbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
cbe	stressfs.asm	/^     cbe:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
cbe	wc.asm	/^     cbe:	c3                   	ret    $/;"	l
cbf	cs550_user.asm	/^     cbf:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cbf	kill.asm	/^ cbf:	00 $/;"	l
cbf	ls.asm	/^     cbf:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
cbf	wc.asm	/^     cbf:	55                   	push   %ebp$/;"	l
cbf	zombie.asm	/^ cbf:	83 ec 10             	sub    $0x10,%esp$/;"	l
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	cs550_user.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^  cc:	e8 b4 02 00 00       	call   385 <wait>$/;"	l
cc	grep.asm	/^      cc:	c7 04 24 60 15 00 00 	movl   $0x1560,(%esp)$/;"	l
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^  cc:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^  cc:	c9                   	leave  $/;"	l
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	wc.asm	/^      cc:	e8 70 03 00 00       	call   441 <exit>$/;"	l
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc0	cs550_user.asm	/^     cc0:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cc0	kill.asm	/^ cc0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cc0	ln.asm	/^ cc0:	89 04 24             	mov    %eax,(%esp)$/;"	l
cc0	wc.asm	/^     cc0:	89 e5                	mov    %esp,%ebp$/;"	l
cc1	cs550_user.asm	/^     cc1:	34 39                	xor    $0x39,%al$/;"	l
cc1	grep.asm	/^     cc1:	cd 42                	int    $0x42$/;"	l
cc1	init.asm	/^ cc1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cc1	mkdir.asm	/^ cc1:	eb 45                	jmp    d08 <printf+0x193>$/;"	l
cc1	rm.asm	/^ cc1:	eb 45                	jmp    d08 <printf+0x193>$/;"	l
cc1	sh.asm	/^     cc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
cc1	stressfs.asm	/^     cc1:	01 d0                	add    %edx,%eax$/;"	l
cc2	cat.asm	/^ cc2:	00 $/;"	l
cc2	wc.asm	/^     cc2:	83 ec 38             	sub    $0x38,%esp$/;"	l
cc2	zombie.asm	/^ cc2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cc3	cat.asm	/^ cc3:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
cc3	grep.asm	/^     cc3:	c3                   	ret    $/;"	l
cc3	kill.asm	/^ cc3:	89 04 24             	mov    %eax,(%esp)$/;"	l
cc3	ln.asm	/^ cc3:	e8 b7 fd ff ff       	call   a7f <putc>$/;"	l
cc3	mkdir.asm	/^ cc3:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
cc3	rm.asm	/^ cc3:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
cc3	stressfs.asm	/^     cc3:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cc4	cs550_user.asm	/^     cc4:	b8 ba 0c 00 00       	mov    $0xcba,%eax$/;"	l
cc4	echo.asm	/^ cc4:	00 $/;"	l
cc4	grep.asm	/^     cc4:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
cc4	init.asm	/^ cc4:	89 04 24             	mov    %eax,(%esp)$/;"	l
cc4	ls.asm	/^     cc4:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cc4	sh.asm	/^     cc4:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
cc5	echo.asm	/^ cc5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cc5	ls.asm	/^     cc5:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cc5	wc.asm	/^     cc5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
cc5	zombie.asm	/^ cc5:	83 e8 08             	sub    $0x8,%eax$/;"	l
cc6	kill.asm	/^ cc6:	e8 a2 fd ff ff       	call   a6d <putc>$/;"	l
cc6	ls.asm	/^     cc6:	34 32                	xor    $0x32,%al$/;"	l
cc6	stressfs.asm	/^     cc6:	0f be c0             	movsbl %al,%eax$/;"	l
cc7	init.asm	/^ cc7:	e8 71 fe ff ff       	call   b3d <printint>$/;"	l
cc7	mkdir.asm	/^ cc7:	75 17                	jne    ce0 <printf+0x16b>$/;"	l
cc7	rm.asm	/^ cc7:	75 17                	jne    ce0 <printf+0x16b>$/;"	l
cc7	sh.asm	/^     cc7:	89 04 24             	mov    %eax,(%esp)$/;"	l
cc8	echo.asm	/^ cc8:	89 04 24             	mov    %eax,(%esp)$/;"	l
cc8	ln.asm	/^ cc8:	eb 28                	jmp    cf2 <printf+0x193>$/;"	l
cc8	zombie.asm	/^ cc8:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
cc9	cs550_user.asm	/^     cc9:	cd 42                	int    $0x42$/;"	l
cc9	grep.asm	/^     cc9:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cc9	ls.asm	/^     cc9:	b8 bf 0c 00 00       	mov    $0xcbf,%eax$/;"	l
cc9	mkdir.asm	/^ cc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
cc9	rm.asm	/^ cc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
cc9	stressfs.asm	/^     cc9:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
cca	cat.asm	/^ cca:	00 $/;"	l
cca	grep.asm	/^     cca:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cca	ln.asm	/^ cca:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
cca	sh.asm	/^     cca:	e8 49 ff ff ff       	call   c18 <nulterminate>$/;"	l
ccb	cat.asm	/^ ccb:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ccb	cs550_user.asm	/^     ccb:	c3                   	ret    $/;"	l
ccb	echo.asm	/^ ccb:	e8 a2 fd ff ff       	call   a72 <putc>$/;"	l
ccb	grep.asm	/^     ccb:	34 32                	xor    $0x32,%al$/;"	l
ccb	kill.asm	/^ ccb:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
ccb	zombie.asm	/^ ccb:	a1 3c 11 00 00       	mov    0x113c,%eax$/;"	l
ccc	cs550_user.asm	/^     ccc:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ccc	init.asm	/^ ccc:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
ccc	mkdir.asm	/^ ccc:	0f be c0             	movsbl %al,%eax$/;"	l
ccc	rm.asm	/^ ccc:	0f be c0             	movsbl %al,%eax$/;"	l
ccc	wc.asm	/^     ccc:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
cce	grep.asm	/^     cce:	b8 c4 0c 00 00       	mov    $0xcc4,%eax$/;"	l
cce	kill.asm	/^ cce:	0f be c0             	movsbl %al,%eax$/;"	l
cce	ls.asm	/^     cce:	cd 42                	int    $0x42$/;"	l
cce	stressfs.asm	/^     cce:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
ccf	cat.asm	/^ ccf:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ccf	mkdir.asm	/^ ccf:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ccf	rm.asm	/^ ccf:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ccf	sh.asm	/^     ccf:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
ccf	wc.asm	/^     ccf:	83 c0 04             	add    $0x4,%eax$/;"	l
cd	cat.asm	/^  cd:	01 d0                	add    %edx,%eax$/;"	l
cd	cs550_user.asm	/^      cd:	29 c2                	sub    %eax,%edx$/;"	l
cd	ln.asm	/^  cd:	c3                   	ret    $/;"	l
cd	mkdir.asm	/^  cd:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
cd	rm.asm	/^  cd:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
cd	zombie.asm	/^  cd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cd0	echo.asm	/^ cd0:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
cd0	init.asm	/^ cd0:	e9 b3 00 00 00       	jmp    d88 <printf+0x193>$/;"	l
cd0	ls.asm	/^     cd0:	c3                   	ret    $/;"	l
cd0	zombie.asm	/^ cd0:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
cd1	cs550_user.asm	/^     cd1:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cd1	kill.asm	/^ cd1:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cd1	ln.asm	/^ cd1:	00 $/;"	l
cd1	ls.asm	/^     cd1:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
cd1	stressfs.asm	/^     cd1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
cd2	cat.asm	/^ cd2:	89 04 24             	mov    %eax,(%esp)$/;"	l
cd2	cs550_user.asm	/^     cd2:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cd2	ln.asm	/^ cd2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cd2	sh.asm	/^     cd2:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
cd2	wc.asm	/^     cd2:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
cd3	cs550_user.asm	/^     cd3:	35 30 00 b8 cc       	xor    $0xccb80030,%eax$/;"	l
cd3	echo.asm	/^ cd3:	0f be c0             	movsbl %al,%eax$/;"	l
cd3	grep.asm	/^     cd3:	cd 42                	int    $0x42$/;"	l
cd3	mkdir.asm	/^ cd3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cd3	rm.asm	/^ cd3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cd3	zombie.asm	/^ cd3:	eb 24                	jmp    cf9 <free+0x3d>$/;"	l
cd5	cat.asm	/^ cd5:	e8 71 fe ff ff       	call   b4b <printint>$/;"	l
cd5	grep.asm	/^     cd5:	c3                   	ret    $/;"	l
cd5	init.asm	/^ cd5:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
cd5	kill.asm	/^ cd5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cd5	ln.asm	/^ cd5:	89 04 24             	mov    %eax,(%esp)$/;"	l
cd5	sh.asm	/^     cd5:	89 04 24             	mov    %eax,(%esp)$/;"	l
cd5	stressfs.asm	/^     cd5:	75 2c                	jne    d03 <printf+0x6a>$/;"	l
cd5	wc.asm	/^     cd5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
cd5	zombie.asm	/^ cd5:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
cd6	cs550_user.asm	/^     cd6:	b8 cc 0c 00 00       	mov    $0xccc,%eax$/;"	l
cd6	echo.asm	/^ cd6:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cd6	grep.asm	/^     cd6:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
cd6	ls.asm	/^     cd6:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cd6	mkdir.asm	/^ cd6:	89 04 24             	mov    %eax,(%esp)$/;"	l
cd6	rm.asm	/^ cd6:	89 04 24             	mov    %eax,(%esp)$/;"	l
cd7	ls.asm	/^     cd7:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cd7	stressfs.asm	/^     cd7:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
cd8	kill.asm	/^ cd8:	89 04 24             	mov    %eax,(%esp)$/;"	l
cd8	ln.asm	/^ cd8:	e8 a2 fd ff ff       	call   a7f <putc>$/;"	l
cd8	ls.asm	/^     cd8:	34 33                	xor    $0x33,%al$/;"	l
cd8	sh.asm	/^     cd8:	e8 3b ff ff ff       	call   c18 <nulterminate>$/;"	l
cd8	zombie.asm	/^ cd8:	8b 00                	mov    (%eax),%eax$/;"	l
cd9	init.asm	/^ cd9:	75 45                	jne    d20 <printf+0x12b>$/;"	l
cd9	mkdir.asm	/^ cd9:	e8 b7 fd ff ff       	call   a95 <putc>$/;"	l
cd9	rm.asm	/^ cd9:	e8 b7 fd ff ff       	call   a95 <putc>$/;"	l
cda	cat.asm	/^ cda:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
cda	echo.asm	/^ cda:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cda	zombie.asm	/^ cda:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
cdb	cs550_user.asm	/^     cdb:	cd 42                	int    $0x42$/;"	l
cdb	grep.asm	/^     cdb:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cdb	init.asm	/^ cdb:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
cdb	kill.asm	/^ cdb:	e8 8d fd ff ff       	call   a6d <putc>$/;"	l
cdb	ls.asm	/^     cdb:	b8 d1 0c 00 00       	mov    $0xcd1,%eax$/;"	l
cdb	stressfs.asm	/^     cdb:	75 0c                	jne    ce9 <printf+0x50>$/;"	l
cdc	grep.asm	/^     cdc:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cdc	wc.asm	/^     cdc:	e9 7c 01 00 00       	jmp    e5d <printf+0x19e>$/;"	l
cdd	cs550_user.asm	/^     cdd:	c3                   	ret    $/;"	l
cdd	echo.asm	/^ cdd:	89 04 24             	mov    %eax,(%esp)$/;"	l
cdd	grep.asm	/^     cdd:	34 33                	xor    $0x33,%al$/;"	l
cdd	ln.asm	/^ cdd:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
cdd	sh.asm	/^     cdd:	eb 15                	jmp    cf4 <nulterminate+0xdc>$/;"	l
cdd	stressfs.asm	/^     cdd:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
cdd	zombie.asm	/^ cdd:	77 12                	ja     cf1 <free+0x35>$/;"	l
cde	cat.asm	/^ cde:	e9 b3 00 00 00       	jmp    d96 <printf+0x193>$/;"	l
cde	cs550_user.asm	/^     cde:	55                   	push   %ebp$/;"	l
cde	init.asm	/^ cde:	8b 00                	mov    (%eax),%eax$/;"	l
cde	mkdir.asm	/^ cde:	eb 28                	jmp    d08 <printf+0x193>$/;"	l
cde	rm.asm	/^ cde:	eb 28                	jmp    d08 <printf+0x193>$/;"	l
cdf	cs550_user.asm	/^     cdf:	89 e5                	mov    %esp,%ebp$/;"	l
cdf	sh.asm	/^     cdf:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cdf	zombie.asm	/^ cdf:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ce	echo.asm	/^  ce:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ce	ln.asm	/^  ce:	55                   	push   %ebp$/;"	l
ce	sh.asm	/^      ce:	e8 8e 0e 00 00       	call   f61 <exit>$/;"	l
ce	stressfs.asm	/^      ce:	89 04 24             	mov    %eax,(%esp)$/;"	l
ce0	echo.asm	/^ ce0:	e8 8d fd ff ff       	call   a72 <putc>$/;"	l
ce0	grep.asm	/^     ce0:	b8 d6 0c 00 00       	mov    $0xcd6,%eax$/;"	l
ce0	init.asm	/^ ce0:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ce0	kill.asm	/^ ce0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
ce0	ln.asm	/^ ce0:	0f be c0             	movsbl %al,%eax$/;"	l
ce0	ls.asm	/^     ce0:	cd 42                	int    $0x42$/;"	l
ce0	mkdir.asm	/^ ce0:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
ce0	rm.asm	/^ ce0:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
ce1	cs550_user.asm	/^     ce1:	83 ec 18             	sub    $0x18,%esp$/;"	l
ce1	wc.asm	/^     ce1:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
ce2	ls.asm	/^     ce2:	c3                   	ret    $/;"	l
ce2	sh.asm	/^     ce2:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
ce2	zombie.asm	/^ ce2:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
ce3	cat.asm	/^ ce3:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
ce3	init.asm	/^ ce3:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
ce3	ln.asm	/^ ce3:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ce3	ls.asm	/^     ce3:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ce4	cs550_user.asm	/^     ce4:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ce4	stressfs.asm	/^     ce4:	e9 4a 01 00 00       	jmp    e33 <printf+0x19a>$/;"	l
ce4	wc.asm	/^     ce4:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ce5	echo.asm	/^ ce5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
ce5	grep.asm	/^     ce5:	cd 42                	int    $0x42$/;"	l
ce5	sh.asm	/^     ce5:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
ce5	zombie.asm	/^ ce5:	77 24                	ja     d0b <free+0x4f>$/;"	l
ce7	cat.asm	/^ ce7:	75 45                	jne    d2e <printf+0x12b>$/;"	l
ce7	cs550_user.asm	/^     ce7:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
ce7	grep.asm	/^     ce7:	c3                   	ret    $/;"	l
ce7	init.asm	/^ ce7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
ce7	kill.asm	/^ ce7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
ce7	ln.asm	/^ ce7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ce7	mkdir.asm	/^ ce7:	00 $/;"	l
ce7	rm.asm	/^ ce7:	00 $/;"	l
ce7	wc.asm	/^     ce7:	01 d0                	add    %edx,%eax$/;"	l
ce7	zombie.asm	/^ ce7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ce8	grep.asm	/^     ce8:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
ce8	ls.asm	/^     ce8:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ce8	mkdir.asm	/^ ce8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ce8	rm.asm	/^ ce8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ce8	sh.asm	/^     ce8:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ce9	cat.asm	/^ ce9:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
ce9	ls.asm	/^     ce9:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ce9	stressfs.asm	/^     ce9:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
ce9	wc.asm	/^     ce9:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cea	cs550_user.asm	/^     cea:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
cea	ln.asm	/^ cea:	89 04 24             	mov    %eax,(%esp)$/;"	l
cea	ls.asm	/^     cea:	34 34                	xor    $0x34,%al$/;"	l
cea	zombie.asm	/^ cea:	8b 00                	mov    (%eax),%eax$/;"	l
ceb	init.asm	/^ ceb:	75 09                	jne    cf6 <printf+0x101>$/;"	l
ceb	kill.asm	/^ ceb:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
ceb	mkdir.asm	/^ ceb:	89 04 24             	mov    %eax,(%esp)$/;"	l
ceb	rm.asm	/^ ceb:	89 04 24             	mov    %eax,(%esp)$/;"	l
ceb	sh.asm	/^     ceb:	89 04 24             	mov    %eax,(%esp)$/;"	l
cec	cat.asm	/^ cec:	8b 00                	mov    (%eax),%eax$/;"	l
cec	echo.asm	/^ cec:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
cec	stressfs.asm	/^     cec:	0f be c0             	movsbl %al,%eax$/;"	l
cec	wc.asm	/^     cec:	0f be c0             	movsbl %al,%eax$/;"	l
cec	zombie.asm	/^ cec:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
ced	grep.asm	/^     ced:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
ced	init.asm	/^ ced:	c7 45 f4 11 10 00 00 	movl   $0x1011,-0xc(%ebp)$/;"	l
ced	ln.asm	/^ ced:	e8 8d fd ff ff       	call   a7f <putc>$/;"	l
ced	ls.asm	/^     ced:	b8 e3 0c 00 00       	mov    $0xce3,%eax$/;"	l
cee	cat.asm	/^ cee:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
cee	grep.asm	/^     cee:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cee	kill.asm	/^ cee:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
cee	mkdir.asm	/^ cee:	e8 a2 fd ff ff       	call   a95 <putc>$/;"	l
cee	rm.asm	/^ cee:	e8 a2 fd ff ff       	call   a95 <putc>$/;"	l
cee	sh.asm	/^     cee:	e8 25 ff ff ff       	call   c18 <nulterminate>$/;"	l
cef	grep.asm	/^     cef:	34 34                	xor    $0x34,%al$/;"	l
cef	stressfs.asm	/^     cef:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cef	wc.asm	/^     cef:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
cef	zombie.asm	/^ cef:	77 1a                	ja     d0b <free+0x4f>$/;"	l
cf	cat.asm	/^  cf:	8b 00                	mov    (%eax),%eax$/;"	l
cf	cs550_user.asm	/^      cf:	89 d0                	mov    %edx,%eax$/;"	l
cf	kill.asm	/^  cf:	84 c0                	test   %al,%al$/;"	l
cf	ln.asm	/^  cf:	89 e5                	mov    %esp,%ebp$/;"	l
cf	ls.asm	/^      cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
cf0	echo.asm	/^ cf0:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
cf1	cat.asm	/^ cf1:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
cf1	cs550_user.asm	/^     cf1:	00 $/;"	l
cf1	kill.asm	/^ cf1:	01 d0                	add    %edx,%eax$/;"	l
cf1	zombie.asm	/^ cf1:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
cf2	cs550_user.asm	/^     cf2:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
cf2	grep.asm	/^     cf2:	b8 e8 0c 00 00       	mov    $0xce8,%eax$/;"	l
cf2	ln.asm	/^ cf2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
cf2	ls.asm	/^     cf2:	cd 42                	int    $0x42$/;"	l
cf3	echo.asm	/^ cf3:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
cf3	kill.asm	/^ cf3:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cf3	mkdir.asm	/^ cf3:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
cf3	rm.asm	/^ cf3:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
cf3	sh.asm	/^     cf3:	90                   	nop$/;"	l
cf3	stressfs.asm	/^     cf3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cf4	init.asm	/^ cf4:	eb 1e                	jmp    d14 <printf+0x11f>$/;"	l
cf4	ls.asm	/^     cf4:	c3                   	ret    $/;"	l
cf4	sh.asm	/^     cf4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cf4	wc.asm	/^     cf4:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
cf4	zombie.asm	/^ cf4:	8b 00                	mov    (%eax),%eax$/;"	l
cf5	cat.asm	/^ cf5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
cf5	cs550_user.asm	/^     cf5:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cf5	ls.asm	/^     cf5:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
cf6	echo.asm	/^ cf6:	01 d0                	add    %edx,%eax$/;"	l
cf6	init.asm	/^ cf6:	eb 1c                	jmp    d14 <printf+0x11f>$/;"	l
cf6	kill.asm	/^ cf6:	84 c0                	test   %al,%al$/;"	l
cf6	mkdir.asm	/^ cf6:	0f be c0             	movsbl %al,%eax$/;"	l
cf6	rm.asm	/^ cf6:	0f be c0             	movsbl %al,%eax$/;"	l
cf6	stressfs.asm	/^     cf6:	89 04 24             	mov    %eax,(%esp)$/;"	l
cf6	zombie.asm	/^ cf6:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
cf7	grep.asm	/^     cf7:	cd 42                	int    $0x42$/;"	l
cf7	sh.asm	/^     cf7:	c9                   	leave  $/;"	l
cf7	wc.asm	/^     cf7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
cf8	echo.asm	/^ cf8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cf8	init.asm	/^ cf8:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
cf8	kill.asm	/^ cf8:	0f 85 71 fe ff ff    	jne    b6f <printf+0x22>$/;"	l
cf8	sh.asm	/^     cf8:	c3                   	ret    $/;"	l
cf9	cat.asm	/^ cf9:	75 09                	jne    d04 <printf+0x101>$/;"	l
cf9	cs550_user.asm	/^     cf9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cf9	grep.asm	/^     cf9:	c3                   	ret    $/;"	l
cf9	ln.asm	/^ cf9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
cf9	mkdir.asm	/^ cf9:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cf9	rm.asm	/^ cf9:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cf9	sh.asm	/^     cf9:	55                   	push   %ebp$/;"	l
cf9	stressfs.asm	/^     cf9:	e8 bb fe ff ff       	call   bb9 <putc>$/;"	l
cf9	zombie.asm	/^ cf9:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
cfa	grep.asm	/^     cfa:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
cfa	ls.asm	/^     cfa:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cfa	sh.asm	/^     cfa:	89 e5                	mov    %esp,%ebp$/;"	l
cfb	cat.asm	/^ cfb:	c7 45 f4 f5 0f 00 00 	movl   $0xff5,-0xc(%ebp)$/;"	l
cfb	echo.asm	/^ cfb:	84 c0                	test   %al,%al$/;"	l
cfb	init.asm	/^ cfb:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cfb	ls.asm	/^     cfb:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cfb	wc.asm	/^     cfb:	75 2c                	jne    d29 <printf+0x6a>$/;"	l
cfc	cs550_user.asm	/^     cfc:	89 04 24             	mov    %eax,(%esp)$/;"	l
cfc	ls.asm	/^     cfc:	34 35                	xor    $0x35,%al$/;"	l
cfc	sh.asm	/^     cfc:	57                   	push   %edi$/;"	l
cfc	zombie.asm	/^ cfc:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
cfd	echo.asm	/^ cfd:	0f 85 71 fe ff ff    	jne    b74 <printf+0x22>$/;"	l
cfd	ln.asm	/^ cfd:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
cfd	mkdir.asm	/^ cfd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cfd	rm.asm	/^ cfd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cfd	sh.asm	/^     cfd:	53                   	push   %ebx$/;"	l
cfd	wc.asm	/^     cfd:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
cfe	init.asm	/^ cfe:	0f be c0             	movsbl %al,%eax$/;"	l
cfe	kill.asm	/^ cfe:	c9                   	leave  $/;"	l
cfe	sh.asm	/^     cfe:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
cfe	stressfs.asm	/^     cfe:	e9 30 01 00 00       	jmp    e33 <printf+0x19a>$/;"	l
cff	cs550_user.asm	/^     cff:	e8 5c f8 ff ff       	call   560 <write>$/;"	l
cff	grep.asm	/^     cff:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
cff	kill.asm	/^ cff:	c3                   	ret    $/;"	l
cff	ls.asm	/^     cff:	b8 f5 0c 00 00       	mov    $0xcf5,%eax$/;"	l
cff	zombie.asm	/^ cff:	76 d4                	jbe    cd5 <free+0x19>$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	file:
cgaputc	console.s	/^cgaputc:$/;"	l
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
char	cat.asm	/^char buf[512];$/;"	l
char	grep.asm	/^char buf[1024];$/;"	l
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	wc.asm	/^char buf[512];$/;"	l
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f
clearpteu	vm.s	/^clearpteu:$/;"	l
cli	console.s	/^cli:$/;"	l
cli	spinlock.s	/^cli:$/;"	l
cli	x86.h	/^cli(void)$/;"	f
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
cmos_read	lapic.c	/^static uint cmos_read(uint reg)$/;"	f	file:
cmos_read	lapic.s	/^cmos_read:$/;"	l
cmostime	lapic.c	/^void cmostime(struct rtcdate *r)$/;"	f
cmostime	lapic.s	/^cmostime:$/;"	l
code	kernel.asm	/^  code = p2v(0x7000);$/;"	d
commit	log.c	/^commit()$/;"	f	file:
commit	log.s	/^commit:$/;"	l
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	file:
concreate	usertests.c	/^concreate(void)$/;"	f
conf	kernel.asm	/^  conf = (struct mpconf*) p2v((uint) mp->physaddr);$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon5	file:
consoleinit	console.c	/^consoleinit(void)$/;"	f
consoleinit	console.s	/^consoleinit:$/;"	l
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleintr	console.s	/^consoleintr:$/;"	l
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f
consoleread	console.s	/^consoleread:$/;"	l
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f
consolewrite	console.s	/^consolewrite:$/;"	l
consputc	console.c	/^consputc(int c)$/;"	f
consputc	console.s	/^consputc:$/;"	l
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f
copyout	vm.s	/^copyout:$/;"	l
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f
copyuvm	vm.s	/^copyuvm:$/;"	l
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f
cprintf	console.s	/^cprintf:$/;"	l
cpu	kernel.asm	/^  cpu = c;$/;"	d
cpu	proc.h	/^  struct cpu *cpu;$/;"	m	struct:cpu	typeref:struct:cpu::cpu
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpunum	lapic.c	/^cpunum(void)$/;"	f
cpunum	lapic.s	/^cpunum:$/;"	l
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
create	sysfile.s	/^create:$/;"	l
createdelete	usertests.c	/^createdelete(void)$/;"	f
createtest	usertests.c	/^createtest(void)$/;"	f
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	file:
crt	console.s	/^crt:$/;"	l
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
ctlmap	kbd.s	/^ctlmap:$/;"	l
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
d	grep.asm	/^       d:	e9 c6 00 00 00       	jmp    d8 <grep+0xd8>$/;"	l
d	kernel.asm	/^  d = dst;$/;"	d
d	kill.asm	/^   d:	7f 19                	jg     28 <main+0x28>$/;"	l
d	ln.asm	/^   d:	74 19                	je     28 <main+0x28>$/;"	l
d	ls.asm	/^       d:	e8 dd 03 00 00       	call   3ef <strlen>$/;"	l
d	mkdir.asm	/^   d:	7f 19                	jg     28 <main+0x28>$/;"	l
d	rm.asm	/^   d:	7f 19                	jg     28 <main+0x28>$/;"	l
d	wc.asm	/^       d:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d0	init.asm	/^  d0:	e8 20 0b 00 00       	call   bf5 <printf>$/;"	l
d0	mkdir.asm	/^  d0:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
d0	rm.asm	/^  d0:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
d0	zombie.asm	/^  d0:	01 d0                	add    %edx,%eax$/;"	l
d00	grep.asm	/^     d00:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d00	kill.asm	/^ d00:	55                   	push   %ebp$/;"	l
d00	ln.asm	/^ d00:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
d00	mkdir.asm	/^ d00:	89 04 24             	mov    %eax,(%esp)$/;"	l
d00	rm.asm	/^ d00:	89 04 24             	mov    %eax,(%esp)$/;"	l
d01	grep.asm	/^     d01:	34 35                	xor    $0x35,%al$/;"	l
d01	init.asm	/^ d01:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d01	kill.asm	/^ d01:	89 e5                	mov    %esp,%ebp$/;"	l
d01	sh.asm	/^     d01:	8b 55 10             	mov    0x10(%ebp),%edx$/;"	l
d01	wc.asm	/^     d01:	75 0c                	jne    d0f <printf+0x50>$/;"	l
d01	zombie.asm	/^ d01:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d02	cat.asm	/^ d02:	eb 1e                	jmp    d22 <printf+0x11f>$/;"	l
d03	echo.asm	/^ d03:	c9                   	leave  $/;"	l
d03	kill.asm	/^ d03:	83 ec 10             	sub    $0x10,%esp$/;"	l
d03	ln.asm	/^ d03:	01 d0                	add    %edx,%eax$/;"	l
d03	mkdir.asm	/^ d03:	e8 8d fd ff ff       	call   a95 <putc>$/;"	l
d03	rm.asm	/^ d03:	e8 8d fd ff ff       	call   a95 <putc>$/;"	l
d03	stressfs.asm	/^     d03:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
d03	wc.asm	/^     d03:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
d04	cat.asm	/^ d04:	eb 1c                	jmp    d22 <printf+0x11f>$/;"	l
d04	cs550_user.asm	/^     d04:	c9                   	leave  $/;"	l
d04	echo.asm	/^ d04:	c3                   	ret    $/;"	l
d04	grep.asm	/^     d04:	b8 fa 0c 00 00       	mov    $0xcfa,%eax$/;"	l
d04	ls.asm	/^     d04:	cd 42                	int    $0x42$/;"	l
d04	sh.asm	/^     d04:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d04	zombie.asm	/^ d04:	8b 00                	mov    (%eax),%eax$/;"	l
d05	cs550_user.asm	/^     d05:	c3                   	ret    $/;"	l
d05	echo.asm	/^ d05:	55                   	push   %ebp$/;"	l
d05	init.asm	/^ d05:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d05	ln.asm	/^ d05:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d06	cat.asm	/^ d06:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d06	cs550_user.asm	/^     d06:	55                   	push   %ebp$/;"	l
d06	echo.asm	/^ d06:	89 e5                	mov    %esp,%ebp$/;"	l
d06	kill.asm	/^ d06:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d06	ls.asm	/^     d06:	c3                   	ret    $/;"	l
d06	zombie.asm	/^ d06:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
d07	cs550_user.asm	/^     d07:	89 e5                	mov    %esp,%ebp$/;"	l
d07	ls.asm	/^     d07:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
d07	sh.asm	/^     d07:	89 cb                	mov    %ecx,%ebx$/;"	l
d07	stressfs.asm	/^     d07:	0f 85 26 01 00 00    	jne    e33 <printf+0x19a>$/;"	l
d08	echo.asm	/^ d08:	83 ec 10             	sub    $0x10,%esp$/;"	l
d08	init.asm	/^ d08:	89 04 24             	mov    %eax,(%esp)$/;"	l
d08	ln.asm	/^ d08:	84 c0                	test   %al,%al$/;"	l
d08	mkdir.asm	/^ d08:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
d08	rm.asm	/^ d08:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
d09	cat.asm	/^ d09:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d09	cs550_user.asm	/^     d09:	56                   	push   %esi$/;"	l
d09	grep.asm	/^     d09:	cd 42                	int    $0x42$/;"	l
d09	kill.asm	/^ d09:	83 e8 08             	sub    $0x8,%eax$/;"	l
d09	sh.asm	/^     d09:	89 df                	mov    %ebx,%edi$/;"	l
d09	zombie.asm	/^ d09:	76 ca                	jbe    cd5 <free+0x19>$/;"	l
d0a	cs550_user.asm	/^     d0a:	53                   	push   %ebx$/;"	l
d0a	ln.asm	/^ d0a:	0f 85 71 fe ff ff    	jne    b81 <printf+0x22>$/;"	l
d0a	wc.asm	/^     d0a:	e9 4a 01 00 00       	jmp    e59 <printf+0x19a>$/;"	l
d0b	cs550_user.asm	/^     d0b:	83 ec 30             	sub    $0x30,%esp$/;"	l
d0b	echo.asm	/^ d0b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d0b	grep.asm	/^     d0b:	c3                   	ret    $/;"	l
d0b	init.asm	/^ d0b:	e8 05 fe ff ff       	call   b15 <putc>$/;"	l
d0b	sh.asm	/^     d0b:	89 d1                	mov    %edx,%ecx$/;"	l
d0b	zombie.asm	/^ d0b:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d0c	cat.asm	/^ d0c:	0f be c0             	movsbl %al,%eax$/;"	l
d0c	grep.asm	/^     d0c:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
d0c	kill.asm	/^ d0c:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
d0c	ls.asm	/^     d0c:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d0d	ls.asm	/^     d0d:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d0d	sh.asm	/^     d0d:	fc                   	cld    $/;"	l
d0d	stressfs.asm	/^     d0d:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
d0e	cs550_user.asm	/^     d0e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
d0e	echo.asm	/^ d0e:	83 e8 08             	sub    $0x8,%eax$/;"	l
d0e	ls.asm	/^     d0e:	34 36                	xor    $0x36,%al$/;"	l
d0e	sh.asm	/^     d0e:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
d0e	zombie.asm	/^ d0e:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d0f	cat.asm	/^ d0f:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d0f	kill.asm	/^ d0f:	a1 94 11 00 00       	mov    0x1194,%eax$/;"	l
d0f	mkdir.asm	/^ d0f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
d0f	rm.asm	/^ d0f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
d0f	wc.asm	/^     d0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
d1	cat.asm	/^  d1:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
d1	cs550_user.asm	/^      d1:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
d1	echo.asm	/^  d1:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d1	forktest.asm	/^  d1:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
d1	kill.asm	/^  d1:	74 10                	je     e3 <strcmp+0x27>$/;"	l
d1	ln.asm	/^  d1:	eb 08                	jmp    db <strcmp+0xd>$/;"	l
d1	stressfs.asm	/^      d1:	e8 85 03 00 00       	call   45b <open>$/;"	l
d1	wc.asm	/^      d1:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d10	init.asm	/^ d10:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
d10	ln.asm	/^ d10:	c9                   	leave  $/;"	l
d10	sh.asm	/^     d10:	89 ca                	mov    %ecx,%edx$/;"	l
d11	echo.asm	/^ d11:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
d11	grep.asm	/^     d11:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d11	ln.asm	/^ d11:	c3                   	ret    $/;"	l
d11	ls.asm	/^     d11:	b8 07 0d 00 00       	mov    $0xd07,%eax$/;"	l
d11	stressfs.asm	/^     d11:	75 2d                	jne    d40 <printf+0xa7>$/;"	l
d11	zombie.asm	/^ d11:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
d12	grep.asm	/^     d12:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d12	ln.asm	/^ d12:	55                   	push   %ebp$/;"	l
d12	sh.asm	/^     d12:	89 fb                	mov    %edi,%ebx$/;"	l
d12	wc.asm	/^     d12:	0f be c0             	movsbl %al,%eax$/;"	l
d13	cat.asm	/^ d13:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d13	grep.asm	/^     d13:	34 36                	xor    $0x36,%al$/;"	l
d13	ln.asm	/^ d13:	89 e5                	mov    %esp,%ebp$/;"	l
d13	mkdir.asm	/^ d13:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
d13	rm.asm	/^ d13:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
d13	stressfs.asm	/^     d13:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d14	echo.asm	/^ d14:	a1 90 11 00 00       	mov    0x1190,%eax$/;"	l
d14	init.asm	/^ d14:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d14	kill.asm	/^ d14:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d14	sh.asm	/^     d14:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
d15	cs550_user.asm	/^     d15:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
d15	ln.asm	/^ d15:	83 ec 10             	sub    $0x10,%esp$/;"	l
d15	wc.asm	/^     d15:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d16	cat.asm	/^ d16:	89 04 24             	mov    %eax,(%esp)$/;"	l
d16	grep.asm	/^     d16:	b8 0c 0d 00 00       	mov    $0xd0c,%eax$/;"	l
d16	ls.asm	/^     d16:	cd 42                	int    $0x42$/;"	l
d16	mkdir.asm	/^ d16:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
d16	rm.asm	/^ d16:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
d16	stressfs.asm	/^     d16:	8b 00                	mov    (%eax),%eax$/;"	l
d17	init.asm	/^ d17:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d17	kill.asm	/^ d17:	eb 24                	jmp    d3d <free+0x3d>$/;"	l
d17	sh.asm	/^     d17:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
d18	ln.asm	/^ d18:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d18	ls.asm	/^     d18:	c3                   	ret    $/;"	l
d18	stressfs.asm	/^     d18:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
d18	zombie.asm	/^ d18:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d19	cat.asm	/^ d19:	e8 05 fe ff ff       	call   b23 <putc>$/;"	l
d19	cs550_user.asm	/^     d19:	74 17                	je     d32 <printint+0x2c>$/;"	l
d19	echo.asm	/^ d19:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d19	kill.asm	/^ d19:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d19	ls.asm	/^     d19:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
d19	mkdir.asm	/^ d19:	01 d0                	add    %edx,%eax$/;"	l
d19	rm.asm	/^ d19:	01 d0                	add    %edx,%eax$/;"	l
d19	wc.asm	/^     d19:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d1a	init.asm	/^ d1a:	84 c0                	test   %al,%al$/;"	l
d1a	sh.asm	/^     d1a:	5b                   	pop    %ebx$/;"	l
d1b	cs550_user.asm	/^     d1b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
d1b	grep.asm	/^     d1b:	cd 42                	int    $0x42$/;"	l
d1b	ln.asm	/^ d1b:	83 e8 08             	sub    $0x8,%eax$/;"	l
d1b	mkdir.asm	/^ d1b:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d1b	rm.asm	/^ d1b:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d1b	sh.asm	/^     d1b:	5f                   	pop    %edi$/;"	l
d1b	zombie.asm	/^ d1b:	01 c2                	add    %eax,%edx$/;"	l
d1c	echo.asm	/^ d1c:	eb 24                	jmp    d42 <free+0x3d>$/;"	l
d1c	init.asm	/^ d1c:	75 da                	jne    cf8 <printf+0x103>$/;"	l
d1c	kill.asm	/^ d1c:	8b 00                	mov    (%eax),%eax$/;"	l
d1c	sh.asm	/^     d1c:	5d                   	pop    %ebp$/;"	l
d1c	wc.asm	/^     d1c:	89 04 24             	mov    %eax,(%esp)$/;"	l
d1d	grep.asm	/^     d1d:	c3                   	ret    $/;"	l
d1d	sh.asm	/^     d1d:	c3                   	ret    $/;"	l
d1d	zombie.asm	/^ d1d:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d1e	cat.asm	/^ d1e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
d1e	echo.asm	/^ d1e:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d1e	grep.asm	/^     d1e:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
d1e	init.asm	/^ d1e:	eb 68                	jmp    d88 <printf+0x193>$/;"	l
d1e	kill.asm	/^ d1e:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d1e	ln.asm	/^ d1e:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
d1e	ls.asm	/^     d1e:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d1e	mkdir.asm	/^ d1e:	84 c0                	test   %al,%al$/;"	l
d1e	rm.asm	/^ d1e:	84 c0                	test   %al,%al$/;"	l
d1e	sh.asm	/^     d1e:	55                   	push   %ebp$/;"	l
d1f	cs550_user.asm	/^     d1f:	79 11                	jns    d32 <printint+0x2c>$/;"	l
d1f	ls.asm	/^     d1f:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d1f	sh.asm	/^     d1f:	89 e5                	mov    %esp,%ebp$/;"	l
d1f	stressfs.asm	/^     d1f:	00 $/;"	l
d1f	wc.asm	/^     d1f:	e8 bb fe ff ff       	call   bdf <putc>$/;"	l
d2	ls.asm	/^      d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
d2	zombie.asm	/^  d2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d20	init.asm	/^ d20:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
d20	ls.asm	/^     d20:	34 37                	xor    $0x37,%al$/;"	l
d20	mkdir.asm	/^ d20:	0f 85 71 fe ff ff    	jne    b97 <printf+0x22>$/;"	l
d20	rm.asm	/^ d20:	0f 85 71 fe ff ff    	jne    b97 <printf+0x22>$/;"	l
d20	stressfs.asm	/^     d20:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
d20	zombie.asm	/^ d20:	8b 00                	mov    (%eax),%eax$/;"	l
d21	cs550_user.asm	/^     d21:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
d21	echo.asm	/^ d21:	8b 00                	mov    (%eax),%eax$/;"	l
d21	kill.asm	/^ d21:	77 12                	ja     d35 <free+0x35>$/;"	l
d21	ln.asm	/^ d21:	a1 bc 11 00 00       	mov    0x11bc,%eax$/;"	l
d21	sh.asm	/^     d21:	83 ec 10             	sub    $0x10,%esp$/;"	l
d22	cat.asm	/^ d22:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d22	zombie.asm	/^ d22:	39 c2                	cmp    %eax,%edx$/;"	l
d23	echo.asm	/^ d23:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d23	grep.asm	/^     d23:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d23	kill.asm	/^ d23:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d23	ls.asm	/^     d23:	b8 19 0d 00 00       	mov    $0xd19,%eax$/;"	l
d24	grep.asm	/^     d24:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d24	init.asm	/^ d24:	75 1d                	jne    d43 <printf+0x14e>$/;"	l
d24	sh.asm	/^     d24:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d24	wc.asm	/^     d24:	e9 30 01 00 00       	jmp    e59 <printf+0x19a>$/;"	l
d24	zombie.asm	/^ d24:	75 24                	jne    d4a <free+0x8e>$/;"	l
d25	cat.asm	/^ d25:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d25	grep.asm	/^     d25:	34 37                	xor    $0x37,%al$/;"	l
d26	echo.asm	/^ d26:	77 12                	ja     d3a <free+0x35>$/;"	l
d26	init.asm	/^ d26:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d26	kill.asm	/^ d26:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d26	ln.asm	/^ d26:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d26	mkdir.asm	/^ d26:	c9                   	leave  $/;"	l
d26	rm.asm	/^ d26:	c9                   	leave  $/;"	l
d26	zombie.asm	/^ d26:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d27	mkdir.asm	/^ d27:	c3                   	ret    $/;"	l
d27	rm.asm	/^ d27:	c3                   	ret    $/;"	l
d27	sh.asm	/^     d27:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d27	stressfs.asm	/^     d27:	00 $/;"	l
d28	cat.asm	/^ d28:	84 c0                	test   %al,%al$/;"	l
d28	cs550_user.asm	/^     d28:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d28	echo.asm	/^ d28:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d28	grep.asm	/^     d28:	b8 1e 0d 00 00       	mov    $0xd1e,%eax$/;"	l
d28	ls.asm	/^     d28:	cd 42                	int    $0x42$/;"	l
d28	mkdir.asm	/^ d28:	55                   	push   %ebp$/;"	l
d28	rm.asm	/^ d28:	55                   	push   %ebp$/;"	l
d28	stressfs.asm	/^     d28:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d29	init.asm	/^ d29:	8b 00                	mov    (%eax),%eax$/;"	l
d29	kill.asm	/^ d29:	77 24                	ja     d4f <free+0x4f>$/;"	l
d29	ln.asm	/^ d29:	eb 24                	jmp    d4f <free+0x3d>$/;"	l
d29	mkdir.asm	/^ d29:	89 e5                	mov    %esp,%ebp$/;"	l
d29	rm.asm	/^ d29:	89 e5                	mov    %esp,%ebp$/;"	l
d29	wc.asm	/^     d29:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
d29	zombie.asm	/^ d29:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
d2a	cat.asm	/^ d2a:	75 da                	jne    d06 <printf+0x103>$/;"	l
d2a	ls.asm	/^     d2a:	c3                   	ret    $/;"	l
d2a	sh.asm	/^     d2a:	90                   	nop$/;"	l
d2b	cs550_user.asm	/^     d2b:	f7 d8                	neg    %eax$/;"	l
d2b	echo.asm	/^ d2b:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d2b	init.asm	/^ d2b:	0f be c0             	movsbl %al,%eax$/;"	l
d2b	kill.asm	/^ d2b:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d2b	ln.asm	/^ d2b:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d2b	ls.asm	/^     d2b:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
d2b	mkdir.asm	/^ d2b:	83 ec 10             	sub    $0x10,%esp$/;"	l
d2b	rm.asm	/^ d2b:	83 ec 10             	sub    $0x10,%esp$/;"	l
d2b	sh.asm	/^     d2b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d2c	cat.asm	/^ d2c:	eb 68                	jmp    d96 <printf+0x193>$/;"	l
d2c	stressfs.asm	/^     d2c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d2c	zombie.asm	/^ d2c:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d2d	cs550_user.asm	/^     d2d:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
d2d	grep.asm	/^     d2d:	cd 42                	int    $0x42$/;"	l
d2d	wc.asm	/^     d2d:	0f 85 26 01 00 00    	jne    e59 <printf+0x19a>$/;"	l
d2e	cat.asm	/^ d2e:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
d2e	echo.asm	/^ d2e:	77 24                	ja     d54 <free+0x4f>$/;"	l
d2e	init.asm	/^ d2e:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d2e	kill.asm	/^ d2e:	8b 00                	mov    (%eax),%eax$/;"	l
d2e	ln.asm	/^ d2e:	8b 00                	mov    (%eax),%eax$/;"	l
d2e	mkdir.asm	/^ d2e:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d2e	rm.asm	/^ d2e:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d2e	sh.asm	/^     d2e:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
d2f	grep.asm	/^     d2f:	c3                   	ret    $/;"	l
d2f	stressfs.asm	/^     d2f:	89 04 24             	mov    %eax,(%esp)$/;"	l
d2f	zombie.asm	/^ d2f:	8b 00                	mov    (%eax),%eax$/;"	l
d3	grep.asm	/^      d3:	e8 ab 04 00 00       	call   583 <memmove>$/;"	l
d3	kill.asm	/^  d3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d3	ln.asm	/^  d3:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
d3	mkdir.asm	/^  d3:	0f b6 12             	movzbl (%edx),%edx$/;"	l
d3	rm.asm	/^  d3:	0f b6 12             	movzbl (%edx),%edx$/;"	l
d3	sh.asm	/^      d3:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
d30	cs550_user.asm	/^     d30:	eb 06                	jmp    d38 <printint+0x32>$/;"	l
d30	echo.asm	/^ d30:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d30	grep.asm	/^     d30:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
d30	kill.asm	/^ d30:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
d30	ln.asm	/^ d30:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d30	ls.asm	/^     d30:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d31	ls.asm	/^     d31:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d31	mkdir.asm	/^ d31:	83 e8 08             	sub    $0x8,%eax$/;"	l
d31	rm.asm	/^ d31:	83 e8 08             	sub    $0x8,%eax$/;"	l
d31	sh.asm	/^     d31:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
d31	zombie.asm	/^ d31:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d32	cat.asm	/^ d32:	75 1d                	jne    d51 <printf+0x14e>$/;"	l
d32	cs550_user.asm	/^     d32:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d32	init.asm	/^ d32:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d32	ls.asm	/^     d32:	34 38                	xor    $0x38,%al$/;"	l
d32	stressfs.asm	/^     d32:	e8 aa fe ff ff       	call   be1 <printint>$/;"	l
d33	echo.asm	/^ d33:	8b 00                	mov    (%eax),%eax$/;"	l
d33	kill.asm	/^ d33:	77 1a                	ja     d4f <free+0x4f>$/;"	l
d33	ln.asm	/^ d33:	77 12                	ja     d47 <free+0x35>$/;"	l
d33	wc.asm	/^     d33:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
d34	cat.asm	/^ d34:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d34	mkdir.asm	/^ d34:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
d34	rm.asm	/^ d34:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
d34	sh.asm	/^     d34:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
d34	zombie.asm	/^ d34:	01 c2                	add    %eax,%edx$/;"	l
d35	cs550_user.asm	/^     d35:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
d35	echo.asm	/^ d35:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
d35	grep.asm	/^     d35:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d35	init.asm	/^ d35:	89 04 24             	mov    %eax,(%esp)$/;"	l
d35	kill.asm	/^ d35:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d35	ln.asm	/^ d35:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d35	ls.asm	/^     d35:	b8 2b 0d 00 00       	mov    $0xd2b,%eax$/;"	l
d36	grep.asm	/^     d36:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d36	zombie.asm	/^ d36:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d37	cat.asm	/^ d37:	8b 00                	mov    (%eax),%eax$/;"	l
d37	grep.asm	/^     d37:	34 38                	xor    $0x38,%al$/;"	l
d37	mkdir.asm	/^ d37:	a1 dc 11 00 00       	mov    0x11dc,%eax$/;"	l
d37	rm.asm	/^ d37:	a1 d8 11 00 00       	mov    0x11d8,%eax$/;"	l
d37	sh.asm	/^     d37:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
d37	stressfs.asm	/^     d37:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
d37	wc.asm	/^     d37:	75 2d                	jne    d66 <printf+0xa7>$/;"	l
d38	cs550_user.asm	/^     d38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
d38	echo.asm	/^ d38:	77 1a                	ja     d54 <free+0x4f>$/;"	l
d38	init.asm	/^ d38:	e8 d8 fd ff ff       	call   b15 <putc>$/;"	l
d38	kill.asm	/^ d38:	8b 00                	mov    (%eax),%eax$/;"	l
d38	ln.asm	/^ d38:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d39	cat.asm	/^ d39:	0f be c0             	movsbl %al,%eax$/;"	l
d39	wc.asm	/^     d39:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d39	zombie.asm	/^ d39:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
d3a	echo.asm	/^ d3a:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d3a	grep.asm	/^     d3a:	b8 30 0d 00 00       	mov    $0xd30,%eax$/;"	l
d3a	kill.asm	/^ d3a:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d3a	ls.asm	/^     d3a:	cd 42                	int    $0x42$/;"	l
d3a	sh.asm	/^     d3a:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
d3b	ln.asm	/^ d3b:	77 24                	ja     d61 <free+0x4f>$/;"	l
d3b	stressfs.asm	/^     d3b:	e9 ec 00 00 00       	jmp    e2c <printf+0x193>$/;"	l
d3c	cat.asm	/^ d3c:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d3c	ls.asm	/^     d3c:	c3                   	ret    $/;"	l
d3c	mkdir.asm	/^ d3c:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d3c	rm.asm	/^ d3c:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d3c	wc.asm	/^     d3c:	8b 00                	mov    (%eax),%eax$/;"	l
d3c	zombie.asm	/^ d3c:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d3d	echo.asm	/^ d3d:	8b 00                	mov    (%eax),%eax$/;"	l
d3d	init.asm	/^ d3d:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
d3d	kill.asm	/^ d3d:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d3d	ln.asm	/^ d3d:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d3d	ls.asm	/^     d3d:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
d3d	sh.asm	/^     d3d:	0f b6 12             	movzbl (%edx),%edx$/;"	l
d3e	wc.asm	/^     d3e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
d3f	cs550_user.asm	/^     d3f:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
d3f	echo.asm	/^ d3f:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d3f	grep.asm	/^     d3f:	cd 42                	int    $0x42$/;"	l
d3f	mkdir.asm	/^ d3f:	eb 24                	jmp    d65 <free+0x3d>$/;"	l
d3f	rm.asm	/^ d3f:	eb 24                	jmp    d65 <free+0x3d>$/;"	l
d3f	zombie.asm	/^ d3f:	8b 00                	mov    (%eax),%eax$/;"	l
d4	cs550_user.asm	/^      d4:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d4	echo.asm	/^  d4:	84 c0                	test   %al,%al$/;"	l
d4	forktest.asm	/^  d4:	74 19                	je     ef <forktest+0xc6>$/;"	l
d4	wc.asm	/^      d4:	89 44 24 14          	mov    %eax,0x14(%esp)$/;"	l
d40	cat.asm	/^ d40:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d40	kill.asm	/^ d40:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d40	ln.asm	/^ d40:	8b 00                	mov    (%eax),%eax$/;"	l
d40	sh.asm	/^     d40:	88 10                	mov    %dl,(%eax)$/;"	l
d40	stressfs.asm	/^     d40:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
d41	grep.asm	/^     d41:	c3                   	ret    $/;"	l
d41	init.asm	/^ d41:	eb 45                	jmp    d88 <printf+0x193>$/;"	l
d41	mkdir.asm	/^ d41:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d41	rm.asm	/^ d41:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d41	zombie.asm	/^ d41:	8b 10                	mov    (%eax),%edx$/;"	l
d42	cs550_user.asm	/^     d42:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
d42	echo.asm	/^ d42:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d42	grep.asm	/^     d42:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
d42	ln.asm	/^ d42:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
d42	ls.asm	/^     d42:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d42	sh.asm	/^     d42:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d43	cat.asm	/^ d43:	89 04 24             	mov    %eax,(%esp)$/;"	l
d43	init.asm	/^ d43:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
d43	kill.asm	/^ d43:	76 d4                	jbe    d19 <free+0x19>$/;"	l
d43	ls.asm	/^     d43:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d43	zombie.asm	/^ d43:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d44	ls.asm	/^     d44:	34 39                	xor    $0x39,%al$/;"	l
d44	mkdir.asm	/^ d44:	8b 00                	mov    (%eax),%eax$/;"	l
d44	rm.asm	/^ d44:	8b 00                	mov    (%eax),%eax$/;"	l
d44	stressfs.asm	/^     d44:	74 06                	je     d4c <printf+0xb3>$/;"	l
d45	cs550_user.asm	/^     d45:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
d45	echo.asm	/^ d45:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d45	kill.asm	/^ d45:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d45	ln.asm	/^ d45:	77 1a                	ja     d61 <free+0x4f>$/;"	l
d45	sh.asm	/^     d45:	84 c0                	test   %al,%al$/;"	l
d45	wc.asm	/^     d45:	00 $/;"	l
d46	cat.asm	/^ d46:	e8 d8 fd ff ff       	call   b23 <putc>$/;"	l
d46	mkdir.asm	/^ d46:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d46	rm.asm	/^ d46:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d46	stressfs.asm	/^     d46:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
d46	wc.asm	/^     d46:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
d46	zombie.asm	/^ d46:	89 10                	mov    %edx,(%eax)$/;"	l
d47	grep.asm	/^     d47:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d47	init.asm	/^ d47:	75 17                	jne    d60 <printf+0x16b>$/;"	l
d47	ln.asm	/^ d47:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d47	ls.asm	/^     d47:	b8 3d 0d 00 00       	mov    $0xd3d,%eax$/;"	l
d47	sh.asm	/^     d47:	75 e2                	jne    d2b <strcpy+0xd>$/;"	l
d48	cs550_user.asm	/^     d48:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
d48	echo.asm	/^ d48:	76 d4                	jbe    d1e <free+0x19>$/;"	l
d48	grep.asm	/^     d48:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d48	kill.asm	/^ d48:	8b 00                	mov    (%eax),%eax$/;"	l
d48	zombie.asm	/^ d48:	eb 0a                	jmp    d54 <free+0x98>$/;"	l
d49	grep.asm	/^     d49:	34 39                	xor    $0x39,%al$/;"	l
d49	init.asm	/^ d49:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
d49	mkdir.asm	/^ d49:	77 12                	ja     d5d <free+0x35>$/;"	l
d49	rm.asm	/^ d49:	77 12                	ja     d5d <free+0x35>$/;"	l
d49	sh.asm	/^     d49:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d4a	echo.asm	/^ d4a:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d4a	kill.asm	/^ d4a:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
d4a	ln.asm	/^ d4a:	8b 00                	mov    (%eax),%eax$/;"	l
d4a	stressfs.asm	/^     d4a:	75 2d                	jne    d79 <printf+0xe0>$/;"	l
d4a	zombie.asm	/^ d4a:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d4b	cat.asm	/^ d4b:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
d4b	cs550_user.asm	/^     d4b:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
d4b	mkdir.asm	/^ d4b:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d4b	rm.asm	/^ d4b:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d4c	grep.asm	/^     d4c:	b8 42 0d 00 00       	mov    $0xd42,%eax$/;"	l
d4c	init.asm	/^ d4c:	0f be c0             	movsbl %al,%eax$/;"	l
d4c	ln.asm	/^ d4c:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d4c	ls.asm	/^     d4c:	cd 42                	int    $0x42$/;"	l
d4c	sh.asm	/^     d4c:	c9                   	leave  $/;"	l
d4c	stressfs.asm	/^     d4c:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d4d	echo.asm	/^ d4d:	8b 00                	mov    (%eax),%eax$/;"	l
d4d	kill.asm	/^ d4d:	76 ca                	jbe    d19 <free+0x19>$/;"	l
d4d	sh.asm	/^     d4d:	c3                   	ret    $/;"	l
d4d	wc.asm	/^     d4d:	00 $/;"	l
d4d	zombie.asm	/^ d4d:	8b 10                	mov    (%eax),%edx$/;"	l
d4e	cs550_user.asm	/^     d4e:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
d4e	ls.asm	/^     d4e:	c3                   	ret    $/;"	l
d4e	mkdir.asm	/^ d4e:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d4e	rm.asm	/^ d4e:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d4e	sh.asm	/^     d4e:	55                   	push   %ebp$/;"	l
d4e	wc.asm	/^     d4e:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d4f	cat.asm	/^ d4f:	eb 45                	jmp    d96 <printf+0x193>$/;"	l
d4f	echo.asm	/^ d4f:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
d4f	init.asm	/^ d4f:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d4f	kill.asm	/^ d4f:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d4f	ln.asm	/^ d4f:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d4f	ls.asm	/^     d4f:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
d4f	sh.asm	/^     d4f:	89 e5                	mov    %esp,%ebp$/;"	l
d4f	stressfs.asm	/^     d4f:	8b 00                	mov    (%eax),%eax$/;"	l
d4f	zombie.asm	/^ d4f:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d5	cat.asm	/^  d5:	c7 44 24 04 e0 0f 00 	movl   $0xfe0,0x4(%esp)$/;"	l
d5	init.asm	/^  d5:	e8 9d 02 00 00       	call   377 <exit>$/;"	l
d5	zombie.asm	/^  d5:	84 c0                	test   %al,%al$/;"	l
d51	cat.asm	/^ d51:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
d51	grep.asm	/^     d51:	cd 42                	int    $0x42$/;"	l
d51	mkdir.asm	/^ d51:	77 24                	ja     d77 <free+0x4f>$/;"	l
d51	rm.asm	/^ d51:	77 24                	ja     d77 <free+0x4f>$/;"	l
d51	sh.asm	/^     d51:	eb 08                	jmp    d5b <strcmp+0xd>$/;"	l
d51	stressfs.asm	/^     d51:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
d52	echo.asm	/^ d52:	76 ca                	jbe    d1e <free+0x19>$/;"	l
d52	kill.asm	/^ d52:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d52	ln.asm	/^ d52:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d52	wc.asm	/^     d52:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d52	zombie.asm	/^ d52:	89 10                	mov    %edx,(%eax)$/;"	l
d53	cs550_user.asm	/^     d53:	f7 f3                	div    %ebx$/;"	l
d53	grep.asm	/^     d53:	c3                   	ret    $/;"	l
d53	init.asm	/^ d53:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d53	mkdir.asm	/^ d53:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d53	rm.asm	/^ d53:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d53	sh.asm	/^     d53:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
d54	echo.asm	/^ d54:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d54	grep.asm	/^     d54:	68 74 5f 63 61       	push   $0x61635f74$/;"	l
d54	ls.asm	/^     d54:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d54	zombie.asm	/^ d54:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d55	cat.asm	/^ d55:	75 17                	jne    d6e <printf+0x16b>$/;"	l
d55	cs550_user.asm	/^     d55:	89 d0                	mov    %edx,%eax$/;"	l
d55	kill.asm	/^ d55:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
d55	ln.asm	/^ d55:	76 d4                	jbe    d2b <free+0x19>$/;"	l
d55	ls.asm	/^     d55:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d55	wc.asm	/^     d55:	89 04 24             	mov    %eax,(%esp)$/;"	l
d56	init.asm	/^ d56:	89 04 24             	mov    %eax,(%esp)$/;"	l
d56	ls.asm	/^     d56:	35 30 00 b8 4f       	xor    $0x4fb80030,%eax$/;"	l
d56	mkdir.asm	/^ d56:	8b 00                	mov    (%eax),%eax$/;"	l
d56	rm.asm	/^ d56:	8b 00                	mov    (%eax),%eax$/;"	l
d57	cat.asm	/^ d57:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
d57	cs550_user.asm	/^     d57:	0f b6 80 88 15 00 00 	movzbl 0x1588(%eax),%eax$/;"	l
d57	echo.asm	/^ d57:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d57	ln.asm	/^ d57:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d57	sh.asm	/^     d57:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d57	zombie.asm	/^ d57:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d58	mkdir.asm	/^ d58:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
d58	rm.asm	/^ d58:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
d58	stressfs.asm	/^     d58:	00 $/;"	l
d58	wc.asm	/^     d58:	e8 aa fe ff ff       	call   c07 <printint>$/;"	l
d59	grep.asm	/^     d59:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d59	init.asm	/^ d59:	e8 b7 fd ff ff       	call   b15 <putc>$/;"	l
d59	ls.asm	/^     d59:	b8 4f 0d 00 00       	mov    $0xd4f,%eax$/;"	l
d59	stressfs.asm	/^     d59:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
d5a	cat.asm	/^ d5a:	0f be c0             	movsbl %al,%eax$/;"	l
d5a	echo.asm	/^ d5a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
d5a	grep.asm	/^     d5a:	6c                   	insb   (%dx),%es:(%edi)$/;"	l
d5a	ln.asm	/^ d5a:	8b 00                	mov    (%eax),%eax$/;"	l
d5a	zombie.asm	/^ d5a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
d5b	grep.asm	/^     d5b:	35 30 00 b8 54       	xor    $0x54b80030,%eax$/;"	l
d5b	mkdir.asm	/^ d5b:	77 1a                	ja     d77 <free+0x4f>$/;"	l
d5b	rm.asm	/^ d5b:	77 1a                	ja     d77 <free+0x4f>$/;"	l
d5b	sh.asm	/^     d5b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d5c	kill.asm	/^ d5c:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d5c	ln.asm	/^ d5c:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
d5d	cat.asm	/^ d5d:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d5d	mkdir.asm	/^ d5d:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d5d	rm.asm	/^ d5d:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d5d	wc.asm	/^     d5d:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
d5e	cs550_user.asm	/^     d5e:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
d5e	grep.asm	/^     d5e:	b8 54 0d 00 00       	mov    $0xd54,%eax$/;"	l
d5e	init.asm	/^ d5e:	eb 28                	jmp    d88 <printf+0x193>$/;"	l
d5e	ls.asm	/^     d5e:	cd 42                	int    $0x42$/;"	l
d5e	sh.asm	/^     d5e:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d5f	kill.asm	/^ d5f:	01 c2                	add    %eax,%edx$/;"	l
d5f	ln.asm	/^ d5f:	76 ca                	jbe    d2b <free+0x19>$/;"	l
d6	echo.asm	/^  d6:	74 10                	je     e8 <strcmp+0x27>$/;"	l
d6	forktest.asm	/^  d6:	c7 44 24 04 5b 0b 00 	movl   $0xb5b,0x4(%esp)$/;"	l
d6	kill.asm	/^  d6:	0f b6 10             	movzbl (%eax),%edx$/;"	l
d6	ls.asm	/^      d6:	79 20                	jns    f8 <ls+0x48>$/;"	l
d6	mkdir.asm	/^  d6:	88 10                	mov    %dl,(%eax)$/;"	l
d6	rm.asm	/^  d6:	88 10                	mov    %dl,(%eax)$/;"	l
d6	sh.asm	/^      d6:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d6	stressfs.asm	/^      d6:	89 84 24 28 02 00 00 	mov    %eax,0x228(%esp)$/;"	l
d60	init.asm	/^ d60:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
d60	ls.asm	/^     d60:	c3                   	ret    $/;"	l
d60	mkdir.asm	/^ d60:	8b 00                	mov    (%eax),%eax$/;"	l
d60	rm.asm	/^ d60:	8b 00                	mov    (%eax),%eax$/;"	l
d60	stressfs.asm	/^     d60:	00 $/;"	l
d61	cat.asm	/^ d61:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d61	echo.asm	/^ d61:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d61	kill.asm	/^ d61:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d61	ln.asm	/^ d61:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d61	ls.asm	/^     d61:	55                   	push   %ebp$/;"	l
d61	sh.asm	/^     d61:	84 c0                	test   %al,%al$/;"	l
d61	stressfs.asm	/^     d61:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d61	wc.asm	/^     d61:	e9 ec 00 00 00       	jmp    e52 <printf+0x193>$/;"	l
d61	zombie.asm	/^ d61:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d62	cs550_user.asm	/^     d62:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
d62	ls.asm	/^     d62:	89 e5                	mov    %esp,%ebp$/;"	l
d62	mkdir.asm	/^ d62:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d62	rm.asm	/^ d62:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d63	grep.asm	/^     d63:	cd 42                	int    $0x42$/;"	l
d63	sh.asm	/^     d63:	74 10                	je     d75 <strcmp+0x27>$/;"	l
d64	cat.asm	/^ d64:	89 04 24             	mov    %eax,(%esp)$/;"	l
d64	echo.asm	/^ d64:	01 c2                	add    %eax,%edx$/;"	l
d64	kill.asm	/^ d64:	8b 00                	mov    (%eax),%eax$/;"	l
d64	ln.asm	/^ d64:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d64	ls.asm	/^     d64:	83 ec 18             	sub    $0x18,%esp$/;"	l
d64	zombie.asm	/^ d64:	01 d0                	add    %edx,%eax$/;"	l
d65	cs550_user.asm	/^     d65:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
d65	grep.asm	/^     d65:	c3                   	ret    $/;"	l
d65	mkdir.asm	/^ d65:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d65	rm.asm	/^ d65:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d65	sh.asm	/^     d65:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d65	stressfs.asm	/^     d65:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d66	echo.asm	/^ d66:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d66	grep.asm	/^     d66:	55                   	push   %ebp$/;"	l
d66	kill.asm	/^ d66:	39 c2                	cmp    %eax,%edx$/;"	l
d66	wc.asm	/^     d66:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
d66	zombie.asm	/^ d66:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
d67	cat.asm	/^ d67:	e8 b7 fd ff ff       	call   b23 <putc>$/;"	l
d67	grep.asm	/^     d67:	89 e5                	mov    %esp,%ebp$/;"	l
d67	init.asm	/^ d67:	00 $/;"	l
d67	ln.asm	/^ d67:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
d67	ls.asm	/^     d67:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d68	cs550_user.asm	/^     d68:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
d68	init.asm	/^ d68:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d68	kill.asm	/^ d68:	75 24                	jne    d8e <free+0x8e>$/;"	l
d68	mkdir.asm	/^ d68:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d68	rm.asm	/^ d68:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
d68	sh.asm	/^     d68:	0f b6 10             	movzbl (%eax),%edx$/;"	l
d68	stressfs.asm	/^     d68:	89 04 24             	mov    %eax,(%esp)$/;"	l
d69	echo.asm	/^ d69:	8b 00                	mov    (%eax),%eax$/;"	l
d69	grep.asm	/^     d69:	83 ec 18             	sub    $0x18,%esp$/;"	l
d69	zombie.asm	/^ d69:	75 20                	jne    d8b <free+0xcf>$/;"	l
d6a	kill.asm	/^ d6a:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d6a	ls.asm	/^     d6a:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
d6a	wc.asm	/^     d6a:	74 06                	je     d72 <printf+0xb3>$/;"	l
d6b	echo.asm	/^ d6b:	39 c2                	cmp    %eax,%edx$/;"	l
d6b	init.asm	/^ d6b:	89 04 24             	mov    %eax,(%esp)$/;"	l
d6b	mkdir.asm	/^ d6b:	76 d4                	jbe    d41 <free+0x19>$/;"	l
d6b	rm.asm	/^ d6b:	76 d4                	jbe    d41 <free+0x19>$/;"	l
d6b	sh.asm	/^     d6b:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d6b	stressfs.asm	/^     d6b:	e8 71 fe ff ff       	call   be1 <printint>$/;"	l
d6b	zombie.asm	/^ d6b:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d6c	cat.asm	/^ d6c:	eb 28                	jmp    d96 <printf+0x193>$/;"	l
d6c	grep.asm	/^     d6c:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d6c	wc.asm	/^     d6c:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
d6d	cs550_user.asm	/^     d6d:	f7 f6                	div    %esi$/;"	l
d6d	echo.asm	/^ d6d:	75 24                	jne    d93 <free+0x8e>$/;"	l
d6d	kill.asm	/^ d6d:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
d6d	ls.asm	/^     d6d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
d6d	mkdir.asm	/^ d6d:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d6d	rm.asm	/^ d6d:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d6e	cat.asm	/^ d6e:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
d6e	init.asm	/^ d6e:	e8 a2 fd ff ff       	call   b15 <putc>$/;"	l
d6e	ln.asm	/^ d6e:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d6e	sh.asm	/^     d6e:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d6e	zombie.asm	/^ d6e:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
d6f	cs550_user.asm	/^     d6f:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
d6f	echo.asm	/^ d6f:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d6f	grep.asm	/^     d6f:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
d7	cs550_user.asm	/^      d7:	89 44 24 10          	mov    %eax,0x10(%esp)$/;"	l
d7	ln.asm	/^  d7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d7	zombie.asm	/^  d7:	75 ed                	jne    c6 <strlen+0xf>$/;"	l
d70	kill.asm	/^ d70:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d70	mkdir.asm	/^ d70:	8b 00                	mov    (%eax),%eax$/;"	l
d70	rm.asm	/^ d70:	8b 00                	mov    (%eax),%eax$/;"	l
d70	stressfs.asm	/^     d70:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
d70	wc.asm	/^     d70:	75 2d                	jne    d9f <printf+0xe0>$/;"	l
d71	ln.asm	/^ d71:	01 c2                	add    %eax,%edx$/;"	l
d71	sh.asm	/^     d71:	38 c2                	cmp    %al,%dl$/;"	l
d71	zombie.asm	/^ d71:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d72	cs550_user.asm	/^     d72:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
d72	echo.asm	/^ d72:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
d72	grep.asm	/^     d72:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
d72	mkdir.asm	/^ d72:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
d72	rm.asm	/^ d72:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
d72	wc.asm	/^     d72:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d73	init.asm	/^ d73:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
d73	kill.asm	/^ d73:	8b 00                	mov    (%eax),%eax$/;"	l
d73	ln.asm	/^ d73:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d73	sh.asm	/^     d73:	74 de                	je     d53 <strcmp+0x5>$/;"	l
d74	ls.asm	/^     d74:	00 $/;"	l
d74	stressfs.asm	/^     d74:	e9 b3 00 00 00       	jmp    e2c <printf+0x193>$/;"	l
d74	zombie.asm	/^ d74:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d75	cat.asm	/^ d75:	00 $/;"	l
d75	echo.asm	/^ d75:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d75	kill.asm	/^ d75:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d75	ls.asm	/^     d75:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
d75	mkdir.asm	/^ d75:	76 ca                	jbe    d41 <free+0x19>$/;"	l
d75	rm.asm	/^ d75:	76 ca                	jbe    d41 <free+0x19>$/;"	l
d75	sh.asm	/^     d75:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d75	wc.asm	/^     d75:	8b 00                	mov    (%eax),%eax$/;"	l
d76	cat.asm	/^ d76:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d76	cs550_user.asm	/^     d76:	75 c7                	jne    d3f <printint+0x39>$/;"	l
d76	init.asm	/^ d76:	0f be c0             	movsbl %al,%eax$/;"	l
d76	ln.asm	/^ d76:	8b 00                	mov    (%eax),%eax$/;"	l
d77	mkdir.asm	/^ d77:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d77	rm.asm	/^ d77:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d77	wc.asm	/^     d77:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
d77	zombie.asm	/^ d77:	01 c2                	add    %eax,%edx$/;"	l
d78	cs550_user.asm	/^     d78:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
d78	echo.asm	/^ d78:	8b 00                	mov    (%eax),%eax$/;"	l
d78	kill.asm	/^ d78:	01 c2                	add    %eax,%edx$/;"	l
d78	ln.asm	/^ d78:	39 c2                	cmp    %eax,%edx$/;"	l
d78	ls.asm	/^     d78:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d78	sh.asm	/^     d78:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d79	cat.asm	/^ d79:	89 04 24             	mov    %eax,(%esp)$/;"	l
d79	grep.asm	/^     d79:	00 $/;"	l
d79	init.asm	/^ d79:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d79	stressfs.asm	/^     d79:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
d79	zombie.asm	/^ d79:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d7a	echo.asm	/^ d7a:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d7a	grep.asm	/^     d7a:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
d7a	kill.asm	/^ d7a:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d7a	ln.asm	/^ d7a:	75 24                	jne    da0 <free+0x8e>$/;"	l
d7a	mkdir.asm	/^ d7a:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d7a	rm.asm	/^ d7a:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d7b	sh.asm	/^     d7b:	0f b6 d0             	movzbl %al,%edx$/;"	l
d7c	cat.asm	/^ d7c:	e8 a2 fd ff ff       	call   b23 <putc>$/;"	l
d7c	cs550_user.asm	/^     d7c:	74 10                	je     d8e <printint+0x88>$/;"	l
d7c	ln.asm	/^ d7c:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d7c	ls.asm	/^     d7c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d7c	zombie.asm	/^ d7c:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
d7d	echo.asm	/^ d7d:	01 c2                	add    %eax,%edx$/;"	l
d7d	grep.asm	/^     d7d:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d7d	init.asm	/^ d7d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d7d	kill.asm	/^ d7d:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
d7d	mkdir.asm	/^ d7d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
d7d	rm.asm	/^ d7d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
d7d	stressfs.asm	/^     d7d:	75 45                	jne    dc4 <printf+0x12b>$/;"	l
d7e	cs550_user.asm	/^     d7e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d7e	sh.asm	/^     d7e:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d7e	wc.asm	/^     d7e:	00 $/;"	l
d7f	echo.asm	/^ d7f:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d7f	ln.asm	/^ d7f:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
d7f	ls.asm	/^     d7f:	89 04 24             	mov    %eax,(%esp)$/;"	l
d7f	stressfs.asm	/^     d7f:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d7f	wc.asm	/^     d7f:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
d7f	zombie.asm	/^ d7f:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d8	echo.asm	/^  d8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d8	grep.asm	/^      d8:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d8	ls.asm	/^      d8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d8	mkdir.asm	/^  d8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d8	rm.asm	/^  d8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d8	wc.asm	/^      d8:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d80	init.asm	/^ d80:	89 04 24             	mov    %eax,(%esp)$/;"	l
d80	kill.asm	/^ d80:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d81	cat.asm	/^ d81:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
d81	cs550_user.asm	/^     d81:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
d81	grep.asm	/^     d81:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d81	sh.asm	/^     d81:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d82	echo.asm	/^ d82:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
d82	ln.asm	/^ d82:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d82	ls.asm	/^     d82:	e8 5c f8 ff ff       	call   5e3 <write>$/;"	l
d82	stressfs.asm	/^     d82:	8b 00                	mov    (%eax),%eax$/;"	l
d82	zombie.asm	/^ d82:	8b 10                	mov    (%eax),%edx$/;"	l
d83	init.asm	/^ d83:	e8 8d fd ff ff       	call   b15 <putc>$/;"	l
d83	kill.asm	/^ d83:	8b 00                	mov    (%eax),%eax$/;"	l
d84	cat.asm	/^ d84:	0f be c0             	movsbl %al,%eax$/;"	l
d84	cs550_user.asm	/^     d84:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
d84	grep.asm	/^     d84:	89 04 24             	mov    %eax,(%esp)$/;"	l
d84	mkdir.asm	/^ d84:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d84	rm.asm	/^ d84:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d84	sh.asm	/^     d84:	0f b6 c0             	movzbl %al,%eax$/;"	l
d84	stressfs.asm	/^     d84:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
d84	zombie.asm	/^ d84:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d85	echo.asm	/^ d85:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d85	kill.asm	/^ d85:	8b 10                	mov    (%eax),%edx$/;"	l
d85	ln.asm	/^ d85:	8b 00                	mov    (%eax),%eax$/;"	l
d86	wc.asm	/^     d86:	00 $/;"	l
d87	cat.asm	/^ d87:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d87	cs550_user.asm	/^     d87:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
d87	grep.asm	/^     d87:	e8 5c f8 ff ff       	call   5e8 <write>$/;"	l
d87	kill.asm	/^ d87:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d87	ln.asm	/^ d87:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d87	ls.asm	/^     d87:	c9                   	leave  $/;"	l
d87	mkdir.asm	/^ d87:	01 c2                	add    %eax,%edx$/;"	l
d87	rm.asm	/^ d87:	01 c2                	add    %eax,%edx$/;"	l
d87	sh.asm	/^     d87:	29 c2                	sub    %eax,%edx$/;"	l
d87	stressfs.asm	/^     d87:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
d87	wc.asm	/^     d87:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d87	zombie.asm	/^ d87:	89 10                	mov    %edx,(%eax)$/;"	l
d88	echo.asm	/^ d88:	8b 00                	mov    (%eax),%eax$/;"	l
d88	init.asm	/^ d88:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
d88	ls.asm	/^     d88:	c3                   	ret    $/;"	l
d89	ls.asm	/^     d89:	55                   	push   %ebp$/;"	l
d89	mkdir.asm	/^ d89:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d89	rm.asm	/^ d89:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d89	sh.asm	/^     d89:	89 d0                	mov    %edx,%eax$/;"	l
d89	zombie.asm	/^ d89:	eb 08                	jmp    d93 <free+0xd7>$/;"	l
d8a	echo.asm	/^ d8a:	8b 10                	mov    (%eax),%edx$/;"	l
d8a	kill.asm	/^ d8a:	89 10                	mov    %edx,(%eax)$/;"	l
d8a	ln.asm	/^ d8a:	01 c2                	add    %eax,%edx$/;"	l
d8a	ls.asm	/^     d8a:	89 e5                	mov    %esp,%ebp$/;"	l
d8b	cat.asm	/^ d8b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d8b	sh.asm	/^     d8b:	5d                   	pop    %ebp$/;"	l
d8b	stressfs.asm	/^     d8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
d8b	wc.asm	/^     d8b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d8b	zombie.asm	/^ d8b:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d8c	cs550_user.asm	/^     d8c:	eb 1f                	jmp    dad <printint+0xa7>$/;"	l
d8c	echo.asm	/^ d8c:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d8c	grep.asm	/^     d8c:	c9                   	leave  $/;"	l
d8c	kill.asm	/^ d8c:	eb 0a                	jmp    d98 <free+0x98>$/;"	l
d8c	ln.asm	/^ d8c:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d8c	ls.asm	/^     d8c:	56                   	push   %esi$/;"	l
d8c	mkdir.asm	/^ d8c:	8b 00                	mov    (%eax),%eax$/;"	l
d8c	rm.asm	/^ d8c:	8b 00                	mov    (%eax),%eax$/;"	l
d8c	sh.asm	/^     d8c:	c3                   	ret    $/;"	l
d8d	grep.asm	/^     d8d:	c3                   	ret    $/;"	l
d8d	ls.asm	/^     d8d:	53                   	push   %ebx$/;"	l
d8d	sh.asm	/^     d8d:	55                   	push   %ebp$/;"	l
d8e	cat.asm	/^ d8e:	89 04 24             	mov    %eax,(%esp)$/;"	l
d8e	cs550_user.asm	/^     d8e:	eb 1d                	jmp    dad <printint+0xa7>$/;"	l
d8e	grep.asm	/^     d8e:	55                   	push   %ebp$/;"	l
d8e	kill.asm	/^ d8e:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d8e	ls.asm	/^     d8e:	83 ec 30             	sub    $0x30,%esp$/;"	l
d8e	mkdir.asm	/^ d8e:	39 c2                	cmp    %eax,%edx$/;"	l
d8e	rm.asm	/^ d8e:	39 c2                	cmp    %eax,%edx$/;"	l
d8e	sh.asm	/^     d8e:	89 e5                	mov    %esp,%ebp$/;"	l
d8e	wc.asm	/^     d8e:	89 04 24             	mov    %eax,(%esp)$/;"	l
d8e	zombie.asm	/^ d8e:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
d8f	echo.asm	/^ d8f:	89 10                	mov    %edx,(%eax)$/;"	l
d8f	grep.asm	/^     d8f:	89 e5                	mov    %esp,%ebp$/;"	l
d8f	init.asm	/^ d8f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
d8f	ln.asm	/^ d8f:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
d8f	stressfs.asm	/^     d8f:	75 09                	jne    d9a <printf+0x101>$/;"	l
d9	kill.asm	/^  d9:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d9	sh.asm	/^      d9:	89 04 24             	mov    %eax,(%esp)$/;"	l
d9	zombie.asm	/^  d9:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d90	cs550_user.asm	/^     d90:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
d90	mkdir.asm	/^ d90:	75 24                	jne    db6 <free+0x8e>$/;"	l
d90	rm.asm	/^ d90:	75 24                	jne    db6 <free+0x8e>$/;"	l
d90	sh.asm	/^     d90:	83 ec 10             	sub    $0x10,%esp$/;"	l
d91	cat.asm	/^ d91:	e8 8d fd ff ff       	call   b23 <putc>$/;"	l
d91	echo.asm	/^ d91:	eb 0a                	jmp    d9d <free+0x98>$/;"	l
d91	grep.asm	/^     d91:	56                   	push   %esi$/;"	l
d91	kill.asm	/^ d91:	8b 10                	mov    (%eax),%edx$/;"	l
d91	ls.asm	/^     d91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
d91	stressfs.asm	/^     d91:	c7 45 f4 88 10 00 00 	movl   $0x1088,-0xc(%ebp)$/;"	l
d91	wc.asm	/^     d91:	e8 71 fe ff ff       	call   c07 <printint>$/;"	l
d91	zombie.asm	/^ d91:	89 10                	mov    %edx,(%eax)$/;"	l
d92	grep.asm	/^     d92:	53                   	push   %ebx$/;"	l
d92	ln.asm	/^ d92:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d92	mkdir.asm	/^ d92:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d92	rm.asm	/^ d92:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d93	cs550_user.asm	/^     d93:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d93	echo.asm	/^ d93:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d93	grep.asm	/^     d93:	83 ec 30             	sub    $0x30,%esp$/;"	l
d93	init.asm	/^ d93:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
d93	kill.asm	/^ d93:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d93	sh.asm	/^     d93:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
d93	zombie.asm	/^ d93:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d95	ln.asm	/^ d95:	8b 00                	mov    (%eax),%eax$/;"	l
d95	mkdir.asm	/^ d95:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
d95	rm.asm	/^ d95:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
d96	cat.asm	/^ d96:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
d96	cs550_user.asm	/^     d96:	01 d0                	add    %edx,%eax$/;"	l
d96	echo.asm	/^ d96:	8b 10                	mov    (%eax),%edx$/;"	l
d96	grep.asm	/^     d96:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
d96	init.asm	/^ d96:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
d96	kill.asm	/^ d96:	89 10                	mov    %edx,(%eax)$/;"	l
d96	wc.asm	/^     d96:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
d96	zombie.asm	/^ d96:	a3 3c 11 00 00       	mov    %eax,0x113c$/;"	l
d97	ln.asm	/^ d97:	8b 10                	mov    (%eax),%edx$/;"	l
d98	cs550_user.asm	/^     d98:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d98	echo.asm	/^ d98:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d98	kill.asm	/^ d98:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d98	ls.asm	/^     d98:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
d98	mkdir.asm	/^ d98:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d98	rm.asm	/^ d98:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d98	stressfs.asm	/^     d98:	eb 1e                	jmp    db8 <printf+0x11f>$/;"	l
d99	init.asm	/^ d99:	01 d0                	add    %edx,%eax$/;"	l
d99	ln.asm	/^ d99:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d9a	sh.asm	/^     d9a:	eb 04                	jmp    da0 <strlen+0x13>$/;"	l
d9a	stressfs.asm	/^     d9a:	eb 1c                	jmp    db8 <printf+0x11f>$/;"	l
d9a	wc.asm	/^     d9a:	e9 b3 00 00 00       	jmp    e52 <printf+0x193>$/;"	l
d9b	cs550_user.asm	/^     d9b:	0f be c0             	movsbl %al,%eax$/;"	l
d9b	echo.asm	/^ d9b:	89 10                	mov    %edx,(%eax)$/;"	l
d9b	init.asm	/^ d9b:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d9b	kill.asm	/^ d9b:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d9b	mkdir.asm	/^ d9b:	8b 00                	mov    (%eax),%eax$/;"	l
d9b	rm.asm	/^ d9b:	8b 00                	mov    (%eax),%eax$/;"	l
d9b	zombie.asm	/^ d9b:	c9                   	leave  $/;"	l
d9c	ln.asm	/^ d9c:	89 10                	mov    %edx,(%eax)$/;"	l
d9c	ls.asm	/^     d9c:	74 17                	je     db5 <printint+0x2c>$/;"	l
d9c	sh.asm	/^     d9c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
d9c	stressfs.asm	/^     d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d9c	zombie.asm	/^ d9c:	c3                   	ret    $/;"	l
d9d	cat.asm	/^ d9d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
d9d	echo.asm	/^ d9d:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d9d	grep.asm	/^     d9d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
d9d	mkdir.asm	/^ d9d:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d9d	rm.asm	/^ d9d:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d9d	zombie.asm	/^ d9d:	55                   	push   %ebp$/;"	l
d9e	cs550_user.asm	/^     d9e:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d9e	init.asm	/^ d9e:	84 c0                	test   %al,%al$/;"	l
d9e	kill.asm	/^ d9e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
d9e	ln.asm	/^ d9e:	eb 0a                	jmp    daa <free+0x98>$/;"	l
d9e	ls.asm	/^     d9e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
d9e	zombie.asm	/^ d9e:	89 e5                	mov    %esp,%ebp$/;"	l
d9f	stressfs.asm	/^     d9f:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d9f	wc.asm	/^     d9f:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
da	init.asm	/^  da:	eb 14                	jmp    f0 <main+0xf0>$/;"	l
da0	echo.asm	/^ da0:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
da0	init.asm	/^ da0:	0f 85 71 fe ff ff    	jne    c17 <printf+0x22>$/;"	l
da0	ln.asm	/^ da0:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
da0	mkdir.asm	/^ da0:	01 c2                	add    %eax,%edx$/;"	l
da0	rm.asm	/^ da0:	01 c2                	add    %eax,%edx$/;"	l
da0	sh.asm	/^     da0:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
da0	zombie.asm	/^ da0:	83 ec 28             	sub    $0x28,%esp$/;"	l
da1	cat.asm	/^ da1:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
da1	grep.asm	/^     da1:	74 17                	je     dba <printint+0x2c>$/;"	l
da2	cs550_user.asm	/^     da2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
da2	ls.asm	/^     da2:	79 11                	jns    db5 <printint+0x2c>$/;"	l
da2	mkdir.asm	/^ da2:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
da2	rm.asm	/^ da2:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
da2	stressfs.asm	/^     da2:	0f be c0             	movsbl %al,%eax$/;"	l
da3	echo.asm	/^ da3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
da3	grep.asm	/^     da3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
da3	ln.asm	/^ da3:	8b 10                	mov    (%eax),%edx$/;"	l
da3	sh.asm	/^     da3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
da3	wc.asm	/^     da3:	75 45                	jne    dea <printf+0x12b>$/;"	l
da3	zombie.asm	/^ da3:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)$/;"	l
da4	cat.asm	/^ da4:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
da4	ls.asm	/^     da4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
da5	cs550_user.asm	/^     da5:	89 04 24             	mov    %eax,(%esp)$/;"	l
da5	kill.asm	/^ da5:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
da5	ln.asm	/^ da5:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
da5	mkdir.asm	/^ da5:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
da5	rm.asm	/^ da5:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
da5	stressfs.asm	/^     da5:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
da5	wc.asm	/^     da5:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
da6	init.asm	/^ da6:	c9                   	leave  $/;"	l
da6	sh.asm	/^     da6:	01 d0                	add    %edx,%eax$/;"	l
da7	cat.asm	/^ da7:	01 d0                	add    %edx,%eax$/;"	l
da7	grep.asm	/^     da7:	79 11                	jns    dba <printint+0x2c>$/;"	l
da7	init.asm	/^ da7:	c3                   	ret    $/;"	l
da8	cs550_user.asm	/^     da8:	e8 31 ff ff ff       	call   cde <putc>$/;"	l
da8	init.asm	/^ da8:	55                   	push   %ebp$/;"	l
da8	kill.asm	/^ da8:	01 d0                	add    %edx,%eax$/;"	l
da8	ln.asm	/^ da8:	89 10                	mov    %edx,(%eax)$/;"	l
da8	mkdir.asm	/^ da8:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
da8	rm.asm	/^ da8:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
da8	sh.asm	/^     da8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
da8	wc.asm	/^     da8:	8b 00                	mov    (%eax),%eax$/;"	l
da9	cat.asm	/^ da9:	0f b6 00             	movzbl (%eax),%eax$/;"	l
da9	grep.asm	/^     da9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
da9	init.asm	/^ da9:	89 e5                	mov    %esp,%ebp$/;"	l
da9	stressfs.asm	/^     da9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
daa	echo.asm	/^ daa:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
daa	kill.asm	/^ daa:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
daa	ln.asm	/^ daa:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
daa	wc.asm	/^     daa:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
daa	zombie.asm	/^ daa:	77 07                	ja     db3 <morecore+0x16>$/;"	l
dab	init.asm	/^ dab:	83 ec 10             	sub    $0x10,%esp$/;"	l
dab	ls.asm	/^     dab:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
dab	mkdir.asm	/^ dab:	8b 00                	mov    (%eax),%eax$/;"	l
dab	rm.asm	/^ dab:	8b 00                	mov    (%eax),%eax$/;"	l
dab	sh.asm	/^     dab:	84 c0                	test   %al,%al$/;"	l
dac	cat.asm	/^ dac:	84 c0                	test   %al,%al$/;"	l
dac	stressfs.asm	/^     dac:	89 04 24             	mov    %eax,(%esp)$/;"	l
dac	zombie.asm	/^ dac:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)$/;"	l
dad	cs550_user.asm	/^     dad:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
dad	echo.asm	/^ dad:	01 d0                	add    %edx,%eax$/;"	l
dad	kill.asm	/^ dad:	75 20                	jne    dcf <free+0xcf>$/;"	l
dad	ln.asm	/^ dad:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
dad	mkdir.asm	/^ dad:	8b 10                	mov    (%eax),%edx$/;"	l
dad	rm.asm	/^ dad:	8b 10                	mov    (%eax),%edx$/;"	l
dad	sh.asm	/^     dad:	75 ed                	jne    d9c <strlen+0xf>$/;"	l
dad	wc.asm	/^     dad:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
dae	cat.asm	/^ dae:	0f 85 71 fe ff ff    	jne    c25 <printf+0x22>$/;"	l
dae	init.asm	/^ dae:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dae	ls.asm	/^     dae:	f7 d8                	neg    %eax$/;"	l
daf	echo.asm	/^ daf:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
daf	kill.asm	/^ daf:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
daf	mkdir.asm	/^ daf:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
daf	rm.asm	/^ daf:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
daf	sh.asm	/^     daf:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
daf	stressfs.asm	/^     daf:	e8 05 fe ff ff       	call   bb9 <putc>$/;"	l
data	buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
day	date.h	/^  uint day;$/;"	m	struct:rtcdate
db	cs550_user.asm	/^      db:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
db	echo.asm	/^  db:	0f b6 10             	movzbl (%eax),%edx$/;"	l
db	grep.asm	/^      db:	ba ff 03 00 00       	mov    $0x3ff,%edx$/;"	l
db	ln.asm	/^  db:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
db	ls.asm	/^      db:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
db	mkdir.asm	/^  db:	84 c0                	test   %al,%al$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	rm.asm	/^  db:	84 c0                	test   %al,%al$/;"	l
db	wc.asm	/^      db:	89 44 24 10          	mov    %eax,0x10(%esp)$/;"	l
db0	grep.asm	/^     db0:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
db0	ln.asm	/^ db0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
db0	ls.asm	/^     db0:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
db1	cs550_user.asm	/^     db1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
db1	init.asm	/^ db1:	83 e8 08             	sub    $0x8,%eax$/;"	l
db1	wc.asm	/^     db1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
db2	echo.asm	/^ db2:	75 20                	jne    dd4 <free+0xcf>$/;"	l
db2	kill.asm	/^ db2:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
db2	mkdir.asm	/^ db2:	89 10                	mov    %edx,(%eax)$/;"	l
db2	rm.asm	/^ db2:	89 10                	mov    %edx,(%eax)$/;"	l
db2	sh.asm	/^     db2:	c9                   	leave  $/;"	l
db3	grep.asm	/^     db3:	f7 d8                	neg    %eax$/;"	l
db3	ls.asm	/^     db3:	eb 06                	jmp    dbb <printint+0x32>$/;"	l
db3	sh.asm	/^     db3:	c3                   	ret    $/;"	l
db3	zombie.asm	/^ db3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
db4	cat.asm	/^ db4:	c9                   	leave  $/;"	l
db4	echo.asm	/^ db4:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
db4	init.asm	/^ db4:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
db4	mkdir.asm	/^ db4:	eb 0a                	jmp    dc0 <free+0x98>$/;"	l
db4	rm.asm	/^ db4:	eb 0a                	jmp    dc0 <free+0x98>$/;"	l
db4	sh.asm	/^     db4:	55                   	push   %ebp$/;"	l
db4	stressfs.asm	/^     db4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
db5	cat.asm	/^ db5:	c3                   	ret    $/;"	l
db5	cs550_user.asm	/^     db5:	79 d9                	jns    d90 <printint+0x8a>$/;"	l
db5	grep.asm	/^     db5:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
db5	kill.asm	/^ db5:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
db5	ls.asm	/^     db5:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
db5	sh.asm	/^     db5:	89 e5                	mov    %esp,%ebp$/;"	l
db5	wc.asm	/^     db5:	75 09                	jne    dc0 <printf+0x101>$/;"	l
db6	cat.asm	/^ db6:	55                   	push   %ebp$/;"	l
db6	mkdir.asm	/^ db6:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
db6	rm.asm	/^ db6:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
db6	zombie.asm	/^ db6:	c1 e0 03             	shl    $0x3,%eax$/;"	l
db7	cat.asm	/^ db7:	89 e5                	mov    %esp,%ebp$/;"	l
db7	cs550_user.asm	/^     db7:	83 c4 30             	add    $0x30,%esp$/;"	l
db7	echo.asm	/^ db7:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
db7	init.asm	/^ db7:	a1 80 12 00 00       	mov    0x1280,%eax$/;"	l
db7	ln.asm	/^ db7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
db7	sh.asm	/^     db7:	83 ec 0c             	sub    $0xc,%esp$/;"	l
db7	wc.asm	/^     db7:	c7 45 f4 c3 10 00 00 	movl   $0x10c3,-0xc(%ebp)$/;"	l
db8	grep.asm	/^     db8:	eb 06                	jmp    dc0 <printint+0x32>$/;"	l
db8	kill.asm	/^ db8:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
db8	ls.asm	/^     db8:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
db8	stressfs.asm	/^     db8:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
db9	cat.asm	/^ db9:	83 ec 10             	sub    $0x10,%esp$/;"	l
db9	mkdir.asm	/^ db9:	8b 10                	mov    (%eax),%edx$/;"	l
db9	rm.asm	/^ db9:	8b 10                	mov    (%eax),%edx$/;"	l
db9	zombie.asm	/^ db9:	89 04 24             	mov    %eax,(%esp)$/;"	l
dba	cs550_user.asm	/^     dba:	5b                   	pop    %ebx$/;"	l
dba	echo.asm	/^ dba:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
dba	grep.asm	/^     dba:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
dba	ln.asm	/^ dba:	01 d0                	add    %edx,%eax$/;"	l
dba	sh.asm	/^     dba:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
dbb	cs550_user.asm	/^     dbb:	5e                   	pop    %esi$/;"	l
dbb	kill.asm	/^ dbb:	01 c2                	add    %eax,%edx$/;"	l
dbb	ls.asm	/^     dbb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
dbb	mkdir.asm	/^ dbb:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
dbb	rm.asm	/^ dbb:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
dbb	stressfs.asm	/^     dbb:	0f b6 00             	movzbl (%eax),%eax$/;"	l
dbc	cat.asm	/^ dbc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dbc	cs550_user.asm	/^     dbc:	5d                   	pop    %ebp$/;"	l
dbc	init.asm	/^ dbc:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
dbc	ln.asm	/^ dbc:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
dbc	zombie.asm	/^ dbc:	e8 52 f5 ff ff       	call   313 <sbrk>$/;"	l
dbd	cs550_user.asm	/^     dbd:	c3                   	ret    $/;"	l
dbd	echo.asm	/^ dbd:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
dbd	grep.asm	/^     dbd:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
dbd	kill.asm	/^ dbd:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dbd	sh.asm	/^     dbd:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
dbe	cs550_user.asm	/^     dbe:	55                   	push   %ebp$/;"	l
dbe	mkdir.asm	/^ dbe:	89 10                	mov    %edx,(%eax)$/;"	l
dbe	rm.asm	/^ dbe:	89 10                	mov    %edx,(%eax)$/;"	l
dbe	stressfs.asm	/^     dbe:	84 c0                	test   %al,%al$/;"	l
dbe	wc.asm	/^     dbe:	eb 1e                	jmp    dde <printf+0x11f>$/;"	l
dbf	cat.asm	/^ dbf:	83 e8 08             	sub    $0x8,%eax$/;"	l
dbf	cs550_user.asm	/^     dbf:	89 e5                	mov    %esp,%ebp$/;"	l
dbf	init.asm	/^ dbf:	eb 24                	jmp    de5 <free+0x3d>$/;"	l
dbf	ln.asm	/^ dbf:	75 20                	jne    de1 <free+0xcf>$/;"	l
dc	cat.asm	/^  dc:	00 $/;"	l
dc	init.asm	/^  dc:	c7 44 24 04 08 10 00 	movl   $0x1008,0x4(%esp)$/;"	l
dc	kill.asm	/^  dc:	0f b6 00             	movzbl (%eax),%eax$/;"	l
dc	sh.asm	/^      dc:	e8 1f ff ff ff       	call   0 <runcmd>$/;"	l
dc	zombie.asm	/^  dc:	c9                   	leave  $/;"	l
dc0	echo.asm	/^ dc0:	01 c2                	add    %eax,%edx$/;"	l
dc0	grep.asm	/^     dc0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
dc0	kill.asm	/^ dc0:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
dc0	mkdir.asm	/^ dc0:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dc0	rm.asm	/^ dc0:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dc0	stressfs.asm	/^     dc0:	75 da                	jne    d9c <printf+0x103>$/;"	l
dc0	wc.asm	/^     dc0:	eb 1c                	jmp    dde <printf+0x11f>$/;"	l
dc1	cs550_user.asm	/^     dc1:	83 ec 38             	sub    $0x38,%esp$/;"	l
dc1	init.asm	/^ dc1:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dc1	ln.asm	/^ dc1:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dc1	sh.asm	/^     dc1:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
dc1	zombie.asm	/^ dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
dc2	cat.asm	/^ dc2:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
dc2	echo.asm	/^ dc2:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dc2	ls.asm	/^     dc2:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
dc2	stressfs.asm	/^     dc2:	eb 68                	jmp    e2c <printf+0x193>$/;"	l
dc2	wc.asm	/^     dc2:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
dc3	kill.asm	/^ dc3:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
dc3	mkdir.asm	/^ dc3:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
dc3	rm.asm	/^ dc3:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
dc4	cs550_user.asm	/^     dc4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
dc4	init.asm	/^ dc4:	8b 00                	mov    (%eax),%eax$/;"	l
dc4	ln.asm	/^ dc4:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
dc4	sh.asm	/^     dc4:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
dc4	stressfs.asm	/^     dc4:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
dc4	zombie.asm	/^ dc4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)$/;"	l
dc5	cat.asm	/^ dc5:	a1 88 12 00 00       	mov    0x1288,%eax$/;"	l
dc5	echo.asm	/^ dc5:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
dc5	ls.asm	/^     dc5:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
dc5	wc.asm	/^     dc5:	0f b6 00             	movzbl (%eax),%eax$/;"	l
dc6	init.asm	/^ dc6:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
dc6	kill.asm	/^ dc6:	8b 10                	mov    (%eax),%edx$/;"	l
dc6	mkdir.asm	/^ dc6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
dc6	rm.asm	/^ dc6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
dc7	grep.asm	/^     dc7:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
dc7	ln.asm	/^ dc7:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
dc8	echo.asm	/^ dc8:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
dc8	kill.asm	/^ dc8:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dc8	ls.asm	/^     dc8:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
dc8	sh.asm	/^     dc8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dc8	stressfs.asm	/^     dc8:	75 1d                	jne    de7 <printf+0x14e>$/;"	l
dc8	wc.asm	/^     dc8:	0f be c0             	movsbl %al,%eax$/;"	l
dc8	zombie.asm	/^ dc8:	75 07                	jne    dd1 <morecore+0x34>$/;"	l
dc9	init.asm	/^ dc9:	77 12                	ja     ddd <free+0x35>$/;"	l
dca	cat.asm	/^ dca:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
dca	grep.asm	/^     dca:	8d 41 01             	lea    0x1(%ecx),%eax$/;"	l
dca	ln.asm	/^ dca:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
dca	stressfs.asm	/^     dca:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
dca	zombie.asm	/^ dca:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
dcb	cs550_user.asm	/^     dcb:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
dcb	echo.asm	/^ dcb:	8b 10                	mov    (%eax),%edx$/;"	l
dcb	init.asm	/^ dcb:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
dcb	kill.asm	/^ dcb:	89 10                	mov    %edx,(%eax)$/;"	l
dcb	ls.asm	/^     dcb:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
dcb	sh.asm	/^     dcb:	89 04 24             	mov    %eax,(%esp)$/;"	l
dcb	wc.asm	/^     dcb:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
dcd	cat.asm	/^ dcd:	eb 24                	jmp    df3 <free+0x3d>$/;"	l
dcd	echo.asm	/^ dcd:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dcd	grep.asm	/^     dcd:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
dcd	kill.asm	/^ dcd:	eb 08                	jmp    dd7 <free+0xd7>$/;"	l
dcd	ln.asm	/^ dcd:	01 c2                	add    %eax,%edx$/;"	l
dcd	mkdir.asm	/^ dcd:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dcd	rm.asm	/^ dcd:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dcd	stressfs.asm	/^     dcd:	8b 00                	mov    (%eax),%eax$/;"	l
dce	cs550_user.asm	/^     dce:	83 c0 04             	add    $0x4,%eax$/;"	l
dce	init.asm	/^ dce:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
dce	ls.asm	/^     dce:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
dce	sh.asm	/^     dce:	e8 26 ff ff ff       	call   cf9 <stosb>$/;"	l
dcf	cat.asm	/^ dcf:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dcf	kill.asm	/^ dcf:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dcf	ln.asm	/^ dcf:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dcf	stressfs.asm	/^     dcf:	0f be c0             	movsbl %al,%eax$/;"	l
dcf	wc.asm	/^     dcf:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dcf	zombie.asm	/^ dcf:	eb 22                	jmp    df3 <morecore+0x56>$/;"	l
dd	cat.asm	/^  dd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
dd	forktest.asm	/^  dd:	00 $/;"	l
dd	mkdir.asm	/^  dd:	75 e2                	jne    c1 <strcpy+0xd>$/;"	l
dd	rm.asm	/^  dd:	75 e2                	jne    c1 <strcpy+0xd>$/;"	l
dd	stressfs.asm	/^      dd:	c7 84 24 2c 02 00 00 	movl   $0x0,0x22c(%esp)$/;"	l
dd	zombie.asm	/^  dd:	c3                   	ret    $/;"	l
dd0	echo.asm	/^ dd0:	89 10                	mov    %edx,(%eax)$/;"	l
dd0	grep.asm	/^     dd0:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
dd0	mkdir.asm	/^ dd0:	01 d0                	add    %edx,%eax$/;"	l
dd0	rm.asm	/^ dd0:	01 d0                	add    %edx,%eax$/;"	l
dd1	cs550_user.asm	/^     dd1:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
dd1	init.asm	/^ dd1:	77 24                	ja     df7 <free+0x4f>$/;"	l
dd1	ls.asm	/^     dd1:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
dd1	zombie.asm	/^ dd1:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
dd2	cat.asm	/^ dd2:	8b 00                	mov    (%eax),%eax$/;"	l
dd2	echo.asm	/^ dd2:	eb 08                	jmp    ddc <free+0xd7>$/;"	l
dd2	kill.asm	/^ dd2:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
dd2	ln.asm	/^ dd2:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
dd2	mkdir.asm	/^ dd2:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
dd2	rm.asm	/^ dd2:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
dd2	stressfs.asm	/^     dd2:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
dd2	wc.asm	/^     dd2:	89 04 24             	mov    %eax,(%esp)$/;"	l
dd3	grep.asm	/^     dd3:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
dd3	init.asm	/^ dd3:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dd3	sh.asm	/^     dd3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dd4	cat.asm	/^ dd4:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
dd4	cs550_user.asm	/^     dd4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
dd4	echo.asm	/^ dd4:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dd4	zombie.asm	/^ dd4:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
dd5	kill.asm	/^ dd5:	89 10                	mov    %edx,(%eax)$/;"	l
dd5	ln.asm	/^ dd5:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
dd5	mkdir.asm	/^ dd5:	75 20                	jne    df7 <free+0xcf>$/;"	l
dd5	rm.asm	/^ dd5:	75 20                	jne    df7 <free+0xcf>$/;"	l
dd5	wc.asm	/^     dd5:	e8 05 fe ff ff       	call   bdf <putc>$/;"	l
dd6	grep.asm	/^     dd6:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
dd6	init.asm	/^ dd6:	8b 00                	mov    (%eax),%eax$/;"	l
dd6	ls.asm	/^     dd6:	f7 f3                	div    %ebx$/;"	l
dd6	sh.asm	/^     dd6:	c9                   	leave  $/;"	l
dd6	stressfs.asm	/^     dd6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dd7	cat.asm	/^ dd7:	77 12                	ja     deb <free+0x35>$/;"	l
dd7	echo.asm	/^ dd7:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
dd7	kill.asm	/^ dd7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dd7	mkdir.asm	/^ dd7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dd7	rm.asm	/^ dd7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dd7	sh.asm	/^     dd7:	c3                   	ret    $/;"	l
dd7	zombie.asm	/^ dd7:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
dd8	init.asm	/^ dd8:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
dd8	ln.asm	/^ dd8:	8b 10                	mov    (%eax),%edx$/;"	l
dd8	ls.asm	/^     dd8:	89 d0                	mov    %edx,%eax$/;"	l
dd8	sh.asm	/^     dd8:	55                   	push   %ebp$/;"	l
dd9	cat.asm	/^ dd9:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
dd9	sh.asm	/^     dd9:	89 e5                	mov    %esp,%ebp$/;"	l
dd9	stressfs.asm	/^     dd9:	89 04 24             	mov    %eax,(%esp)$/;"	l
dda	echo.asm	/^ dda:	89 10                	mov    %edx,(%eax)$/;"	l
dda	kill.asm	/^ dda:	a3 94 11 00 00       	mov    %eax,0x1194$/;"	l
dda	ln.asm	/^ dda:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dda	ls.asm	/^     dda:	0f b6 80 f8 14 00 00 	movzbl 0x14f8(%eax),%eax$/;"	l
dda	mkdir.asm	/^ dda:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
dda	rm.asm	/^ dda:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
dda	wc.asm	/^     dda:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
dda	zombie.asm	/^ dda:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
ddb	cs550_user.asm	/^     ddb:	e9 7c 01 00 00       	jmp    f5c <printf+0x19e>$/;"	l
ddb	grep.asm	/^     ddb:	f7 f3                	div    %ebx$/;"	l
ddb	init.asm	/^ ddb:	77 1a                	ja     df7 <free+0x4f>$/;"	l
ddb	sh.asm	/^     ddb:	83 ec 04             	sub    $0x4,%esp$/;"	l
ddc	cat.asm	/^ ddc:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
ddc	echo.asm	/^ ddc:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ddc	stressfs.asm	/^     ddc:	e8 d8 fd ff ff       	call   bb9 <putc>$/;"	l
ddd	grep.asm	/^     ddd:	89 d0                	mov    %edx,%eax$/;"	l
ddd	init.asm	/^ ddd:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ddd	ln.asm	/^ ddd:	89 10                	mov    %edx,(%eax)$/;"	l
ddd	mkdir.asm	/^ ddd:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ddd	rm.asm	/^ ddd:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ddd	zombie.asm	/^ ddd:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
dde	sh.asm	/^     dde:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
dde	wc.asm	/^     dde:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ddf	cat.asm	/^ ddf:	77 24                	ja     e05 <free+0x4f>$/;"	l
ddf	echo.asm	/^ ddf:	a3 90 11 00 00       	mov    %eax,0x1190$/;"	l
ddf	grep.asm	/^     ddf:	0f b6 80 18 15 00 00 	movzbl 0x1518(%eax),%eax$/;"	l
ddf	kill.asm	/^ ddf:	c9                   	leave  $/;"	l
ddf	ln.asm	/^ ddf:	eb 08                	jmp    de9 <free+0xd7>$/;"	l
de	cs550_user.asm	/^      de:	89 44 24 0c          	mov    %eax,0xc(%esp)$/;"	l
de	echo.asm	/^  de:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
de	forktest.asm	/^  de:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
de	ln.asm	/^  de:	0f b6 00             	movzbl (%eax),%eax$/;"	l
de	zombie.asm	/^  de:	55                   	push   %ebp$/;"	l
de0	cs550_user.asm	/^     de0:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
de0	init.asm	/^ de0:	8b 00                	mov    (%eax),%eax$/;"	l
de0	kill.asm	/^ de0:	c3                   	ret    $/;"	l
de0	mkdir.asm	/^ de0:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
de0	rm.asm	/^ de0:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
de0	zombie.asm	/^ de0:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
de1	cat.asm	/^ de1:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
de1	kill.asm	/^ de1:	55                   	push   %ebp$/;"	l
de1	ln.asm	/^ de1:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
de1	ls.asm	/^     de1:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
de1	sh.asm	/^     de1:	88 45 fc             	mov    %al,-0x4(%ebp)$/;"	l
de1	stressfs.asm	/^     de1:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
de1	wc.asm	/^     de1:	0f b6 00             	movzbl (%eax),%eax$/;"	l
de2	init.asm	/^ de2:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
de2	kill.asm	/^ de2:	89 e5                	mov    %esp,%ebp$/;"	l
de3	cs550_user.asm	/^     de3:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
de3	mkdir.asm	/^ de3:	01 c2                	add    %eax,%edx$/;"	l
de3	rm.asm	/^ de3:	01 c2                	add    %eax,%edx$/;"	l
de3	zombie.asm	/^ de3:	83 c0 08             	add    $0x8,%eax$/;"	l
de4	cat.asm	/^ de4:	8b 00                	mov    (%eax),%eax$/;"	l
de4	echo.asm	/^ de4:	c9                   	leave  $/;"	l
de4	kill.asm	/^ de4:	83 ec 28             	sub    $0x28,%esp$/;"	l
de4	ln.asm	/^ de4:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
de4	sh.asm	/^     de4:	eb 14                	jmp    dfa <strchr+0x22>$/;"	l
de4	wc.asm	/^     de4:	84 c0                	test   %al,%al$/;"	l
de5	echo.asm	/^ de5:	c3                   	ret    $/;"	l
de5	init.asm	/^ de5:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
de5	ls.asm	/^     de5:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
de5	mkdir.asm	/^ de5:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
de5	rm.asm	/^ de5:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
de5	stressfs.asm	/^     de5:	eb 45                	jmp    e2c <printf+0x193>$/;"	l
de6	cat.asm	/^ de6:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
de6	cs550_user.asm	/^     de6:	01 d0                	add    %edx,%eax$/;"	l
de6	echo.asm	/^ de6:	55                   	push   %ebp$/;"	l
de6	grep.asm	/^     de6:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)$/;"	l
de6	sh.asm	/^     de6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
de6	wc.asm	/^     de6:	75 da                	jne    dc2 <printf+0x103>$/;"	l
de6	zombie.asm	/^ de6:	89 04 24             	mov    %eax,(%esp)$/;"	l
de7	echo.asm	/^ de7:	89 e5                	mov    %esp,%ebp$/;"	l
de7	kill.asm	/^ de7:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)$/;"	l
de7	ln.asm	/^ de7:	89 10                	mov    %edx,(%eax)$/;"	l
de7	stressfs.asm	/^     de7:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
de8	cs550_user.asm	/^     de8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
de8	init.asm	/^ de8:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
de8	ls.asm	/^     de8:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
de8	mkdir.asm	/^ de8:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
de8	rm.asm	/^ de8:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
de8	wc.asm	/^     de8:	eb 68                	jmp    e52 <printf+0x193>$/;"	l
de9	cat.asm	/^ de9:	77 1a                	ja     e05 <free+0x4f>$/;"	l
de9	echo.asm	/^ de9:	83 ec 28             	sub    $0x28,%esp$/;"	l
de9	ln.asm	/^ de9:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
de9	sh.asm	/^     de9:	0f b6 00             	movzbl (%eax),%eax$/;"	l
de9	zombie.asm	/^ de9:	e8 ce fe ff ff       	call   cbc <free>$/;"	l
dea	grep.asm	/^     dea:	8b 75 10             	mov    0x10(%ebp),%esi$/;"	l
dea	wc.asm	/^     dea:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
deallocuvm	vm.s	/^deallocuvm:$/;"	l
deb	cat.asm	/^ deb:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
deb	cs550_user.asm	/^     deb:	0f be c0             	movsbl %al,%eax$/;"	l
deb	init.asm	/^ deb:	76 d4                	jbe    dc1 <free+0x19>$/;"	l
deb	ls.asm	/^     deb:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
deb	mkdir.asm	/^ deb:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
deb	rm.asm	/^ deb:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
deb	stressfs.asm	/^     deb:	75 17                	jne    e04 <printf+0x16b>$/;"	l
dec	echo.asm	/^ dec:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)$/;"	l
dec	ln.asm	/^ dec:	a3 bc 11 00 00       	mov    %eax,0x11bc$/;"	l
dec	sh.asm	/^     dec:	3a 45 fc             	cmp    -0x4(%ebp),%al$/;"	l
ded	grep.asm	/^     ded:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
ded	init.asm	/^ ded:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ded	stressfs.asm	/^     ded:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
dee	cat.asm	/^ dee:	8b 00                	mov    (%eax),%eax$/;"	l
dee	cs550_user.asm	/^     dee:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
dee	kill.asm	/^ dee:	77 07                	ja     df7 <morecore+0x16>$/;"	l
dee	mkdir.asm	/^ dee:	8b 10                	mov    (%eax),%edx$/;"	l
dee	rm.asm	/^ dee:	8b 10                	mov    (%eax),%edx$/;"	l
dee	wc.asm	/^     dee:	75 1d                	jne    e0d <printf+0x14e>$/;"	l
dee	zombie.asm	/^ dee:	a1 3c 11 00 00       	mov    0x113c,%eax$/;"	l
def	sh.asm	/^     def:	75 05                	jne    df6 <strchr+0x1e>$/;"	l
default	kernel.asm	/^    default:$/;"	l
default	kernel.asm	/^  default:$/;"	l
default	sh.asm	/^  default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	log.c	/^  int dev;$/;"	m	struct:log	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	file.h	/^struct devsw {$/;"	s
df	kill.asm	/^  df:	38 c2                	cmp    %al,%dl$/;"	l
df	ls.asm	/^      df:	c7 44 24 04 0d 12 00 	movl   $0x120d,0x4(%esp)$/;"	l
df	mkdir.asm	/^  df:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
df	rm.asm	/^  df:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
df	wc.asm	/^      df:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
df	zombie.asm	/^  df:	89 e5                	mov    %esp,%ebp$/;"	l
df0	cat.asm	/^ df0:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
df0	grep.asm	/^     df0:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
df0	init.asm	/^ df0:	8b 00                	mov    (%eax),%eax$/;"	l
df0	kill.asm	/^ df0:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)$/;"	l
df0	ls.asm	/^     df0:	f7 f6                	div    %esi$/;"	l
df0	mkdir.asm	/^ df0:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
df0	rm.asm	/^ df0:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
df0	stressfs.asm	/^     df0:	0f be c0             	movsbl %al,%eax$/;"	l
df0	wc.asm	/^     df0:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
df1	ln.asm	/^ df1:	c9                   	leave  $/;"	l
df1	sh.asm	/^     df1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
df2	init.asm	/^ df2:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
df2	ln.asm	/^ df2:	c3                   	ret    $/;"	l
df2	ls.asm	/^     df2:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
df3	cat.asm	/^ df3:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
df3	cs550_user.asm	/^     df3:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
df3	echo.asm	/^ df3:	77 07                	ja     dfc <morecore+0x16>$/;"	l
df3	ln.asm	/^ df3:	55                   	push   %ebp$/;"	l
df3	mkdir.asm	/^ df3:	89 10                	mov    %edx,(%eax)$/;"	l
df3	rm.asm	/^ df3:	89 10                	mov    %edx,(%eax)$/;"	l
df3	stressfs.asm	/^     df3:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
df3	wc.asm	/^     df3:	8b 00                	mov    (%eax),%eax$/;"	l
df3	zombie.asm	/^ df3:	c9                   	leave  $/;"	l
df4	ln.asm	/^ df4:	89 e5                	mov    %esp,%ebp$/;"	l
df4	sh.asm	/^     df4:	eb 13                	jmp    e09 <strchr+0x31>$/;"	l
df4	zombie.asm	/^ df4:	c3                   	ret    $/;"	l
df5	echo.asm	/^ df5:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)$/;"	l
df5	grep.asm	/^     df5:	f7 f6                	div    %esi$/;"	l
df5	init.asm	/^ df5:	76 ca                	jbe    dc1 <free+0x19>$/;"	l
df5	ls.asm	/^     df5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
df5	mkdir.asm	/^ df5:	eb 08                	jmp    dff <free+0xd7>$/;"	l
df5	rm.asm	/^ df5:	eb 08                	jmp    dff <free+0xd7>$/;"	l
df5	wc.asm	/^     df5:	0f be c0             	movsbl %al,%eax$/;"	l
df5	zombie.asm	/^ df5:	55                   	push   %ebp$/;"	l
df6	cat.asm	/^ df6:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
df6	cs550_user.asm	/^     df6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
df6	ln.asm	/^ df6:	83 ec 28             	sub    $0x28,%esp$/;"	l
df6	sh.asm	/^     df6:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
df6	zombie.asm	/^ df6:	89 e5                	mov    %esp,%ebp$/;"	l
df7	grep.asm	/^     df7:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
df7	init.asm	/^ df7:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
df7	kill.asm	/^ df7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
df7	mkdir.asm	/^ df7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
df7	rm.asm	/^ df7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
df7	stressfs.asm	/^     df7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
df8	wc.asm	/^     df8:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
df8	zombie.asm	/^ df8:	83 ec 28             	sub    $0x28,%esp$/;"	l
df9	cat.asm	/^ df9:	76 d4                	jbe    dcf <free+0x19>$/;"	l
df9	ln.asm	/^ df9:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)$/;"	l
df9	ls.asm	/^     df9:	75 c7                	jne    dc2 <printint+0x39>$/;"	l
dfa	cs550_user.asm	/^     dfa:	75 2c                	jne    e28 <printf+0x6a>$/;"	l
dfa	grep.asm	/^     dfa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
dfa	init.asm	/^ dfa:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
dfa	kill.asm	/^ dfa:	c1 e0 03             	shl    $0x3,%eax$/;"	l
dfa	mkdir.asm	/^ dfa:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
dfa	rm.asm	/^ dfa:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
dfa	sh.asm	/^     dfa:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dfa	stressfs.asm	/^     dfa:	89 04 24             	mov    %eax,(%esp)$/;"	l
dfb	cat.asm	/^ dfb:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dfb	ls.asm	/^     dfb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
dfb	zombie.asm	/^ dfb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dfc	cs550_user.asm	/^     dfc:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
dfc	echo.asm	/^ dfc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dfc	wc.asm	/^     dfc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dfd	init.asm	/^ dfd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
dfd	kill.asm	/^ dfd:	89 04 24             	mov    %eax,(%esp)$/;"	l
dfd	mkdir.asm	/^ dfd:	89 10                	mov    %edx,(%eax)$/;"	l
dfd	rm.asm	/^ dfd:	89 10                	mov    %edx,(%eax)$/;"	l
dfd	sh.asm	/^     dfd:	0f b6 00             	movzbl (%eax),%eax$/;"	l
dfd	stressfs.asm	/^     dfd:	e8 b7 fd ff ff       	call   bb9 <putc>$/;"	l
dfe	cat.asm	/^ dfe:	8b 00                	mov    (%eax),%eax$/;"	l
dfe	grep.asm	/^     dfe:	75 c7                	jne    dc7 <printint+0x39>$/;"	l
dfe	zombie.asm	/^ dfe:	83 c0 07             	add    $0x7,%eax$/;"	l
dff	echo.asm	/^ dff:	c1 e0 03             	shl    $0x3,%eax$/;"	l
dff	ls.asm	/^     dff:	74 10                	je     e11 <printint+0x88>$/;"	l
dff	mkdir.asm	/^ dff:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dff	rm.asm	/^ dff:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dff	wc.asm	/^     dff:	89 04 24             	mov    %eax,(%esp)$/;"	l
dinode	fs.h	/^struct dinode {$/;"	s
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlink	fs.s	/^dirlink:$/;"	l
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirlookup	fs.s	/^dirlookup:$/;"	l
dirtest	usertests.c	/^void dirtest(void)$/;"	f
disksize	memide.c	/^static int disksize;$/;"	v	file:
do_commit	kernel.asm	/^    do_commit = 1;$/;"	d
doprocdump	kernel.asm	/^      doprocdump = 1;   \/\/ procdump() locks cons.lock indirectly; invoke later$/;"	d
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	cs550_user.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	stressfs.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon6	file:
e	kernel.asm	/^  e = addr+len;$/;"	d
e	zombie.asm	/^   e:	85 c0                	test   %eax,%eax$/;"	l
e0	grep.asm	/^      e0:	29 c2                	sub    %eax,%edx$/;"	l
e00	cat.asm	/^ e00:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
e00	cs550_user.asm	/^     e00:	75 0c                	jne    e0e <printf+0x50>$/;"	l
e00	grep.asm	/^     e00:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
e00	kill.asm	/^ e00:	e8 52 f5 ff ff       	call   357 <sbrk>$/;"	l
e00	ln.asm	/^ e00:	77 07                	ja     e09 <morecore+0x16>$/;"	l
e00	sh.asm	/^     e00:	84 c0                	test   %al,%al$/;"	l
e01	ls.asm	/^     e01:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e01	zombie.asm	/^ e01:	c1 e8 03             	shr    $0x3,%eax$/;"	l
e02	cs550_user.asm	/^     e02:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
e02	echo.asm	/^ e02:	89 04 24             	mov    %eax,(%esp)$/;"	l
e02	ln.asm	/^ e02:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)$/;"	l
e02	mkdir.asm	/^ e02:	a3 dc 11 00 00       	mov    %eax,0x11dc$/;"	l
e02	rm.asm	/^ e02:	a3 d8 11 00 00       	mov    %eax,0x11d8$/;"	l
e02	sh.asm	/^     e02:	75 e2                	jne    de6 <strchr+0xe>$/;"	l
e02	stressfs.asm	/^     e02:	eb 28                	jmp    e2c <printf+0x193>$/;"	l
e02	wc.asm	/^     e02:	e8 d8 fd ff ff       	call   bdf <putc>$/;"	l
e03	cat.asm	/^ e03:	76 ca                	jbe    dcf <free+0x19>$/;"	l
e04	grep.asm	/^     e04:	74 10                	je     e16 <printint+0x88>$/;"	l
e04	init.asm	/^ e04:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e04	ls.asm	/^     e04:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
e04	sh.asm	/^     e04:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e04	stressfs.asm	/^     e04:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
e04	zombie.asm	/^ e04:	83 c0 01             	add    $0x1,%eax$/;"	l
e05	cat.asm	/^ e05:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e05	echo.asm	/^ e05:	e8 52 f5 ff ff       	call   35c <sbrk>$/;"	l
e05	kill.asm	/^ e05:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e06	grep.asm	/^     e06:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e07	init.asm	/^ e07:	01 c2                	add    %eax,%edx$/;"	l
e07	ls.asm	/^     e07:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
e07	mkdir.asm	/^ e07:	c9                   	leave  $/;"	l
e07	rm.asm	/^ e07:	c9                   	leave  $/;"	l
e07	wc.asm	/^     e07:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
e07	zombie.asm	/^ e07:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
e08	cat.asm	/^ e08:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e08	kill.asm	/^ e08:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)$/;"	l
e08	mkdir.asm	/^ e08:	c3                   	ret    $/;"	l
e08	rm.asm	/^ e08:	c3                   	ret    $/;"	l
e09	cs550_user.asm	/^     e09:	e9 4a 01 00 00       	jmp    f58 <printf+0x19a>$/;"	l
e09	grep.asm	/^     e09:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
e09	init.asm	/^ e09:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e09	ln.asm	/^ e09:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e09	mkdir.asm	/^ e09:	55                   	push   %ebp$/;"	l
e09	rm.asm	/^ e09:	55                   	push   %ebp$/;"	l
e09	sh.asm	/^     e09:	c9                   	leave  $/;"	l
e0a	echo.asm	/^ e0a:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e0a	ls.asm	/^     e0a:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
e0a	mkdir.asm	/^ e0a:	89 e5                	mov    %esp,%ebp$/;"	l
e0a	rm.asm	/^ e0a:	89 e5                	mov    %esp,%ebp$/;"	l
e0a	sh.asm	/^     e0a:	c3                   	ret    $/;"	l
e0a	zombie.asm	/^ e0a:	a1 3c 11 00 00       	mov    0x113c,%eax$/;"	l
e0b	cat.asm	/^ e0b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
e0b	sh.asm	/^     e0b:	55                   	push   %ebp$/;"	l
e0b	stressfs.asm	/^     e0b:	00 $/;"	l
e0b	wc.asm	/^     e0b:	eb 45                	jmp    e52 <printf+0x193>$/;"	l
e0c	grep.asm	/^     e0c:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
e0c	init.asm	/^ e0c:	8b 00                	mov    (%eax),%eax$/;"	l
e0c	kill.asm	/^ e0c:	75 07                	jne    e15 <morecore+0x34>$/;"	l
e0c	ln.asm	/^ e0c:	c1 e0 03             	shl    $0x3,%eax$/;"	l
e0c	mkdir.asm	/^ e0c:	83 ec 28             	sub    $0x28,%esp$/;"	l
e0c	rm.asm	/^ e0c:	83 ec 28             	sub    $0x28,%esp$/;"	l
e0c	sh.asm	/^     e0c:	89 e5                	mov    %esp,%ebp$/;"	l
e0c	stressfs.asm	/^     e0c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e0d	echo.asm	/^ e0d:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)$/;"	l
e0d	wc.asm	/^     e0d:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
e0e	cs550_user.asm	/^     e0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
e0e	init.asm	/^ e0e:	39 c2                	cmp    %eax,%edx$/;"	l
e0e	kill.asm	/^ e0e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e0e	sh.asm	/^     e0e:	83 ec 28             	sub    $0x28,%esp$/;"	l
e0f	grep.asm	/^     e0f:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)$/;"	l
e0f	ln.asm	/^ e0f:	89 04 24             	mov    %eax,(%esp)$/;"	l
e0f	ls.asm	/^     e0f:	eb 1f                	jmp    e30 <printint+0xa7>$/;"	l
e0f	mkdir.asm	/^ e0f:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)$/;"	l
e0f	rm.asm	/^ e0f:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)$/;"	l
e0f	stressfs.asm	/^     e0f:	89 04 24             	mov    %eax,(%esp)$/;"	l
e0f	zombie.asm	/^ e0f:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e1	echo.asm	/^  e1:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e1	kill.asm	/^  e1:	74 de                	je     c1 <strcmp+0x5>$/;"	l
e1	ln.asm	/^  e1:	84 c0                	test   %al,%al$/;"	l
e1	sh.asm	/^      e1:	e9 20 01 00 00       	jmp    206 <runcmd+0x206>$/;"	l
e1	zombie.asm	/^  e1:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e10	init.asm	/^ e10:	75 24                	jne    e36 <free+0x8e>$/;"	l
e11	cs550_user.asm	/^     e11:	0f be c0             	movsbl %al,%eax$/;"	l
e11	echo.asm	/^ e11:	75 07                	jne    e1a <morecore+0x34>$/;"	l
e11	ls.asm	/^     e11:	eb 1d                	jmp    e30 <printint+0xa7>$/;"	l
e11	sh.asm	/^     e11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
e11	wc.asm	/^     e11:	75 17                	jne    e2a <printf+0x16b>$/;"	l
e12	cat.asm	/^ e12:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e12	init.asm	/^ e12:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e12	ln.asm	/^ e12:	e8 52 f5 ff ff       	call   369 <sbrk>$/;"	l
e12	stressfs.asm	/^     e12:	e8 a2 fd ff ff       	call   bb9 <putc>$/;"	l
e12	zombie.asm	/^ e12:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
e13	echo.asm	/^ e13:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e13	kill.asm	/^ e13:	eb 22                	jmp    e37 <morecore+0x56>$/;"	l
e13	ls.asm	/^     e13:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
e13	wc.asm	/^     e13:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
e14	cs550_user.asm	/^     e14:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e14	grep.asm	/^     e14:	eb 1f                	jmp    e35 <printint+0xa7>$/;"	l
e15	cat.asm	/^ e15:	01 c2                	add    %eax,%edx$/;"	l
e15	init.asm	/^ e15:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
e15	kill.asm	/^ e15:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e16	grep.asm	/^     e16:	eb 1d                	jmp    e35 <printint+0xa7>$/;"	l
e16	ls.asm	/^     e16:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e16	mkdir.asm	/^ e16:	77 07                	ja     e1f <morecore+0x16>$/;"	l
e16	rm.asm	/^ e16:	77 07                	ja     e1f <morecore+0x16>$/;"	l
e16	wc.asm	/^     e16:	0f be c0             	movsbl %al,%eax$/;"	l
e16	zombie.asm	/^ e16:	75 23                	jne    e3b <malloc+0x46>$/;"	l
e17	cat.asm	/^ e17:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e17	ln.asm	/^ e17:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e17	stressfs.asm	/^     e17:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
e18	cs550_user.asm	/^     e18:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e18	echo.asm	/^ e18:	eb 22                	jmp    e3c <morecore+0x56>$/;"	l
e18	grep.asm	/^     e18:	8d 55 dc             	lea    -0x24(%ebp),%edx$/;"	l
e18	init.asm	/^ e18:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e18	kill.asm	/^ e18:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e18	mkdir.asm	/^ e18:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)$/;"	l
e18	rm.asm	/^ e18:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)$/;"	l
e18	sh.asm	/^     e18:	eb 4c                	jmp    e66 <gets+0x5b>$/;"	l
e18	zombie.asm	/^ e18:	c7 45 f0 34 11 00 00 	movl   $0x1134,-0x10(%ebp)$/;"	l
e19	ls.asm	/^     e19:	01 d0                	add    %edx,%eax$/;"	l
e19	wc.asm	/^     e19:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e1a	cat.asm	/^ e1a:	8b 00                	mov    (%eax),%eax$/;"	l
e1a	echo.asm	/^ e1a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e1a	ln.asm	/^ e1a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)$/;"	l
e1a	sh.asm	/^     e1a:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
e1a	stressfs.asm	/^     e1a:	0f be c0             	movsbl %al,%eax$/;"	l
e1b	cs550_user.asm	/^     e1b:	89 04 24             	mov    %eax,(%esp)$/;"	l
e1b	grep.asm	/^     e1b:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e1b	init.asm	/^ e1b:	8b 00                	mov    (%eax),%eax$/;"	l
e1b	kill.asm	/^ e1b:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e1b	ls.asm	/^     e1b:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e1c	cat.asm	/^ e1c:	39 c2                	cmp    %eax,%edx$/;"	l
e1d	echo.asm	/^ e1d:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e1d	init.asm	/^ e1d:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e1d	stressfs.asm	/^     e1d:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e1d	wc.asm	/^     e1d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e1e	cat.asm	/^ e1e:	75 24                	jne    e44 <free+0x8e>$/;"	l
e1e	cs550_user.asm	/^     e1e:	e8 bb fe ff ff       	call   cde <putc>$/;"	l
e1e	grep.asm	/^     e1e:	01 d0                	add    %edx,%eax$/;"	l
e1e	kill.asm	/^ e1e:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e1e	ln.asm	/^ e1e:	75 07                	jne    e27 <morecore+0x34>$/;"	l
e1e	ls.asm	/^     e1e:	0f be c0             	movsbl %al,%eax$/;"	l
e1f	mkdir.asm	/^ e1f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e1f	rm.asm	/^ e1f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e1f	zombie.asm	/^ e1f:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e2	cs550_user.asm	/^      e2:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e2	grep.asm	/^      e2:	89 d0                	mov    %edx,%eax$/;"	l
e2	mkdir.asm	/^  e2:	c9                   	leave  $/;"	l
e2	rm.asm	/^  e2:	c9                   	leave  $/;"	l
e2	wc.asm	/^      e2:	89 44 24 0c          	mov    %eax,0xc(%esp)$/;"	l
e20	cat.asm	/^ e20:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e20	echo.asm	/^ e20:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e20	grep.asm	/^     e20:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e20	init.asm	/^ e20:	01 c2                	add    %eax,%edx$/;"	l
e20	ln.asm	/^ e20:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e20	wc.asm	/^     e20:	89 04 24             	mov    %eax,(%esp)$/;"	l
e21	kill.asm	/^ e21:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
e21	ls.asm	/^     e21:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e21	sh.asm	/^     e21:	00 $/;"	l
e21	stressfs.asm	/^     e21:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e22	init.asm	/^ e22:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e22	mkdir.asm	/^ e22:	c1 e0 03             	shl    $0x3,%eax$/;"	l
e22	rm.asm	/^ e22:	c1 e0 03             	shl    $0x3,%eax$/;"	l
e22	sh.asm	/^     e22:	8d 45 ef             	lea    -0x11(%ebp),%eax$/;"	l
e22	zombie.asm	/^ e22:	a3 3c 11 00 00       	mov    %eax,0x113c$/;"	l
e23	cat.asm	/^ e23:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
e23	cs550_user.asm	/^     e23:	e9 30 01 00 00       	jmp    f58 <printf+0x19a>$/;"	l
e23	echo.asm	/^ e23:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e23	grep.asm	/^     e23:	0f be c0             	movsbl %al,%eax$/;"	l
e23	wc.asm	/^     e23:	e8 b7 fd ff ff       	call   bdf <putc>$/;"	l
e24	kill.asm	/^ e24:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e24	stressfs.asm	/^     e24:	89 04 24             	mov    %eax,(%esp)$/;"	l
e25	init.asm	/^ e25:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
e25	ln.asm	/^ e25:	eb 22                	jmp    e49 <morecore+0x56>$/;"	l
e25	ls.asm	/^     e25:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e25	mkdir.asm	/^ e25:	89 04 24             	mov    %eax,(%esp)$/;"	l
e25	rm.asm	/^ e25:	89 04 24             	mov    %eax,(%esp)$/;"	l
e25	sh.asm	/^     e25:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e26	cat.asm	/^ e26:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e26	echo.asm	/^ e26:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
e26	grep.asm	/^     e26:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e27	kill.asm	/^ e27:	83 c0 08             	add    $0x8,%eax$/;"	l
e27	ln.asm	/^ e27:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e27	stressfs.asm	/^     e27:	e8 8d fd ff ff       	call   bb9 <putc>$/;"	l
e27	zombie.asm	/^ e27:	a1 3c 11 00 00       	mov    0x113c,%eax$/;"	l
e28	cs550_user.asm	/^     e28:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
e28	init.asm	/^ e28:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e28	ls.asm	/^     e28:	89 04 24             	mov    %eax,(%esp)$/;"	l
e28	mkdir.asm	/^ e28:	e8 52 f5 ff ff       	call   37f <sbrk>$/;"	l
e28	rm.asm	/^ e28:	e8 52 f5 ff ff       	call   37f <sbrk>$/;"	l
e28	wc.asm	/^     e28:	eb 28                	jmp    e52 <printf+0x193>$/;"	l
e29	cat.asm	/^ e29:	8b 00                	mov    (%eax),%eax$/;"	l
e29	echo.asm	/^ e29:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e29	sh.asm	/^     e29:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)$/;"	l
e2a	grep.asm	/^     e2a:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e2a	kill.asm	/^ e2a:	89 04 24             	mov    %eax,(%esp)$/;"	l
e2a	ln.asm	/^ e2a:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e2a	wc.asm	/^     e2a:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
e2b	cat.asm	/^ e2b:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e2b	init.asm	/^ e2b:	8b 00                	mov    (%eax),%eax$/;"	l
e2b	ls.asm	/^     e2b:	e8 31 ff ff ff       	call   d61 <putc>$/;"	l
e2c	cs550_user.asm	/^     e2c:	0f 85 26 01 00 00    	jne    f58 <printf+0x19a>$/;"	l
e2c	echo.asm	/^ e2c:	83 c0 08             	add    $0x8,%eax$/;"	l
e2c	stressfs.asm	/^     e2c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
e2c	zombie.asm	/^ e2c:	a3 34 11 00 00       	mov    %eax,0x1134$/;"	l
e2d	grep.asm	/^     e2d:	89 04 24             	mov    %eax,(%esp)$/;"	l
e2d	init.asm	/^ e2d:	8b 10                	mov    (%eax),%edx$/;"	l
e2d	kill.asm	/^ e2d:	e8 ce fe ff ff       	call   d00 <free>$/;"	l
e2d	ln.asm	/^ e2d:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e2d	mkdir.asm	/^ e2d:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e2d	rm.asm	/^ e2d:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e2e	cat.asm	/^ e2e:	01 c2                	add    %eax,%edx$/;"	l
e2f	echo.asm	/^ e2f:	89 04 24             	mov    %eax,(%esp)$/;"	l
e2f	init.asm	/^ e2f:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e3	init.asm	/^  e3:	00 $/;"	l
e3	kill.asm	/^  e3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e3	ln.asm	/^  e3:	74 10                	je     f5 <strcmp+0x27>$/;"	l
e3	mkdir.asm	/^  e3:	c3                   	ret    $/;"	l
e3	rm.asm	/^  e3:	c3                   	ret    $/;"	l
e30	cat.asm	/^ e30:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e30	grep.asm	/^     e30:	e8 31 ff ff ff       	call   d66 <putc>$/;"	l
e30	ln.asm	/^ e30:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e30	ls.asm	/^     e30:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
e30	mkdir.asm	/^ e30:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)$/;"	l
e30	rm.asm	/^ e30:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)$/;"	l
e30	sh.asm	/^     e30:	e8 44 01 00 00       	call   f79 <read>$/;"	l
e31	wc.asm	/^     e31:	00 $/;"	l
e31	zombie.asm	/^ e31:	c7 05 38 11 00 00 00 	movl   $0x0,0x1138$/;"	l
e32	cs550_user.asm	/^     e32:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
e32	echo.asm	/^ e32:	e8 ce fe ff ff       	call   d05 <free>$/;"	l
e32	init.asm	/^ e32:	89 10                	mov    %edx,(%eax)$/;"	l
e32	kill.asm	/^ e32:	a1 94 11 00 00       	mov    0x1194,%eax$/;"	l
e32	wc.asm	/^     e32:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e33	cat.asm	/^ e33:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
e33	ln.asm	/^ e33:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
e33	stressfs.asm	/^     e33:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
e34	init.asm	/^ e34:	eb 0a                	jmp    e40 <free+0x98>$/;"	l
e34	ls.asm	/^     e34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
e34	mkdir.asm	/^ e34:	75 07                	jne    e3d <morecore+0x34>$/;"	l
e34	rm.asm	/^ e34:	75 07                	jne    e3d <morecore+0x34>$/;"	l
e35	grep.asm	/^     e35:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
e35	sh.asm	/^     e35:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e35	wc.asm	/^     e35:	89 04 24             	mov    %eax,(%esp)$/;"	l
e36	cat.asm	/^ e36:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e36	cs550_user.asm	/^     e36:	75 2d                	jne    e65 <printf+0xa7>$/;"	l
e36	init.asm	/^ e36:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e36	ln.asm	/^ e36:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e36	mkdir.asm	/^ e36:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e36	rm.asm	/^ e36:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e37	echo.asm	/^ e37:	a1 90 11 00 00       	mov    0x1190,%eax$/;"	l
e37	kill.asm	/^ e37:	c9                   	leave  $/;"	l
e37	stressfs.asm	/^     e37:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
e38	cs550_user.asm	/^     e38:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
e38	kill.asm	/^ e38:	c3                   	ret    $/;"	l
e38	ls.asm	/^     e38:	79 d9                	jns    e13 <printint+0x8a>$/;"	l
e38	sh.asm	/^     e38:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
e38	wc.asm	/^     e38:	e8 a2 fd ff ff       	call   bdf <putc>$/;"	l
e38	zombie.asm	/^ e38:	00 00 00 $/;"	l
e39	cat.asm	/^ e39:	8b 00                	mov    (%eax),%eax$/;"	l
e39	grep.asm	/^     e39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
e39	init.asm	/^ e39:	8b 10                	mov    (%eax),%edx$/;"	l
e39	kill.asm	/^ e39:	55                   	push   %ebp$/;"	l
e39	ln.asm	/^ e39:	83 c0 08             	add    $0x8,%eax$/;"	l
e3a	kill.asm	/^ e3a:	89 e5                	mov    %esp,%ebp$/;"	l
e3a	ls.asm	/^     e3a:	83 c4 30             	add    $0x30,%esp$/;"	l
e3a	stressfs.asm	/^     e3a:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e3b	cat.asm	/^ e3b:	8b 10                	mov    (%eax),%edx$/;"	l
e3b	cs550_user.asm	/^     e3b:	8b 00                	mov    (%eax),%eax$/;"	l
e3b	init.asm	/^ e3b:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e3b	mkdir.asm	/^ e3b:	eb 22                	jmp    e5f <morecore+0x56>$/;"	l
e3b	rm.asm	/^ e3b:	eb 22                	jmp    e5f <morecore+0x56>$/;"	l
e3b	zombie.asm	/^ e3b:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e3c	echo.asm	/^ e3c:	c9                   	leave  $/;"	l
e3c	kill.asm	/^ e3c:	83 ec 28             	sub    $0x28,%esp$/;"	l
e3c	ln.asm	/^ e3c:	89 04 24             	mov    %eax,(%esp)$/;"	l
e3c	sh.asm	/^     e3c:	7f 02                	jg     e40 <gets+0x35>$/;"	l
e3d	cat.asm	/^ e3d:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e3d	cs550_user.asm	/^     e3d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
e3d	echo.asm	/^ e3d:	c3                   	ret    $/;"	l
e3d	grep.asm	/^     e3d:	79 d9                	jns    e18 <printint+0x8a>$/;"	l
e3d	ls.asm	/^     e3d:	5b                   	pop    %ebx$/;"	l
e3d	mkdir.asm	/^ e3d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e3d	rm.asm	/^ e3d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e3d	stressfs.asm	/^     e3d:	01 d0                	add    %edx,%eax$/;"	l
e3d	wc.asm	/^     e3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
e3e	echo.asm	/^ e3e:	55                   	push   %ebp$/;"	l
e3e	init.asm	/^ e3e:	89 10                	mov    %edx,(%eax)$/;"	l
e3e	ls.asm	/^     e3e:	5e                   	pop    %esi$/;"	l
e3e	sh.asm	/^     e3e:	eb 31                	jmp    e71 <gets+0x66>$/;"	l
e3e	zombie.asm	/^ e3e:	8b 00                	mov    (%eax),%eax$/;"	l
e3f	echo.asm	/^ e3f:	89 e5                	mov    %esp,%ebp$/;"	l
e3f	grep.asm	/^     e3f:	83 c4 30             	add    $0x30,%esp$/;"	l
e3f	kill.asm	/^ e3f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e3f	ln.asm	/^ e3f:	e8 ce fe ff ff       	call   d12 <free>$/;"	l
e3f	ls.asm	/^     e3f:	5d                   	pop    %ebp$/;"	l
e3f	stressfs.asm	/^     e3f:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e4	cat.asm	/^  e4:	e8 1a 0b 00 00       	call   c03 <printf>$/;"	l
e4	echo.asm	/^  e4:	38 c2                	cmp    %al,%dl$/;"	l
e4	grep.asm	/^      e4:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
e4	init.asm	/^  e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
e4	mkdir.asm	/^  e4:	55                   	push   %ebp$/;"	l
e4	rm.asm	/^  e4:	55                   	push   %ebp$/;"	l
e4	stressfs.asm	/^      e4:	00 00 00 00 $/;"	l
e4	zombie.asm	/^  e4:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
e40	cat.asm	/^ e40:	89 10                	mov    %edx,(%eax)$/;"	l
e40	init.asm	/^ e40:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e40	ls.asm	/^     e40:	c3                   	ret    $/;"	l
e40	mkdir.asm	/^ e40:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e40	rm.asm	/^ e40:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e40	sh.asm	/^     e40:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e40	wc.asm	/^     e40:	0f be c0             	movsbl %al,%eax$/;"	l
e40	zombie.asm	/^ e40:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e41	echo.asm	/^ e41:	83 ec 28             	sub    $0x28,%esp$/;"	l
e41	ls.asm	/^     e41:	55                   	push   %ebp$/;"	l
e42	cat.asm	/^ e42:	eb 0a                	jmp    e4e <free+0x98>$/;"	l
e42	grep.asm	/^     e42:	5b                   	pop    %ebx$/;"	l
e42	kill.asm	/^ e42:	83 c0 07             	add    $0x7,%eax$/;"	l
e42	ls.asm	/^     e42:	89 e5                	mov    %esp,%ebp$/;"	l
e42	stressfs.asm	/^     e42:	84 c0                	test   %al,%al$/;"	l
e43	grep.asm	/^     e43:	5e                   	pop    %esi$/;"	l
e43	init.asm	/^ e43:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e43	mkdir.asm	/^ e43:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e43	rm.asm	/^ e43:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e43	sh.asm	/^     e43:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
e43	wc.asm	/^     e43:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e43	zombie.asm	/^ e43:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e44	cat.asm	/^ e44:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e44	cs550_user.asm	/^     e44:	00 $/;"	l
e44	echo.asm	/^ e44:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e44	grep.asm	/^     e44:	5d                   	pop    %ebp$/;"	l
e44	ln.asm	/^ e44:	a1 bc 11 00 00       	mov    0x11bc,%eax$/;"	l
e44	ls.asm	/^     e44:	83 ec 38             	sub    $0x38,%esp$/;"	l
e44	stressfs.asm	/^     e44:	0f 85 71 fe ff ff    	jne    cbb <printf+0x22>$/;"	l
e45	cs550_user.asm	/^     e45:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
e45	grep.asm	/^     e45:	c3                   	ret    $/;"	l
e45	kill.asm	/^ e45:	c1 e8 03             	shr    $0x3,%eax$/;"	l
e46	grep.asm	/^     e46:	55                   	push   %ebp$/;"	l
e46	init.asm	/^ e46:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
e46	mkdir.asm	/^ e46:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e46	rm.asm	/^ e46:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e46	sh.asm	/^     e46:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
e46	zombie.asm	/^ e46:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e47	cat.asm	/^ e47:	8b 10                	mov    (%eax),%edx$/;"	l
e47	echo.asm	/^ e47:	83 c0 07             	add    $0x7,%eax$/;"	l
e47	grep.asm	/^     e47:	89 e5                	mov    %esp,%ebp$/;"	l
e47	ls.asm	/^     e47:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
e47	wc.asm	/^     e47:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e48	kill.asm	/^ e48:	83 c0 01             	add    $0x1,%eax$/;"	l
e49	cat.asm	/^ e49:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e49	grep.asm	/^     e49:	83 ec 38             	sub    $0x38,%esp$/;"	l
e49	ln.asm	/^ e49:	c9                   	leave  $/;"	l
e49	mkdir.asm	/^ e49:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
e49	rm.asm	/^ e49:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
e49	sh.asm	/^     e49:	89 c2                	mov    %eax,%edx$/;"	l
e49	zombie.asm	/^ e49:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
e4a	echo.asm	/^ e4a:	c1 e8 03             	shr    $0x3,%eax$/;"	l
e4a	ln.asm	/^ e4a:	c3                   	ret    $/;"	l
e4a	stressfs.asm	/^     e4a:	c9                   	leave  $/;"	l
e4a	wc.asm	/^     e4a:	89 04 24             	mov    %eax,(%esp)$/;"	l
e4b	kill.asm	/^ e4b:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
e4b	ln.asm	/^ e4b:	55                   	push   %ebp$/;"	l
e4b	sh.asm	/^     e4b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e4b	stressfs.asm	/^     e4b:	c3                   	ret    $/;"	l
e4c	cat.asm	/^ e4c:	89 10                	mov    %edx,(%eax)$/;"	l
e4c	cs550_user.asm	/^     e4c:	00 $/;"	l
e4c	grep.asm	/^     e4c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
e4c	ln.asm	/^ e4c:	89 e5                	mov    %esp,%ebp$/;"	l
e4c	mkdir.asm	/^ e4c:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e4c	rm.asm	/^ e4c:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e4c	stressfs.asm	/^     e4c:	55                   	push   %ebp$/;"	l
e4c	zombie.asm	/^ e4c:	72 4d                	jb     e9b <malloc+0xa6>$/;"	l
e4d	cs550_user.asm	/^     e4d:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e4d	echo.asm	/^ e4d:	83 c0 01             	add    $0x1,%eax$/;"	l
e4d	init.asm	/^ e4d:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e4d	stressfs.asm	/^     e4d:	89 e5                	mov    %esp,%ebp$/;"	l
e4d	wc.asm	/^     e4d:	e8 8d fd ff ff       	call   bdf <putc>$/;"	l
e4e	cat.asm	/^ e4e:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e4e	kill.asm	/^ e4e:	a1 94 11 00 00       	mov    0x1194,%eax$/;"	l
e4e	ln.asm	/^ e4e:	83 ec 28             	sub    $0x28,%esp$/;"	l
e4e	ls.asm	/^     e4e:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
e4e	sh.asm	/^     e4e:	01 c2                	add    %eax,%edx$/;"	l
e4e	zombie.asm	/^ e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e4f	mkdir.asm	/^ e4f:	83 c0 08             	add    $0x8,%eax$/;"	l
e4f	rm.asm	/^ e4f:	83 c0 08             	add    $0x8,%eax$/;"	l
e4f	stressfs.asm	/^     e4f:	83 ec 10             	sub    $0x10,%esp$/;"	l
e5	cs550_user.asm	/^      e5:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
e5	forktest.asm	/^  e5:	e8 16 ff ff ff       	call   0 <printf>$/;"	l
e5	ln.asm	/^  e5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e5	mkdir.asm	/^  e5:	89 e5                	mov    %esp,%ebp$/;"	l
e5	rm.asm	/^  e5:	89 e5                	mov    %esp,%ebp$/;"	l
e50	echo.asm	/^ e50:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
e50	init.asm	/^ e50:	01 d0                	add    %edx,%eax$/;"	l
e50	sh.asm	/^     e50:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax$/;"	l
e51	cat.asm	/^ e51:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e51	cs550_user.asm	/^     e51:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e51	ln.asm	/^ e51:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e51	ls.asm	/^     e51:	83 c0 04             	add    $0x4,%eax$/;"	l
e51	zombie.asm	/^ e51:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e52	init.asm	/^ e52:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
e52	mkdir.asm	/^ e52:	89 04 24             	mov    %eax,(%esp)$/;"	l
e52	rm.asm	/^ e52:	89 04 24             	mov    %eax,(%esp)$/;"	l
e52	stressfs.asm	/^     e52:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e52	wc.asm	/^     e52:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
e53	echo.asm	/^ e53:	a1 90 11 00 00       	mov    0x1190,%eax$/;"	l
e53	grep.asm	/^     e53:	8d 45 0c             	lea    0xc(%ebp),%eax$/;"	l
e53	kill.asm	/^ e53:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e54	cat.asm	/^ e54:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
e54	cs550_user.asm	/^     e54:	89 04 24             	mov    %eax,(%esp)$/;"	l
e54	ln.asm	/^ e54:	83 c0 07             	add    $0x7,%eax$/;"	l
e54	ls.asm	/^     e54:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
e54	sh.asm	/^     e54:	88 02                	mov    %al,(%edx)$/;"	l
e54	zombie.asm	/^ e54:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
e55	init.asm	/^ e55:	75 20                	jne    e77 <free+0xcf>$/;"	l
e55	mkdir.asm	/^ e55:	e8 ce fe ff ff       	call   d28 <free>$/;"	l
e55	rm.asm	/^ e55:	e8 ce fe ff ff       	call   d28 <free>$/;"	l
e55	stressfs.asm	/^     e55:	83 e8 08             	sub    $0x8,%eax$/;"	l
e56	grep.asm	/^     e56:	83 c0 04             	add    $0x4,%eax$/;"	l
e56	kill.asm	/^ e56:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
e56	sh.asm	/^     e56:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax$/;"	l
e57	cs550_user.asm	/^     e57:	e8 aa fe ff ff       	call   d06 <printint>$/;"	l
e57	init.asm	/^ e57:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e57	ln.asm	/^ e57:	c1 e8 03             	shr    $0x3,%eax$/;"	l
e57	ls.asm	/^     e57:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
e57	zombie.asm	/^ e57:	75 0c                	jne    e65 <malloc+0x70>$/;"	l
e58	echo.asm	/^ e58:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e58	stressfs.asm	/^     e58:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
e59	grep.asm	/^     e59:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
e59	wc.asm	/^     e59:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
e59	zombie.asm	/^ e59:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e5a	init.asm	/^ e5a:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
e5a	kill.asm	/^ e5a:	75 23                	jne    e7f <malloc+0x46>$/;"	l
e5a	ln.asm	/^ e5a:	83 c0 01             	add    $0x1,%eax$/;"	l
e5a	mkdir.asm	/^ e5a:	a1 dc 11 00 00       	mov    0x11dc,%eax$/;"	l
e5a	rm.asm	/^ e5a:	a1 d8 11 00 00       	mov    0x11d8,%eax$/;"	l
e5a	sh.asm	/^     e5a:	3c 0a                	cmp    $0xa,%al$/;"	l
e5b	cat.asm	/^ e5b:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e5b	echo.asm	/^ e5b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
e5b	stressfs.asm	/^     e5b:	a1 f0 12 00 00       	mov    0x12f0,%eax$/;"	l
e5c	cs550_user.asm	/^     e5c:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
e5c	grep.asm	/^     e5c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
e5c	kill.asm	/^ e5c:	c7 45 f0 8c 11 00 00 	movl   $0x118c,-0x10(%ebp)$/;"	l
e5c	sh.asm	/^     e5c:	74 13                	je     e71 <gets+0x66>$/;"	l
e5c	zombie.asm	/^ e5c:	8b 10                	mov    (%eax),%edx$/;"	l
e5d	init.asm	/^ e5d:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e5d	ln.asm	/^ e5d:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
e5d	wc.asm	/^     e5d:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
e5e	cat.asm	/^ e5e:	01 d0                	add    %edx,%eax$/;"	l
e5e	ls.asm	/^     e5e:	e9 7c 01 00 00       	jmp    fdf <printf+0x19e>$/;"	l
e5e	sh.asm	/^     e5e:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax$/;"	l
e5e	zombie.asm	/^ e5e:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e5f	echo.asm	/^ e5f:	75 23                	jne    e84 <malloc+0x46>$/;"	l
e5f	mkdir.asm	/^ e5f:	c9                   	leave  $/;"	l
e5f	rm.asm	/^ e5f:	c9                   	leave  $/;"	l
e6	echo.asm	/^  e6:	74 de                	je     c6 <strcmp+0x5>$/;"	l
e6	kill.asm	/^  e6:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e6	ls.asm	/^      e6:	00 $/;"	l
e6	sh.asm	/^      e6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e6	wc.asm	/^      e6:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e60	cat.asm	/^ e60:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
e60	cs550_user.asm	/^     e60:	e9 ec 00 00 00       	jmp    f51 <printf+0x193>$/;"	l
e60	init.asm	/^ e60:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e60	ln.asm	/^ e60:	a1 bc 11 00 00       	mov    0x11bc,%eax$/;"	l
e60	mkdir.asm	/^ e60:	c3                   	ret    $/;"	l
e60	rm.asm	/^ e60:	c3                   	ret    $/;"	l
e60	stressfs.asm	/^     e60:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
e60	wc.asm	/^     e60:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e61	echo.asm	/^ e61:	c7 45 f0 88 11 00 00 	movl   $0x1188,-0x10(%ebp)$/;"	l
e61	mkdir.asm	/^ e61:	55                   	push   %ebp$/;"	l
e61	rm.asm	/^ e61:	55                   	push   %ebp$/;"	l
e61	zombie.asm	/^ e61:	89 10                	mov    %edx,(%eax)$/;"	l
e62	mkdir.asm	/^ e62:	89 e5                	mov    %esp,%ebp$/;"	l
e62	rm.asm	/^ e62:	89 e5                	mov    %esp,%ebp$/;"	l
e62	sh.asm	/^     e62:	3c 0d                	cmp    $0xd,%al$/;"	l
e63	cat.asm	/^ e63:	75 20                	jne    e85 <free+0xcf>$/;"	l
e63	grep.asm	/^     e63:	e9 7c 01 00 00       	jmp    fe4 <printf+0x19e>$/;"	l
e63	init.asm	/^ e63:	01 c2                	add    %eax,%edx$/;"	l
e63	kill.asm	/^ e63:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e63	ls.asm	/^     e63:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
e63	stressfs.asm	/^     e63:	eb 24                	jmp    e89 <free+0x3d>$/;"	l
e63	wc.asm	/^     e63:	01 d0                	add    %edx,%eax$/;"	l
e63	zombie.asm	/^ e63:	eb 26                	jmp    e8b <malloc+0x96>$/;"	l
e64	mkdir.asm	/^ e64:	83 ec 28             	sub    $0x28,%esp$/;"	l
e64	rm.asm	/^ e64:	83 ec 28             	sub    $0x28,%esp$/;"	l
e64	sh.asm	/^     e64:	74 0b                	je     e71 <gets+0x66>$/;"	l
e65	cat.asm	/^ e65:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e65	cs550_user.asm	/^     e65:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
e65	init.asm	/^ e65:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e65	ln.asm	/^ e65:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e65	stressfs.asm	/^     e65:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e65	wc.asm	/^     e65:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e65	zombie.asm	/^ e65:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e66	kill.asm	/^ e66:	a3 94 11 00 00       	mov    %eax,0x1194$/;"	l
e66	ls.asm	/^     e66:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e66	sh.asm	/^     e66:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e67	mkdir.asm	/^ e67:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e67	rm.asm	/^ e67:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e68	cat.asm	/^ e68:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
e68	echo.asm	/^ e68:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e68	grep.asm	/^     e68:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
e68	init.asm	/^ e68:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
e68	ln.asm	/^ e68:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
e68	stressfs.asm	/^     e68:	8b 00                	mov    (%eax),%eax$/;"	l
e68	wc.asm	/^     e68:	84 c0                	test   %al,%al$/;"	l
e68	zombie.asm	/^ e68:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e69	cs550_user.asm	/^     e69:	74 06                	je     e71 <printf+0xb3>$/;"	l
e69	ls.asm	/^     e69:	01 d0                	add    %edx,%eax$/;"	l
e69	sh.asm	/^     e69:	83 c0 01             	add    $0x1,%eax$/;"	l
e6a	mkdir.asm	/^ e6a:	83 c0 07             	add    $0x7,%eax$/;"	l
e6a	rm.asm	/^ e6a:	83 c0 07             	add    $0x7,%eax$/;"	l
e6a	stressfs.asm	/^     e6a:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
e6a	wc.asm	/^     e6a:	0f 85 71 fe ff ff    	jne    ce1 <printf+0x22>$/;"	l
e6b	cat.asm	/^ e6b:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e6b	cs550_user.asm	/^     e6b:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
e6b	echo.asm	/^ e6b:	a3 90 11 00 00       	mov    %eax,0x1190$/;"	l
e6b	grep.asm	/^     e6b:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e6b	init.asm	/^ e6b:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e6b	kill.asm	/^ e6b:	a1 94 11 00 00       	mov    0x1194,%eax$/;"	l
e6b	ls.asm	/^     e6b:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e6b	zombie.asm	/^ e6b:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
e6c	ln.asm	/^ e6c:	75 23                	jne    e91 <malloc+0x46>$/;"	l
e6c	sh.asm	/^     e6c:	3b 45 0c             	cmp    0xc(%ebp),%eax$/;"	l
e6d	mkdir.asm	/^ e6d:	c1 e8 03             	shr    $0x3,%eax$/;"	l
e6d	rm.asm	/^ e6d:	c1 e8 03             	shr    $0x3,%eax$/;"	l
e6d	stressfs.asm	/^     e6d:	77 12                	ja     e81 <free+0x35>$/;"	l
e6e	cat.asm	/^ e6e:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e6e	grep.asm	/^     e6e:	01 d0                	add    %edx,%eax$/;"	l
e6e	init.asm	/^ e6e:	8b 10                	mov    (%eax),%edx$/;"	l
e6e	ln.asm	/^ e6e:	c7 45 f0 b4 11 00 00 	movl   $0x11b4,-0x10(%ebp)$/;"	l
e6e	ls.asm	/^     e6e:	0f be c0             	movsbl %al,%eax$/;"	l
e6e	zombie.asm	/^ e6e:	89 c2                	mov    %eax,%edx$/;"	l
e6f	cs550_user.asm	/^     e6f:	75 2d                	jne    e9e <printf+0xe0>$/;"	l
e6f	sh.asm	/^     e6f:	7c a9                	jl     e1a <gets+0xf>$/;"	l
e6f	stressfs.asm	/^     e6f:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e7	grep.asm	/^      e7:	81 c2 60 15 00 00    	add    $0x1560,%edx$/;"	l
e7	ls.asm	/^      e7:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)$/;"	l
e7	mkdir.asm	/^  e7:	eb 08                	jmp    f1 <strcmp+0xd>$/;"	l
e7	rm.asm	/^  e7:	eb 08                	jmp    f1 <strcmp+0xd>$/;"	l
e7	zombie.asm	/^  e7:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
e70	echo.asm	/^ e70:	a1 90 11 00 00       	mov    0x1190,%eax$/;"	l
e70	grep.asm	/^     e70:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e70	init.asm	/^ e70:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e70	kill.asm	/^ e70:	a3 8c 11 00 00       	mov    %eax,0x118c$/;"	l
e70	mkdir.asm	/^ e70:	83 c0 01             	add    $0x1,%eax$/;"	l
e70	rm.asm	/^ e70:	83 c0 01             	add    $0x1,%eax$/;"	l
e70	wc.asm	/^     e70:	c9                   	leave  $/;"	l
e70	zombie.asm	/^ e70:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e71	cat.asm	/^ e71:	01 c2                	add    %eax,%edx$/;"	l
e71	cs550_user.asm	/^     e71:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
e71	ls.asm	/^     e71:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
e71	sh.asm	/^     e71:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
e71	wc.asm	/^     e71:	c3                   	ret    $/;"	l
e72	stressfs.asm	/^     e72:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
e72	wc.asm	/^     e72:	55                   	push   %ebp$/;"	l
e73	cat.asm	/^ e73:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e73	grep.asm	/^     e73:	0f be c0             	movsbl %al,%eax$/;"	l
e73	init.asm	/^ e73:	89 10                	mov    %edx,(%eax)$/;"	l
e73	mkdir.asm	/^ e73:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
e73	rm.asm	/^ e73:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
e73	wc.asm	/^     e73:	89 e5                	mov    %esp,%ebp$/;"	l
e73	zombie.asm	/^ e73:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
e74	cs550_user.asm	/^     e74:	8b 00                	mov    (%eax),%eax$/;"	l
e74	sh.asm	/^     e74:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e75	echo.asm	/^ e75:	a3 88 11 00 00       	mov    %eax,0x1188$/;"	l
e75	init.asm	/^ e75:	eb 08                	jmp    e7f <free+0xd7>$/;"	l
e75	kill.asm	/^ e75:	c7 05 90 11 00 00 00 	movl   $0x0,0x1190$/;"	l
e75	ln.asm	/^ e75:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e75	stressfs.asm	/^     e75:	77 24                	ja     e9b <free+0x4f>$/;"	l
e75	wc.asm	/^     e75:	83 ec 10             	sub    $0x10,%esp$/;"	l
e76	cat.asm	/^ e76:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
e76	cs550_user.asm	/^     e76:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
e76	grep.asm	/^     e76:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
e76	ls.asm	/^     e76:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
e76	mkdir.asm	/^ e76:	a1 dc 11 00 00       	mov    0x11dc,%eax$/;"	l
e76	rm.asm	/^ e76:	a1 d8 11 00 00       	mov    0x11d8,%eax$/;"	l
e76	zombie.asm	/^ e76:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e77	init.asm	/^ e77:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e77	sh.asm	/^     e77:	01 d0                	add    %edx,%eax$/;"	l
e77	stressfs.asm	/^     e77:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e78	ln.asm	/^ e78:	a3 bc 11 00 00       	mov    %eax,0x11bc$/;"	l
e78	wc.asm	/^     e78:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e79	cat.asm	/^ e79:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e79	ls.asm	/^     e79:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
e79	sh.asm	/^     e79:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
e79	zombie.asm	/^ e79:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e7a	echo.asm	/^ e7a:	c7 05 8c 11 00 00 00 	movl   $0x0,0x118c$/;"	l
e7a	init.asm	/^ e7a:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
e7a	stressfs.asm	/^     e7a:	8b 00                	mov    (%eax),%eax$/;"	l
e7b	grep.asm	/^     e7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
e7b	mkdir.asm	/^ e7b:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e7b	rm.asm	/^ e7b:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e7b	wc.asm	/^     e7b:	83 e8 08             	sub    $0x8,%eax$/;"	l
e7c	cat.asm	/^ e7c:	8b 10                	mov    (%eax),%edx$/;"	l
e7c	kill.asm	/^ e7c:	00 00 00 $/;"	l
e7c	sh.asm	/^     e7c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e7c	stressfs.asm	/^     e7c:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
e7c	zombie.asm	/^ e7c:	c1 e0 03             	shl    $0x3,%eax$/;"	l
e7d	cs550_user.asm	/^     e7d:	00 $/;"	l
e7d	init.asm	/^ e7d:	89 10                	mov    %edx,(%eax)$/;"	l
e7d	ln.asm	/^ e7d:	a1 bc 11 00 00       	mov    0x11bc,%eax$/;"	l
e7d	ls.asm	/^     e7d:	75 2c                	jne    eab <printf+0x6a>$/;"	l
e7e	cat.asm	/^ e7e:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e7e	cs550_user.asm	/^     e7e:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
e7e	grep.asm	/^     e7e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
e7e	mkdir.asm	/^ e7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
e7e	rm.asm	/^ e7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
e7e	wc.asm	/^     e7e:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
e7f	init.asm	/^ e7f:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e7f	kill.asm	/^ e7f:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e7f	ls.asm	/^     e7f:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
e7f	sh.asm	/^     e7f:	c9                   	leave  $/;"	l
e7f	stressfs.asm	/^     e7f:	77 1a                	ja     e9b <free+0x4f>$/;"	l
e7f	zombie.asm	/^ e7f:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
e8	echo.asm	/^  e8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e8	ln.asm	/^  e8:	0f b6 10             	movzbl (%eax),%edx$/;"	l
e8	stressfs.asm	/^      e8:	eb 27                	jmp    111 <main+0x111>$/;"	l
e80	sh.asm	/^     e80:	c3                   	ret    $/;"	l
e81	cat.asm	/^ e81:	89 10                	mov    %edx,(%eax)$/;"	l
e81	echo.asm	/^ e81:	00 00 00 $/;"	l
e81	sh.asm	/^     e81:	55                   	push   %ebp$/;"	l
e81	stressfs.asm	/^     e81:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e81	wc.asm	/^     e81:	a1 68 13 00 00       	mov    0x1368,%eax$/;"	l
e82	grep.asm	/^     e82:	75 2c                	jne    eb0 <printf+0x6a>$/;"	l
e82	init.asm	/^ e82:	a3 80 12 00 00       	mov    %eax,0x1280$/;"	l
e82	kill.asm	/^ e82:	8b 00                	mov    (%eax),%eax$/;"	l
e82	ln.asm	/^ e82:	a3 b4 11 00 00       	mov    %eax,0x11b4$/;"	l
e82	mkdir.asm	/^ e82:	75 23                	jne    ea7 <malloc+0x46>$/;"	l
e82	rm.asm	/^ e82:	75 23                	jne    ea7 <malloc+0x46>$/;"	l
e82	sh.asm	/^     e82:	89 e5                	mov    %esp,%ebp$/;"	l
e82	zombie.asm	/^ e82:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e83	cat.asm	/^ e83:	eb 08                	jmp    e8d <free+0xd7>$/;"	l
e83	ls.asm	/^     e83:	75 0c                	jne    e91 <printf+0x50>$/;"	l
e84	echo.asm	/^ e84:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e84	grep.asm	/^     e84:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
e84	kill.asm	/^ e84:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e84	mkdir.asm	/^ e84:	c7 45 f0 d4 11 00 00 	movl   $0x11d4,-0x10(%ebp)$/;"	l
e84	rm.asm	/^ e84:	c7 45 f0 d0 11 00 00 	movl   $0x11d0,-0x10(%ebp)$/;"	l
e84	sh.asm	/^     e84:	83 ec 28             	sub    $0x28,%esp$/;"	l
e84	stressfs.asm	/^     e84:	8b 00                	mov    (%eax),%eax$/;"	l
e85	cat.asm	/^ e85:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e85	cs550_user.asm	/^     e85:	00 $/;"	l
e85	ls.asm	/^     e85:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
e85	zombie.asm	/^ e85:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
e86	cs550_user.asm	/^     e86:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e86	stressfs.asm	/^     e86:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
e86	wc.asm	/^     e86:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
e87	echo.asm	/^ e87:	8b 00                	mov    (%eax),%eax$/;"	l
e87	init.asm	/^ e87:	c9                   	leave  $/;"	l
e87	kill.asm	/^ e87:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e87	ln.asm	/^ e87:	c7 05 b8 11 00 00 00 	movl   $0x0,0x11b8$/;"	l
e87	sh.asm	/^     e87:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
e88	cat.asm	/^ e88:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
e88	grep.asm	/^     e88:	75 0c                	jne    e96 <printf+0x50>$/;"	l
e88	init.asm	/^ e88:	c3                   	ret    $/;"	l
e88	zombie.asm	/^ e88:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
e89	echo.asm	/^ e89:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e89	init.asm	/^ e89:	55                   	push   %ebp$/;"	l
e89	stressfs.asm	/^     e89:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e89	wc.asm	/^     e89:	eb 24                	jmp    eaf <free+0x3d>$/;"	l
e8a	cs550_user.asm	/^     e8a:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e8a	grep.asm	/^     e8a:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)$/;"	l
e8a	init.asm	/^ e8a:	89 e5                	mov    %esp,%ebp$/;"	l
e8a	kill.asm	/^ e8a:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e8b	cat.asm	/^ e8b:	89 10                	mov    %edx,(%eax)$/;"	l
e8b	mkdir.asm	/^ e8b:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e8b	rm.asm	/^ e8b:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e8b	wc.asm	/^     e8b:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e8b	zombie.asm	/^ e8b:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e8c	echo.asm	/^ e8c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e8c	init.asm	/^ e8c:	83 ec 28             	sub    $0x28,%esp$/;"	l
e8c	ls.asm	/^     e8c:	e9 4a 01 00 00       	jmp    fdb <printf+0x19a>$/;"	l
e8c	stressfs.asm	/^     e8c:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
e8d	cat.asm	/^ e8d:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e8d	cs550_user.asm	/^     e8d:	89 04 24             	mov    %eax,(%esp)$/;"	l
e8d	kill.asm	/^ e8d:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
e8e	ln.asm	/^ e8e:	00 00 00 $/;"	l
e8e	mkdir.asm	/^ e8e:	a3 dc 11 00 00       	mov    %eax,0x11dc$/;"	l
e8e	rm.asm	/^ e8e:	a3 d8 11 00 00       	mov    %eax,0x11d8$/;"	l
e8e	sh.asm	/^     e8e:	00 $/;"	l
e8e	wc.asm	/^     e8e:	8b 00                	mov    (%eax),%eax$/;"	l
e8e	zombie.asm	/^ e8e:	a3 3c 11 00 00       	mov    %eax,0x113c$/;"	l
e8f	echo.asm	/^ e8f:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e8f	init.asm	/^ e8f:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)$/;"	l
e8f	sh.asm	/^     e8f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e8f	stressfs.asm	/^     e8f:	76 d4                	jbe    e65 <free+0x19>$/;"	l
e9	cat.asm	/^  e9:	e8 97 02 00 00       	call   385 <exit>$/;"	l
e9	cs550_user.asm	/^      e9:	c7 44 24 04 b3 11 00 	movl   $0x11b3,0x4(%esp)$/;"	l
e9	kill.asm	/^  e9:	0f b6 d0             	movzbl %al,%edx$/;"	l
e9	mkdir.asm	/^  e9:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
e9	rm.asm	/^  e9:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
e9	sh.asm	/^      e9:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
e9	wc.asm	/^      e9:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
e90	cat.asm	/^ e90:	a3 88 12 00 00       	mov    %eax,0x1288$/;"	l
e90	cs550_user.asm	/^     e90:	e8 71 fe ff ff       	call   d06 <printint>$/;"	l
e90	kill.asm	/^ e90:	72 4d                	jb     edf <malloc+0xa6>$/;"	l
e90	wc.asm	/^     e90:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
e91	grep.asm	/^     e91:	e9 4a 01 00 00       	jmp    fe0 <printf+0x19a>$/;"	l
e91	ln.asm	/^ e91:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e91	ls.asm	/^     e91:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
e91	stressfs.asm	/^     e91:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e92	echo.asm	/^ e92:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
e92	kill.asm	/^ e92:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e92	sh.asm	/^     e92:	89 04 24             	mov    %eax,(%esp)$/;"	l
e93	mkdir.asm	/^ e93:	a1 dc 11 00 00       	mov    0x11dc,%eax$/;"	l
e93	rm.asm	/^ e93:	a1 d8 11 00 00       	mov    0x11d8,%eax$/;"	l
e93	wc.asm	/^     e93:	77 12                	ja     ea7 <free+0x35>$/;"	l
e93	zombie.asm	/^ e93:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e94	ln.asm	/^ e94:	8b 00                	mov    (%eax),%eax$/;"	l
e94	ls.asm	/^     e94:	0f be c0             	movsbl %al,%eax$/;"	l
e94	stressfs.asm	/^     e94:	8b 00                	mov    (%eax),%eax$/;"	l
e95	cat.asm	/^ e95:	c9                   	leave  $/;"	l
e95	cs550_user.asm	/^     e95:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
e95	echo.asm	/^ e95:	72 4d                	jb     ee4 <malloc+0xa6>$/;"	l
e95	kill.asm	/^ e95:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e95	sh.asm	/^     e95:	e8 07 01 00 00       	call   fa1 <open>$/;"	l
e95	wc.asm	/^     e95:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e96	cat.asm	/^ e96:	c3                   	ret    $/;"	l
e96	grep.asm	/^     e96:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
e96	init.asm	/^ e96:	77 07                	ja     e9f <morecore+0x16>$/;"	l
e96	ln.asm	/^ e96:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e96	stressfs.asm	/^     e96:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
e96	zombie.asm	/^ e96:	83 c0 08             	add    $0x8,%eax$/;"	l
e97	cat.asm	/^ e97:	55                   	push   %ebp$/;"	l
e97	echo.asm	/^ e97:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e97	ls.asm	/^     e97:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e98	cat.asm	/^ e98:	89 e5                	mov    %esp,%ebp$/;"	l
e98	init.asm	/^ e98:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)$/;"	l
e98	kill.asm	/^ e98:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
e98	mkdir.asm	/^ e98:	a3 d4 11 00 00       	mov    %eax,0x11d4$/;"	l
e98	rm.asm	/^ e98:	a3 d0 11 00 00       	mov    %eax,0x11d0$/;"	l
e98	wc.asm	/^     e98:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
e99	cs550_user.asm	/^     e99:	e9 b3 00 00 00       	jmp    f51 <printf+0x193>$/;"	l
e99	grep.asm	/^     e99:	0f be c0             	movsbl %al,%eax$/;"	l
e99	ln.asm	/^ e99:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e99	stressfs.asm	/^     e99:	76 ca                	jbe    e65 <free+0x19>$/;"	l
e99	zombie.asm	/^ e99:	eb 38                	jmp    ed3 <malloc+0xde>$/;"	l
e9a	cat.asm	/^ e9a:	83 ec 28             	sub    $0x28,%esp$/;"	l
e9a	echo.asm	/^ e9a:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e9a	sh.asm	/^     e9a:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e9b	kill.asm	/^ e9b:	75 0c                	jne    ea9 <malloc+0x70>$/;"	l
e9b	ls.asm	/^     e9b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e9b	stressfs.asm	/^     e9b:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e9b	wc.asm	/^     e9b:	77 24                	ja     ec1 <free+0x4f>$/;"	l
e9b	zombie.asm	/^ e9b:	a1 3c 11 00 00       	mov    0x113c,%eax$/;"	l
e9c	grep.asm	/^     e9c:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e9c	ln.asm	/^ e9c:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e9d	cat.asm	/^ e9d:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)$/;"	l
e9d	echo.asm	/^ e9d:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
e9d	kill.asm	/^ e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e9d	mkdir.asm	/^ e9d:	c7 05 d8 11 00 00 00 	movl   $0x0,0x11d8$/;"	l
e9d	rm.asm	/^ e9d:	c7 05 d4 11 00 00 00 	movl   $0x0,0x11d4$/;"	l
e9d	sh.asm	/^     e9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
e9d	wc.asm	/^     e9d:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e9e	cs550_user.asm	/^     e9e:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
e9e	ls.asm	/^     e9e:	89 04 24             	mov    %eax,(%esp)$/;"	l
e9e	stressfs.asm	/^     e9e:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
e9f	init.asm	/^ e9f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e9f	ln.asm	/^ e9f:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
ea	forktest.asm	/^  ea:	e8 8e 02 00 00       	call   37d <exit>$/;"	l
ea	stressfs.asm	/^      ea:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)$/;"	l
ea0	echo.asm	/^ ea0:	75 0c                	jne    eae <malloc+0x70>$/;"	l
ea0	grep.asm	/^     ea0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ea0	kill.asm	/^ ea0:	8b 10                	mov    (%eax),%edx$/;"	l
ea0	wc.asm	/^     ea0:	8b 00                	mov    (%eax),%eax$/;"	l
ea0	zombie.asm	/^ ea0:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
ea1	ls.asm	/^     ea1:	e8 bb fe ff ff       	call   d61 <putc>$/;"	l
ea1	sh.asm	/^     ea1:	79 07                	jns    eaa <stat+0x29>$/;"	l
ea1	stressfs.asm	/^     ea1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
ea2	cs550_user.asm	/^     ea2:	75 45                	jne    ee9 <printf+0x12b>$/;"	l
ea2	echo.asm	/^ ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ea2	init.asm	/^ ea2:	c1 e0 03             	shl    $0x3,%eax$/;"	l
ea2	kill.asm	/^ ea2:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ea2	ln.asm	/^ ea2:	72 4d                	jb     ef1 <malloc+0xa6>$/;"	l
ea2	wc.asm	/^     ea2:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
ea3	grep.asm	/^     ea3:	89 04 24             	mov    %eax,(%esp)$/;"	l
ea3	sh.asm	/^     ea3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ea3	zombie.asm	/^ ea3:	75 1b                	jne    ec0 <malloc+0xcb>$/;"	l
ea4	cat.asm	/^ ea4:	77 07                	ja     ead <morecore+0x16>$/;"	l
ea4	cs550_user.asm	/^     ea4:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
ea4	ln.asm	/^ ea4:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ea4	mkdir.asm	/^ ea4:	00 00 00 $/;"	l
ea4	rm.asm	/^ ea4:	00 00 00 $/;"	l
ea5	echo.asm	/^ ea5:	8b 10                	mov    (%eax),%edx$/;"	l
ea5	init.asm	/^ ea5:	89 04 24             	mov    %eax,(%esp)$/;"	l
ea5	kill.asm	/^ ea5:	89 10                	mov    %edx,(%eax)$/;"	l
ea5	wc.asm	/^     ea5:	77 1a                	ja     ec1 <free+0x4f>$/;"	l
ea5	zombie.asm	/^ ea5:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
ea6	cat.asm	/^ ea6:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)$/;"	l
ea6	grep.asm	/^     ea6:	e8 bb fe ff ff       	call   d66 <putc>$/;"	l
ea6	ls.asm	/^     ea6:	e9 30 01 00 00       	jmp    fdb <printf+0x19a>$/;"	l
ea7	cs550_user.asm	/^     ea7:	8b 00                	mov    (%eax),%eax$/;"	l
ea7	echo.asm	/^ ea7:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ea7	kill.asm	/^ ea7:	eb 26                	jmp    ecf <malloc+0x96>$/;"	l
ea7	ln.asm	/^ ea7:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ea7	mkdir.asm	/^ ea7:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ea7	rm.asm	/^ ea7:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ea7	wc.asm	/^     ea7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ea8	init.asm	/^ ea8:	e8 52 f5 ff ff       	call   3ff <sbrk>$/;"	l
ea8	sh.asm	/^     ea8:	eb 23                	jmp    ecd <stat+0x4c>$/;"	l
ea8	stressfs.asm	/^     ea8:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ea8	zombie.asm	/^ ea8:	89 04 24             	mov    %eax,(%esp)$/;"	l
ea9	cs550_user.asm	/^     ea9:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ea9	kill.asm	/^ ea9:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eaa	echo.asm	/^ eaa:	89 10                	mov    %edx,(%eax)$/;"	l
eaa	ln.asm	/^ eaa:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
eaa	mkdir.asm	/^ eaa:	8b 00                	mov    (%eax),%eax$/;"	l
eaa	rm.asm	/^ eaa:	8b 00                	mov    (%eax),%eax$/;"	l
eaa	sh.asm	/^     eaa:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
eaa	wc.asm	/^     eaa:	8b 00                	mov    (%eax),%eax$/;"	l
eab	grep.asm	/^     eab:	e9 30 01 00 00       	jmp    fe0 <printf+0x19a>$/;"	l
eab	ls.asm	/^     eab:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
eab	stressfs.asm	/^     eab:	01 c2                	add    %eax,%edx$/;"	l
eab	zombie.asm	/^ eab:	e8 ed fe ff ff       	call   d9d <morecore>$/;"	l
eac	cs550_user.asm	/^     eac:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
eac	echo.asm	/^ eac:	eb 26                	jmp    ed4 <malloc+0x96>$/;"	l
eac	kill.asm	/^ eac:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
eac	mkdir.asm	/^ eac:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
eac	rm.asm	/^ eac:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
eac	wc.asm	/^     eac:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
ead	cat.asm	/^ ead:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ead	init.asm	/^ ead:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ead	ln.asm	/^ ead:	75 0c                	jne    ebb <malloc+0x70>$/;"	l
ead	sh.asm	/^     ead:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ead	stressfs.asm	/^     ead:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
eae	echo.asm	/^ eae:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eaf	kill.asm	/^ eaf:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
eaf	ln.asm	/^ eaf:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eaf	ls.asm	/^     eaf:	0f 85 26 01 00 00    	jne    fdb <printf+0x19a>$/;"	l
eaf	mkdir.asm	/^ eaf:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eaf	rm.asm	/^ eaf:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eaf	wc.asm	/^     eaf:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe
eb	echo.asm	/^  eb:	0f b6 00             	movzbl (%eax),%eax$/;"	l
eb	init.asm	/^  eb:	e8 05 0b 00 00       	call   bf5 <printf>$/;"	l
eb	ln.asm	/^  eb:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
eb	zombie.asm	/^  eb:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
eb0	cat.asm	/^ eb0:	c1 e0 03             	shl    $0x3,%eax$/;"	l
eb0	cs550_user.asm	/^     eb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
eb0	grep.asm	/^     eb0:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)$/;"	l
eb0	init.asm	/^ eb0:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)$/;"	l
eb0	stressfs.asm	/^     eb0:	8b 00                	mov    (%eax),%eax$/;"	l
eb0	zombie.asm	/^ eb0:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
eb1	echo.asm	/^ eb1:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
eb1	sh.asm	/^     eb1:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eb2	kill.asm	/^ eb2:	89 c2                	mov    %eax,%edx$/;"	l
eb2	ln.asm	/^ eb2:	8b 10                	mov    (%eax),%edx$/;"	l
eb2	mkdir.asm	/^ eb2:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
eb2	rm.asm	/^ eb2:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
eb2	stressfs.asm	/^     eb2:	39 c2                	cmp    %eax,%edx$/;"	l
eb2	wc.asm	/^     eb2:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
eb3	cat.asm	/^ eb3:	89 04 24             	mov    %eax,(%esp)$/;"	l
eb3	zombie.asm	/^ eb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
eb4	cs550_user.asm	/^     eb4:	75 09                	jne    ebf <printf+0x101>$/;"	l
eb4	echo.asm	/^ eb4:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
eb4	grep.asm	/^     eb4:	0f 85 26 01 00 00    	jne    fe0 <printf+0x19a>$/;"	l
eb4	init.asm	/^ eb4:	75 07                	jne    ebd <morecore+0x34>$/;"	l
eb4	kill.asm	/^ eb4:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eb4	ln.asm	/^ eb4:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
eb4	sh.asm	/^     eb4:	89 04 24             	mov    %eax,(%esp)$/;"	l
eb4	stressfs.asm	/^     eb4:	75 24                	jne    eda <free+0x8e>$/;"	l
eb5	ls.asm	/^     eb5:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
eb5	mkdir.asm	/^ eb5:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
eb5	rm.asm	/^ eb5:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
eb5	wc.asm	/^     eb5:	76 d4                	jbe    e8b <free+0x19>$/;"	l
eb6	cat.asm	/^ eb6:	e8 52 f5 ff ff       	call   40d <sbrk>$/;"	l
eb6	cs550_user.asm	/^     eb6:	c7 45 f4 2c 12 00 00 	movl   $0x122c,-0xc(%ebp)$/;"	l
eb6	init.asm	/^ eb6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
eb6	stressfs.asm	/^     eb6:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
eb7	echo.asm	/^ eb7:	89 c2                	mov    %eax,%edx$/;"	l
eb7	kill.asm	/^ eb7:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
eb7	ln.asm	/^ eb7:	89 10                	mov    %edx,(%eax)$/;"	l
eb7	sh.asm	/^     eb7:	e8 fd 00 00 00       	call   fb9 <fstat>$/;"	l
eb7	wc.asm	/^     eb7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
eb7	zombie.asm	/^ eb7:	75 07                	jne    ec0 <malloc+0xcb>$/;"	l
eb8	mkdir.asm	/^ eb8:	72 4d                	jb     f07 <malloc+0xa6>$/;"	l
eb8	rm.asm	/^ eb8:	72 4d                	jb     f07 <malloc+0xa6>$/;"	l
eb9	echo.asm	/^ eb9:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eb9	ln.asm	/^ eb9:	eb 26                	jmp    ee1 <malloc+0x96>$/;"	l
eb9	ls.asm	/^     eb9:	75 2d                	jne    ee8 <printf+0xa7>$/;"	l
eb9	stressfs.asm	/^     eb9:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
eb9	zombie.asm	/^ eb9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
eba	grep.asm	/^     eba:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)$/;"	l
eba	kill.asm	/^ eba:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eba	mkdir.asm	/^ eba:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eba	rm.asm	/^ eba:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eba	wc.asm	/^     eba:	8b 00                	mov    (%eax),%eax$/;"	l
ebb	cat.asm	/^ ebb:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ebb	init.asm	/^ ebb:	eb 22                	jmp    edf <morecore+0x56>$/;"	l
ebb	ln.asm	/^ ebb:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ebb	ls.asm	/^     ebb:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
ebc	echo.asm	/^ ebc:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ebc	sh.asm	/^     ebc:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
ebc	stressfs.asm	/^     ebc:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ebc	wc.asm	/^     ebc:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
ebd	cs550_user.asm	/^     ebd:	eb 1e                	jmp    edd <printf+0x11f>$/;"	l
ebd	init.asm	/^ ebd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ebd	kill.asm	/^ ebd:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ebd	mkdir.asm	/^ ebd:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ebd	rm.asm	/^ ebd:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ebe	cat.asm	/^ ebe:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)$/;"	l
ebe	grep.asm	/^     ebe:	75 2d                	jne    eed <printf+0xa7>$/;"	l
ebe	ln.asm	/^ ebe:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ebe	ls.asm	/^     ebe:	8b 00                	mov    (%eax),%eax$/;"	l
ebe	zombie.asm	/^ ebe:	eb 13                	jmp    ed3 <malloc+0xde>$/;"	l
ebf	cs550_user.asm	/^     ebf:	eb 1c                	jmp    edd <printf+0x11f>$/;"	l
ebf	echo.asm	/^ ebf:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ebf	sh.asm	/^     ebf:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ebf	stressfs.asm	/^     ebf:	8b 00                	mov    (%eax),%eax$/;"	l
ebf	wc.asm	/^     ebf:	76 ca                	jbe    e8b <free+0x19>$/;"	l
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^  ebp = (uint*)v - 2;$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe
ec	kill.asm	/^  ec:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ec	sh.asm	/^      ec:	e8 8c 02 00 00       	call   37d <fork1>$/;"	l
ec0	grep.asm	/^     ec0:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
ec0	init.asm	/^ ec0:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
ec0	kill.asm	/^ ec0:	c1 e0 03             	shl    $0x3,%eax$/;"	l
ec0	ls.asm	/^     ec0:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
ec0	mkdir.asm	/^ ec0:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
ec0	rm.asm	/^ ec0:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
ec0	zombie.asm	/^ ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ec1	cs550_user.asm	/^     ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ec1	ln.asm	/^ ec1:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
ec1	stressfs.asm	/^     ec1:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ec1	wc.asm	/^     ec1:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ec2	cat.asm	/^ ec2:	75 07                	jne    ecb <morecore+0x34>$/;"	l
ec2	echo.asm	/^ ec2:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ec2	sh.asm	/^     ec2:	89 04 24             	mov    %eax,(%esp)$/;"	l
ec3	grep.asm	/^     ec3:	8b 00                	mov    (%eax),%eax$/;"	l
ec3	init.asm	/^ ec3:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ec3	kill.asm	/^ ec3:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
ec3	mkdir.asm	/^ ec3:	75 0c                	jne    ed1 <malloc+0x70>$/;"	l
ec3	rm.asm	/^ ec3:	75 0c                	jne    ed1 <malloc+0x70>$/;"	l
ec3	zombie.asm	/^ ec3:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
ec4	cat.asm	/^ ec4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ec4	cs550_user.asm	/^     ec4:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ec4	ln.asm	/^ ec4:	89 c2                	mov    %eax,%edx$/;"	l
ec4	stressfs.asm	/^     ec4:	01 c2                	add    %eax,%edx$/;"	l
ec4	wc.asm	/^     ec4:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ec5	echo.asm	/^ ec5:	c1 e0 03             	shl    $0x3,%eax$/;"	l
ec5	grep.asm	/^     ec5:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)$/;"	l
ec5	mkdir.asm	/^ ec5:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ec5	rm.asm	/^ ec5:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ec5	sh.asm	/^     ec5:	e8 bf 00 00 00       	call   f89 <close>$/;"	l
ec6	init.asm	/^ ec6:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
ec6	kill.asm	/^ ec6:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ec6	ln.asm	/^ ec6:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ec6	stressfs.asm	/^     ec6:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ec6	zombie.asm	/^ ec6:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ec7	cs550_user.asm	/^     ec7:	0f be c0             	movsbl %al,%eax$/;"	l
ec7	ls.asm	/^     ec7:	00 $/;"	l
ec7	wc.asm	/^     ec7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
ec8	echo.asm	/^ ec8:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
ec8	ls.asm	/^     ec8:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
ec8	mkdir.asm	/^ ec8:	8b 10                	mov    (%eax),%edx$/;"	l
ec8	rm.asm	/^ ec8:	8b 10                	mov    (%eax),%edx$/;"	l
ec9	cat.asm	/^ ec9:	eb 22                	jmp    eed <morecore+0x56>$/;"	l
ec9	init.asm	/^ ec9:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ec9	kill.asm	/^ ec9:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
ec9	ln.asm	/^ ec9:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ec9	stressfs.asm	/^     ec9:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ec9	zombie.asm	/^ ec9:	8b 00                	mov    (%eax),%eax$/;"	l
eca	cs550_user.asm	/^     eca:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
eca	mkdir.asm	/^ eca:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
eca	rm.asm	/^ eca:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
eca	sh.asm	/^     eca:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ecb	cat.asm	/^ ecb:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ecb	echo.asm	/^ ecb:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ecb	zombie.asm	/^ ecb:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ecc	grep.asm	/^     ecc:	00 $/;"	l
ecc	init.asm	/^ ecc:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ecc	kill.asm	/^ ecc:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ecc	ln.asm	/^ ecc:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ecc	stressfs.asm	/^     ecc:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ecd	grep.asm	/^     ecd:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
ecd	mkdir.asm	/^ ecd:	89 10                	mov    %edx,(%eax)$/;"	l
ecd	rm.asm	/^ ecd:	89 10                	mov    %edx,(%eax)$/;"	l
ecd	sh.asm	/^     ecd:	c9                   	leave  $/;"	l
ece	cat.asm	/^ ece:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
ece	cs550_user.asm	/^     ece:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ece	echo.asm	/^ ece:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
ece	sh.asm	/^     ece:	c3                   	ret    $/;"	l
ece	wc.asm	/^     ece:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ece	zombie.asm	/^ ece:	e9 70 ff ff ff       	jmp    e43 <malloc+0x4e>$/;"	l
ecf	init.asm	/^ ecf:	83 c0 08             	add    $0x8,%eax$/;"	l
ecf	kill.asm	/^ ecf:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ecf	ln.asm	/^ ecf:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ecf	ls.asm	/^     ecf:	00 $/;"	l
ecf	mkdir.asm	/^ ecf:	eb 26                	jmp    ef7 <malloc+0x96>$/;"	l
ecf	rm.asm	/^ ecf:	eb 26                	jmp    ef7 <malloc+0x96>$/;"	l
ecf	sh.asm	/^     ecf:	55                   	push   %ebp$/;"	l
ecf	stressfs.asm	/^     ecf:	8b 00                	mov    (%eax),%eax$/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecmd	sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe
ed	grep.asm	/^      ed:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
ed	mkdir.asm	/^  ed:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ed	rm.asm	/^  ed:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ed	wc.asm	/^      ed:	c7 44 24 04 a1 10 00 	movl   $0x10a1,0x4(%esp)$/;"	l
ed0	ls.asm	/^     ed0:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ed0	sh.asm	/^     ed0:	89 e5                	mov    %esp,%ebp$/;"	l
ed1	cat.asm	/^ ed1:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ed1	cs550_user.asm	/^     ed1:	89 04 24             	mov    %eax,(%esp)$/;"	l
ed1	echo.asm	/^ ed1:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ed1	mkdir.asm	/^ ed1:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ed1	rm.asm	/^ ed1:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ed1	stressfs.asm	/^     ed1:	8b 10                	mov    (%eax),%edx$/;"	l
ed1	wc.asm	/^     ed1:	01 c2                	add    %eax,%edx$/;"	l
ed2	init.asm	/^ ed2:	89 04 24             	mov    %eax,(%esp)$/;"	l
ed2	kill.asm	/^ ed2:	a3 94 11 00 00       	mov    %eax,0x1194$/;"	l
ed2	ln.asm	/^ ed2:	c1 e0 03             	shl    $0x3,%eax$/;"	l
ed2	sh.asm	/^     ed2:	83 ec 10             	sub    $0x10,%esp$/;"	l
ed3	stressfs.asm	/^     ed3:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ed3	wc.asm	/^     ed3:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ed3	zombie.asm	/^ ed3:	c9                   	leave  $/;"	l
ed4	cat.asm	/^ ed4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
ed4	cs550_user.asm	/^     ed4:	e8 05 fe ff ff       	call   cde <putc>$/;"	l
ed4	echo.asm	/^ ed4:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ed4	grep.asm	/^     ed4:	00 $/;"	l
ed4	ls.asm	/^     ed4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ed4	mkdir.asm	/^ ed4:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ed4	rm.asm	/^ ed4:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ed4	zombie.asm	/^ ed4:	c3                   	ret    $/;"	l
ed5	grep.asm	/^     ed5:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ed5	init.asm	/^ ed5:	e8 ce fe ff ff       	call   da8 <free>$/;"	l
ed5	ln.asm	/^ ed5:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
ed5	sh.asm	/^     ed5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
ed6	stressfs.asm	/^     ed6:	89 10                	mov    %edx,(%eax)$/;"	l
ed6	wc.asm	/^     ed6:	8b 00                	mov    (%eax),%eax$/;"	l
ed7	cat.asm	/^ ed7:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ed7	echo.asm	/^ ed7:	a3 90 11 00 00       	mov    %eax,0x1190$/;"	l
ed7	kill.asm	/^ ed7:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ed7	ls.asm	/^     ed7:	89 04 24             	mov    %eax,(%esp)$/;"	l
ed7	mkdir.asm	/^ ed7:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
ed7	rm.asm	/^ ed7:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
ed8	ln.asm	/^ ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ed8	stressfs.asm	/^     ed8:	eb 0a                	jmp    ee4 <free+0x98>$/;"	l
ed8	wc.asm	/^     ed8:	39 c2                	cmp    %eax,%edx$/;"	l
ed9	cs550_user.asm	/^     ed9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
ed9	grep.asm	/^     ed9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
eda	cat.asm	/^ eda:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
eda	init.asm	/^ eda:	a1 80 12 00 00       	mov    0x1280,%eax$/;"	l
eda	kill.asm	/^ eda:	83 c0 08             	add    $0x8,%eax$/;"	l
eda	ls.asm	/^     eda:	e8 aa fe ff ff       	call   d89 <printint>$/;"	l
eda	mkdir.asm	/^ eda:	89 c2                	mov    %eax,%edx$/;"	l
eda	rm.asm	/^ eda:	89 c2                	mov    %eax,%edx$/;"	l
eda	stressfs.asm	/^     eda:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
eda	wc.asm	/^     eda:	75 24                	jne    f00 <free+0x8e>$/;"	l
edb	ln.asm	/^ edb:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
edc	echo.asm	/^ edc:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
edc	grep.asm	/^     edc:	89 04 24             	mov    %eax,(%esp)$/;"	l
edc	mkdir.asm	/^ edc:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
edc	rm.asm	/^ edc:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
edc	sh.asm	/^     edc:	eb 25                	jmp    f03 <atoi+0x34>$/;"	l
edc	wc.asm	/^     edc:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
edd	cat.asm	/^ edd:	83 c0 08             	add    $0x8,%eax$/;"	l
edd	cs550_user.asm	/^     edd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
edd	kill.asm	/^ edd:	eb 38                	jmp    f17 <malloc+0xde>$/;"	l
edd	stressfs.asm	/^     edd:	8b 10                	mov    (%eax),%edx$/;"	l
ede	ln.asm	/^ ede:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ede	sh.asm	/^     ede:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
edf	echo.asm	/^ edf:	83 c0 08             	add    $0x8,%eax$/;"	l
edf	grep.asm	/^     edf:	e8 aa fe ff ff       	call   d8e <printint>$/;"	l
edf	init.asm	/^ edf:	c9                   	leave  $/;"	l
edf	kill.asm	/^ edf:	a1 94 11 00 00       	mov    0x1194,%eax$/;"	l
edf	ls.asm	/^     edf:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
edf	mkdir.asm	/^ edf:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
edf	rm.asm	/^ edf:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
edf	stressfs.asm	/^     edf:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
edf	wc.asm	/^     edf:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edi	proc.h	/^  uint edi;$/;"	m	struct:context
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe
ee	cat.asm	/^  ee:	8b 44 24 18          	mov    0x18(%esp),%eax$/;"	l
ee	echo.asm	/^  ee:	0f b6 d0             	movzbl %al,%edx$/;"	l
ee	ln.asm	/^  ee:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ee	ls.asm	/^      ee:	e8 4e 0d 00 00       	call   e41 <printf>$/;"	l
ee	zombie.asm	/^  ee:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ee0	cat.asm	/^ ee0:	89 04 24             	mov    %eax,(%esp)$/;"	l
ee0	cs550_user.asm	/^     ee0:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ee0	init.asm	/^ ee0:	c3                   	ret    $/;"	l
ee1	init.asm	/^ ee1:	55                   	push   %ebp$/;"	l
ee1	ln.asm	/^ ee1:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ee1	sh.asm	/^     ee1:	89 d0                	mov    %edx,%eax$/;"	l
ee2	echo.asm	/^ ee2:	eb 38                	jmp    f1c <malloc+0xde>$/;"	l
ee2	init.asm	/^ ee2:	89 e5                	mov    %esp,%ebp$/;"	l
ee2	mkdir.asm	/^ ee2:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ee2	rm.asm	/^ ee2:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ee2	stressfs.asm	/^     ee2:	89 10                	mov    %edx,(%eax)$/;"	l
ee2	wc.asm	/^     ee2:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ee3	cat.asm	/^ ee3:	e8 ce fe ff ff       	call   db6 <free>$/;"	l
ee3	cs550_user.asm	/^     ee3:	84 c0                	test   %al,%al$/;"	l
ee3	ls.asm	/^     ee3:	e9 ec 00 00 00       	jmp    fd4 <printf+0x193>$/;"	l
ee3	sh.asm	/^     ee3:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ee4	echo.asm	/^ ee4:	a1 90 11 00 00       	mov    0x1190,%eax$/;"	l
ee4	grep.asm	/^     ee4:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
ee4	init.asm	/^ ee4:	83 ec 28             	sub    $0x28,%esp$/;"	l
ee4	kill.asm	/^ ee4:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
ee4	ln.asm	/^ ee4:	a3 bc 11 00 00       	mov    %eax,0x11bc$/;"	l
ee4	stressfs.asm	/^     ee4:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ee5	cs550_user.asm	/^     ee5:	75 da                	jne    ec1 <printf+0x103>$/;"	l
ee5	mkdir.asm	/^ ee5:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ee5	rm.asm	/^ ee5:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ee5	wc.asm	/^     ee5:	8b 00                	mov    (%eax),%eax$/;"	l
ee6	sh.asm	/^     ee6:	01 d0                	add    %edx,%eax$/;"	l
ee7	cs550_user.asm	/^     ee7:	eb 68                	jmp    f51 <printf+0x193>$/;"	l
ee7	init.asm	/^ ee7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ee7	kill.asm	/^ ee7:	75 1b                	jne    f04 <malloc+0xcb>$/;"	l
ee7	stressfs.asm	/^     ee7:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ee7	wc.asm	/^     ee7:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ee8	cat.asm	/^ ee8:	a1 88 12 00 00       	mov    0x1288,%eax$/;"	l
ee8	grep.asm	/^     ee8:	e9 ec 00 00 00       	jmp    fd9 <printf+0x193>$/;"	l
ee8	ls.asm	/^     ee8:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
ee8	mkdir.asm	/^ ee8:	c1 e0 03             	shl    $0x3,%eax$/;"	l
ee8	rm.asm	/^ ee8:	c1 e0 03             	shl    $0x3,%eax$/;"	l
ee8	sh.asm	/^     ee8:	01 c0                	add    %eax,%eax$/;"	l
ee9	cs550_user.asm	/^     ee9:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
ee9	echo.asm	/^ ee9:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
ee9	kill.asm	/^ ee9:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
ee9	ln.asm	/^ ee9:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eea	init.asm	/^ eea:	83 c0 07             	add    $0x7,%eax$/;"	l
eea	sh.asm	/^     eea:	89 c1                	mov    %eax,%ecx$/;"	l
eea	stressfs.asm	/^     eea:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
eea	wc.asm	/^     eea:	01 c2                	add    %eax,%edx$/;"	l
eeb	mkdir.asm	/^ eeb:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
eeb	rm.asm	/^ eeb:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
eec	echo.asm	/^ eec:	75 1b                	jne    f09 <malloc+0xcb>$/;"	l
eec	kill.asm	/^ eec:	89 04 24             	mov    %eax,(%esp)$/;"	l
eec	ln.asm	/^ eec:	83 c0 08             	add    $0x8,%eax$/;"	l
eec	ls.asm	/^     eec:	74 06                	je     ef4 <printf+0xb3>$/;"	l
eec	sh.asm	/^     eec:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
eec	wc.asm	/^     eec:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
eed	cat.asm	/^ eed:	c9                   	leave  $/;"	l
eed	cs550_user.asm	/^     eed:	75 1d                	jne    f0c <printf+0x14e>$/;"	l
eed	grep.asm	/^     eed:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)$/;"	l
eed	init.asm	/^ eed:	c1 e8 03             	shr    $0x3,%eax$/;"	l
eee	cat.asm	/^ eee:	c3                   	ret    $/;"	l
eee	echo.asm	/^ eee:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
eee	ls.asm	/^     eee:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
eee	mkdir.asm	/^ eee:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eee	rm.asm	/^ eee:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eef	cat.asm	/^ eef:	55                   	push   %ebp$/;"	l
eef	cs550_user.asm	/^     eef:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
eef	kill.asm	/^ eef:	e8 ed fe ff ff       	call   de1 <morecore>$/;"	l
eef	ln.asm	/^ eef:	eb 38                	jmp    f29 <malloc+0xde>$/;"	l
eef	sh.asm	/^     eef:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
eef	wc.asm	/^     eef:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ef	forktest.asm	/^  ef:	c7 44 24 04 6e 0b 00 	movl   $0xb6e,0x4(%esp)$/;"	l
ef	kill.asm	/^  ef:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ef0	cat.asm	/^ ef0:	89 e5                	mov    %esp,%ebp$/;"	l
ef0	init.asm	/^ ef0:	83 c0 01             	add    $0x1,%eax$/;"	l
ef1	echo.asm	/^ ef1:	89 04 24             	mov    %eax,(%esp)$/;"	l
ef1	grep.asm	/^     ef1:	74 06                	je     ef9 <printf+0xb3>$/;"	l
ef1	ln.asm	/^ ef1:	a1 bc 11 00 00       	mov    0x11bc,%eax$/;"	l
ef1	mkdir.asm	/^ ef1:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
ef1	rm.asm	/^ ef1:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
ef1	stressfs.asm	/^     ef1:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ef2	cat.asm	/^ ef2:	83 ec 28             	sub    $0x28,%esp$/;"	l
ef2	cs550_user.asm	/^     ef2:	8b 00                	mov    (%eax),%eax$/;"	l
ef2	ls.asm	/^     ef2:	75 2d                	jne    f21 <printf+0xe0>$/;"	l
ef2	sh.asm	/^     ef2:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
ef2	wc.asm	/^     ef2:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ef3	grep.asm	/^     ef3:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)$/;"	l
ef3	init.asm	/^ ef3:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ef4	cs550_user.asm	/^     ef4:	0f be c0             	movsbl %al,%eax$/;"	l
ef4	echo.asm	/^ ef4:	e8 ed fe ff ff       	call   de6 <morecore>$/;"	l
ef4	kill.asm	/^ ef4:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ef4	ls.asm	/^     ef4:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
ef4	mkdir.asm	/^ ef4:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ef4	rm.asm	/^ ef4:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ef4	stressfs.asm	/^     ef4:	01 d0                	add    %edx,%eax$/;"	l
ef5	cat.asm	/^ ef5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ef5	sh.asm	/^     ef5:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ef5	wc.asm	/^     ef5:	8b 00                	mov    (%eax),%eax$/;"	l
ef6	init.asm	/^ ef6:	a1 80 12 00 00       	mov    0x1280,%eax$/;"	l
ef6	ln.asm	/^ ef6:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
ef6	stressfs.asm	/^     ef6:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
ef7	cs550_user.asm	/^     ef7:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ef7	grep.asm	/^     ef7:	75 2d                	jne    f26 <printf+0xe0>$/;"	l
ef7	kill.asm	/^ ef7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
ef7	ls.asm	/^     ef7:	8b 00                	mov    (%eax),%eax$/;"	l
ef7	mkdir.asm	/^ ef7:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ef7	rm.asm	/^ ef7:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ef7	wc.asm	/^     ef7:	8b 10                	mov    (%eax),%edx$/;"	l
ef8	cat.asm	/^ ef8:	83 c0 07             	add    $0x7,%eax$/;"	l
ef8	sh.asm	/^     ef8:	0f be c0             	movsbl %al,%eax$/;"	l
ef9	echo.asm	/^ ef9:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ef9	grep.asm	/^     ef9:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
ef9	ln.asm	/^ ef9:	75 1b                	jne    f16 <malloc+0xcb>$/;"	l
ef9	ls.asm	/^     ef9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
ef9	stressfs.asm	/^     ef9:	75 20                	jne    f1b <free+0xcf>$/;"	l
ef9	wc.asm	/^     ef9:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
efa	mkdir.asm	/^ efa:	a3 dc 11 00 00       	mov    %eax,0x11dc$/;"	l
efa	rm.asm	/^ efa:	a3 d8 11 00 00       	mov    %eax,0x11d8$/;"	l
efb	cat.asm	/^ efb:	c1 e8 03             	shr    $0x3,%eax$/;"	l
efb	cs550_user.asm	/^     efb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
efb	init.asm	/^ efb:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
efb	kill.asm	/^ efb:	75 07                	jne    f04 <malloc+0xcb>$/;"	l
efb	ln.asm	/^ efb:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
efb	sh.asm	/^     efb:	01 c8                	add    %ecx,%eax$/;"	l
efb	stressfs.asm	/^     efb:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
efc	echo.asm	/^ efc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
efc	grep.asm	/^     efc:	8b 00                	mov    (%eax),%eax$/;"	l
efc	wc.asm	/^     efc:	89 10                	mov    %edx,(%eax)$/;"	l
efd	kill.asm	/^ efd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
efd	sh.asm	/^     efd:	83 e8 30             	sub    $0x30,%eax$/;"	l
efe	cat.asm	/^ efe:	83 c0 01             	add    $0x1,%eax$/;"	l
efe	cs550_user.asm	/^     efe:	89 04 24             	mov    %eax,(%esp)$/;"	l
efe	grep.asm	/^     efe:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
efe	init.asm	/^ efe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
efe	ln.asm	/^ efe:	89 04 24             	mov    %eax,(%esp)$/;"	l
efe	stressfs.asm	/^     efe:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
efe	wc.asm	/^     efe:	eb 0a                	jmp    f0a <free+0x98>$/;"	l
eff	mkdir.asm	/^ eff:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eff	rm.asm	/^ eff:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	proc.h	/^  uint eip;$/;"	m	struct:context
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe
elf	bootblock.asm	/^  elf = (struct elfhdr*)0x10000;  \/\/ scratch space$/;"	d
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
end_op	log.c	/^end_op(void)$/;"	f
end_op	log.s	/^end_op:$/;"	l
entry	bootblock.asm	/^  entry = (void(*)(void))(elf->entry);$/;"	d
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr
entry	entry.S	/^entry:$/;"	l
entry	kernel.asm	/^entry:$/;"	l
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entrypgdir	main.c	/^pde_t entrypgdir[NPDENTRIES] = {$/;"	v
entrypgdir	main.c	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	v
entrypgdir	main.s	/^entrypgdir:$/;"	l
ep	kernel.asm	/^  ep = (char*)proc->sz;$/;"	d
epa	bootblock.asm	/^  epa = pa + count;$/;"	d
eph	bootblock.asm	/^  eph = ph + elf->phnum;$/;"	d
err	x86.h	/^  uint err;$/;"	m	struct:trapframe
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	sh.asm	/^  es = s + strlen(s);$/;"	d
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esi	proc.h	/^  uint esi;$/;"	m	struct:context
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
exec	exec.c	/^exec(char *path, char **argv)$/;"	f
exec	exec.s	/^exec:$/;"	l
execcmd	sh.c	/^execcmd(void)$/;"	f
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
execcmd	sh.s	/^execcmd:$/;"	l
exectest	usertests.c	/^exectest(void)$/;"	f
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f
exit	proc.s	/^exit:$/;"	l
exitiputtest	usertests.c	/^exitiputtest(void)$/;"	f
exitwait	usertests.c	/^exitwait(void)$/;"	f
f	Makefile	/^	dd if=\/dev\/zero of=xv6.img count=10000$/;"	m
f	Makefile	/^	dd if=\/dev\/zero of=xv6memfs.img count=10000$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6memfs.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernel of=xv6.img seek=1 conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc$/;"	m
f	cat.asm	/^   f:	c7 44 24 04 a0 12 00 	movl   $0x12a0,0x4(%esp)$/;"	l
f	kill.asm	/^   f:	c7 44 24 04 19 0f 00 	movl   $0xf19,0x4(%esp)$/;"	l
f	ln.asm	/^   f:	c7 44 24 04 2b 0f 00 	movl   $0xf2b,0x4(%esp)$/;"	l
f	mkdir.asm	/^   f:	c7 44 24 04 41 0f 00 	movl   $0xf41,0x4(%esp)$/;"	l
f	rm.asm	/^   f:	c7 44 24 04 41 0f 00 	movl   $0xf41,0x4(%esp)$/;"	l
f0	cs550_user.asm	/^      f0:	00 $/;"	l
f0	init.asm	/^  f0:	e8 8a 02 00 00       	call   37f <wait>$/;"	l
f00	echo.asm	/^ f00:	75 07                	jne    f09 <malloc+0xcb>$/;"	l
f00	ls.asm	/^     f00:	00 $/;"	l
f00	sh.asm	/^     f00:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
f00	wc.asm	/^     f00:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f01	cat.asm	/^ f01:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
f01	cs550_user.asm	/^     f01:	e8 d8 fd ff ff       	call   cde <putc>$/;"	l
f01	ln.asm	/^ f01:	e8 ed fe ff ff       	call   df3 <morecore>$/;"	l
f01	ls.asm	/^     f01:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
f01	stressfs.asm	/^     f01:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
f02	echo.asm	/^ f02:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f02	init.asm	/^ f02:	75 23                	jne    f27 <malloc+0x46>$/;"	l
f02	kill.asm	/^ f02:	eb 13                	jmp    f17 <malloc+0xde>$/;"	l
f02	mkdir.asm	/^ f02:	83 c0 08             	add    $0x8,%eax$/;"	l
f02	rm.asm	/^ f02:	83 c0 08             	add    $0x8,%eax$/;"	l
f03	sh.asm	/^     f03:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f03	wc.asm	/^     f03:	8b 10                	mov    (%eax),%edx$/;"	l
f04	cat.asm	/^ f04:	a1 88 12 00 00       	mov    0x1288,%eax$/;"	l
f04	init.asm	/^ f04:	c7 45 f0 78 12 00 00 	movl   $0x1278,-0x10(%ebp)$/;"	l
f04	kill.asm	/^ f04:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f04	stressfs.asm	/^     f04:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f05	grep.asm	/^     f05:	00 $/;"	l
f05	mkdir.asm	/^ f05:	eb 38                	jmp    f3f <malloc+0xde>$/;"	l
f05	rm.asm	/^ f05:	eb 38                	jmp    f3f <malloc+0xde>$/;"	l
f05	wc.asm	/^     f05:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
f06	cs550_user.asm	/^     f06:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
f06	grep.asm	/^     f06:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)$/;"	l
f06	ln.asm	/^ f06:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f06	sh.asm	/^     f06:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f07	echo.asm	/^ f07:	eb 13                	jmp    f1c <malloc+0xde>$/;"	l
f07	kill.asm	/^ f07:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f07	mkdir.asm	/^ f07:	a1 dc 11 00 00       	mov    0x11dc,%eax$/;"	l
f07	rm.asm	/^ f07:	a1 d8 11 00 00       	mov    0x11d8,%eax$/;"	l
f07	stressfs.asm	/^     f07:	01 c2                	add    %eax,%edx$/;"	l
f08	ls.asm	/^     f08:	00 $/;"	l
f08	wc.asm	/^     f08:	89 10                	mov    %edx,(%eax)$/;"	l
f09	cat.asm	/^ f09:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f09	echo.asm	/^ f09:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f09	ln.asm	/^ f09:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
f09	ls.asm	/^     f09:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f09	sh.asm	/^     f09:	3c 2f                	cmp    $0x2f,%al$/;"	l
f09	stressfs.asm	/^     f09:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f0a	cs550_user.asm	/^     f0a:	eb 45                	jmp    f51 <printf+0x193>$/;"	l
f0a	kill.asm	/^ f0a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f0a	wc.asm	/^     f0a:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f0b	init.asm	/^ f0b:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f0b	sh.asm	/^     f0b:	7e 0a                	jle    f17 <atoi+0x48>$/;"	l
f0c	cat.asm	/^ f0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
f0c	cs550_user.asm	/^     f0c:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
f0c	echo.asm	/^ f0c:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f0c	mkdir.asm	/^ f0c:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
f0c	rm.asm	/^ f0c:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
f0c	stressfs.asm	/^     f0c:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
f0d	grep.asm	/^     f0d:	00 $/;"	l
f0d	kill.asm	/^ f0d:	8b 00                	mov    (%eax),%eax$/;"	l
f0d	ln.asm	/^ f0d:	75 07                	jne    f16 <malloc+0xcb>$/;"	l
f0d	ls.asm	/^     f0d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f0d	sh.asm	/^     f0d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f0d	wc.asm	/^     f0d:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f0e	grep.asm	/^     f0e:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f0e	init.asm	/^ f0e:	a3 80 12 00 00       	mov    %eax,0x1280$/;"	l
f0f	echo.asm	/^ f0f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f0f	kill.asm	/^ f0f:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f0f	ln.asm	/^ f0f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f0f	mkdir.asm	/^ f0f:	75 1b                	jne    f2c <malloc+0xcb>$/;"	l
f0f	rm.asm	/^ f0f:	75 1b                	jne    f2c <malloc+0xcb>$/;"	l
f0f	stressfs.asm	/^     f0f:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
f1	cs550_user.asm	/^      f1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f1	echo.asm	/^  f1:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f1	grep.asm	/^      f1:	89 54 24 04          	mov    %edx,0x4(%esp)$/;"	l
f1	ln.asm	/^  f1:	38 c2                	cmp    %al,%dl$/;"	l
f1	mkdir.asm	/^  f1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f1	rm.asm	/^  f1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f1	sh.asm	/^      f1:	85 c0                	test   %eax,%eax$/;"	l
f1	stressfs.asm	/^      f1:	00 $/;"	l
f10	cat.asm	/^ f10:	75 23                	jne    f35 <malloc+0x46>$/;"	l
f10	cs550_user.asm	/^     f10:	75 17                	jne    f29 <printf+0x16b>$/;"	l
f10	ls.asm	/^     f10:	89 04 24             	mov    %eax,(%esp)$/;"	l
f10	sh.asm	/^     f10:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f10	wc.asm	/^     f10:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
f11	mkdir.asm	/^ f11:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f11	rm.asm	/^ f11:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f12	cat.asm	/^ f12:	c7 45 f0 80 12 00 00 	movl   $0x1280,-0x10(%ebp)$/;"	l
f12	cs550_user.asm	/^     f12:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
f12	echo.asm	/^ f12:	8b 00                	mov    (%eax),%eax$/;"	l
f12	grep.asm	/^     f12:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f12	kill.asm	/^ f12:	e9 70 ff ff ff       	jmp    e87 <malloc+0x4e>$/;"	l
f12	stressfs.asm	/^     f12:	8b 10                	mov    (%eax),%edx$/;"	l
f13	init.asm	/^ f13:	a1 80 12 00 00       	mov    0x1280,%eax$/;"	l
f13	ls.asm	/^     f13:	e8 71 fe ff ff       	call   d89 <printint>$/;"	l
f13	sh.asm	/^     f13:	3c 39                	cmp    $0x39,%al$/;"	l
f14	echo.asm	/^ f14:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f14	ln.asm	/^ f14:	eb 13                	jmp    f29 <malloc+0xde>$/;"	l
f14	mkdir.asm	/^ f14:	89 04 24             	mov    %eax,(%esp)$/;"	l
f14	rm.asm	/^ f14:	89 04 24             	mov    %eax,(%esp)$/;"	l
f14	stressfs.asm	/^     f14:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f15	cs550_user.asm	/^     f15:	0f be c0             	movsbl %al,%eax$/;"	l
f15	grep.asm	/^     f15:	89 04 24             	mov    %eax,(%esp)$/;"	l
f15	sh.asm	/^     f15:	7e c7                	jle    ede <atoi+0xf>$/;"	l
f16	ln.asm	/^ f16:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f17	echo.asm	/^ f17:	e9 70 ff ff ff       	jmp    e8c <malloc+0x4e>$/;"	l
f17	kill.asm	/^ f17:	c9                   	leave  $/;"	l
f17	mkdir.asm	/^ f17:	e8 ed fe ff ff       	call   e09 <morecore>$/;"	l
f17	rm.asm	/^ f17:	e8 ed fe ff ff       	call   e09 <morecore>$/;"	l
f17	sh.asm	/^     f17:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f17	stressfs.asm	/^     f17:	89 10                	mov    %edx,(%eax)$/;"	l
f17	wc.asm	/^     f17:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f18	cs550_user.asm	/^     f18:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f18	grep.asm	/^     f18:	e8 71 fe ff ff       	call   d8e <printint>$/;"	l
f18	init.asm	/^ f18:	a3 78 12 00 00       	mov    %eax,0x1278$/;"	l
f18	kill.asm	/^ f18:	c3                   	ret    $/;"	l
f18	ls.asm	/^     f18:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
f19	cat.asm	/^ f19:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f19	ln.asm	/^ f19:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f19	stressfs.asm	/^     f19:	eb 08                	jmp    f23 <free+0xd7>$/;"	l
f1a	sh.asm	/^     f1a:	c9                   	leave  $/;"	l
f1a	wc.asm	/^     f1a:	01 d0                	add    %edx,%eax$/;"	l
f1b	sh.asm	/^     f1b:	c3                   	ret    $/;"	l
f1b	stressfs.asm	/^     f1b:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f1c	cat.asm	/^ f1c:	a3 88 12 00 00       	mov    %eax,0x1288$/;"	l
f1c	cs550_user.asm	/^     f1c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f1c	echo.asm	/^ f1c:	c9                   	leave  $/;"	l
f1c	ln.asm	/^ f1c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f1c	ls.asm	/^     f1c:	e9 b3 00 00 00       	jmp    fd4 <printf+0x193>$/;"	l
f1c	mkdir.asm	/^ f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f1c	rm.asm	/^ f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f1c	sh.asm	/^     f1c:	55                   	push   %ebp$/;"	l
f1c	wc.asm	/^     f1c:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
f1d	echo.asm	/^ f1d:	c3                   	ret    $/;"	l
f1d	grep.asm	/^     f1d:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
f1d	init.asm	/^ f1d:	c7 05 7c 12 00 00 00 	movl   $0x0,0x127c$/;"	l
f1d	sh.asm	/^     f1d:	89 e5                	mov    %esp,%ebp$/;"	l
f1e	stressfs.asm	/^     f1e:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
f1f	cs550_user.asm	/^     f1f:	89 04 24             	mov    %eax,(%esp)$/;"	l
f1f	ln.asm	/^ f1f:	8b 00                	mov    (%eax),%eax$/;"	l
f1f	mkdir.asm	/^ f1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
f1f	rm.asm	/^ f1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
f1f	sh.asm	/^     f1f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f1f	wc.asm	/^     f1f:	75 20                	jne    f41 <free+0xcf>$/;"	l
f2	cat.asm	/^  f2:	89 04 24             	mov    %eax,(%esp)$/;"	l
f2	kill.asm	/^  f2:	0f b6 c0             	movzbl %al,%eax$/;"	l
f2	stressfs.asm	/^      f2:	8d 44 24 1e          	lea    0x1e(%esp),%eax$/;"	l
f2	zombie.asm	/^  f2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f21	cat.asm	/^ f21:	a1 88 12 00 00       	mov    0x1288,%eax$/;"	l
f21	grep.asm	/^     f21:	e9 b3 00 00 00       	jmp    fd9 <printf+0x193>$/;"	l
f21	ln.asm	/^ f21:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f21	ls.asm	/^     f21:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
f21	stressfs.asm	/^     f21:	89 10                	mov    %edx,(%eax)$/;"	l
f21	wc.asm	/^     f21:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f22	cs550_user.asm	/^     f22:	e8 b7 fd ff ff       	call   cde <putc>$/;"	l
f22	sh.asm	/^     f22:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f23	mkdir.asm	/^ f23:	75 07                	jne    f2c <malloc+0xcb>$/;"	l
f23	rm.asm	/^ f23:	75 07                	jne    f2c <malloc+0xcb>$/;"	l
f23	stressfs.asm	/^     f23:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f24	init.asm	/^ f24:	00 00 00 $/;"	l
f24	ln.asm	/^ f24:	e9 70 ff ff ff       	jmp    e99 <malloc+0x4e>$/;"	l
f24	wc.asm	/^     f24:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
f25	ls.asm	/^     f25:	75 45                	jne    f6c <printf+0x12b>$/;"	l
f25	mkdir.asm	/^ f25:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f25	rm.asm	/^ f25:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f25	sh.asm	/^     f25:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
f26	cat.asm	/^ f26:	a3 80 12 00 00       	mov    %eax,0x1280$/;"	l
f26	grep.asm	/^     f26:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)$/;"	l
f26	stressfs.asm	/^     f26:	a3 f0 12 00 00       	mov    %eax,0x12f0$/;"	l
f27	cs550_user.asm	/^     f27:	eb 28                	jmp    f51 <printf+0x193>$/;"	l
f27	init.asm	/^ f27:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f27	ls.asm	/^     f27:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
f27	wc.asm	/^     f27:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
f28	sh.asm	/^     f28:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f29	cs550_user.asm	/^     f29:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
f29	ln.asm	/^ f29:	c9                   	leave  $/;"	l
f2a	grep.asm	/^     f2a:	75 45                	jne    f71 <printf+0x12b>$/;"	l
f2a	init.asm	/^ f2a:	8b 00                	mov    (%eax),%eax$/;"	l
f2a	ln.asm	/^ f2a:	c3                   	ret    $/;"	l
f2a	ls.asm	/^     f2a:	8b 00                	mov    (%eax),%eax$/;"	l
f2a	mkdir.asm	/^ f2a:	eb 13                	jmp    f3f <malloc+0xde>$/;"	l
f2a	rm.asm	/^ f2a:	eb 13                	jmp    f3f <malloc+0xde>$/;"	l
f2a	wc.asm	/^     f2a:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f2b	cat.asm	/^ f2b:	c7 05 84 12 00 00 00 	movl   $0x0,0x1284$/;"	l
f2b	sh.asm	/^     f2b:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
f2b	stressfs.asm	/^     f2b:	c9                   	leave  $/;"	l
f2c	grep.asm	/^     f2c:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
f2c	init.asm	/^ f2c:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f2c	ls.asm	/^     f2c:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f2c	mkdir.asm	/^ f2c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f2c	rm.asm	/^ f2c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f2c	stressfs.asm	/^     f2c:	c3                   	ret    $/;"	l
f2d	stressfs.asm	/^     f2d:	55                   	push   %ebp$/;"	l
f2d	wc.asm	/^     f2d:	01 c2                	add    %eax,%edx$/;"	l
f2e	sh.asm	/^     f2e:	eb 17                	jmp    f47 <memmove+0x2b>$/;"	l
f2e	stressfs.asm	/^     f2e:	89 e5                	mov    %esp,%ebp$/;"	l
f2f	grep.asm	/^     f2f:	8b 00                	mov    (%eax),%eax$/;"	l
f2f	init.asm	/^ f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f2f	ls.asm	/^     f2f:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
f2f	mkdir.asm	/^ f2f:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f2f	rm.asm	/^ f2f:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f2f	wc.asm	/^     f2f:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f3	ln.asm	/^  f3:	74 de                	je     d3 <strcmp+0x5>$/;"	l
f3	ls.asm	/^      f3:	e9 01 02 00 00       	jmp    2f9 <ls+0x249>$/;"	l
f3	sh.asm	/^      f3:	75 0e                	jne    103 <runcmd+0x103>$/;"	l
f30	cs550_user.asm	/^     f30:	00 $/;"	l
f30	sh.asm	/^     f30:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f30	stressfs.asm	/^     f30:	83 ec 28             	sub    $0x28,%esp$/;"	l
f31	cs550_user.asm	/^     f31:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f31	grep.asm	/^     f31:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f32	cat.asm	/^ f32:	00 00 00 $/;"	l
f32	init.asm	/^ f32:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f32	mkdir.asm	/^ f32:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f32	rm.asm	/^ f32:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f32	wc.asm	/^     f32:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
f33	ls.asm	/^     f33:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
f33	sh.asm	/^     f33:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
f33	stressfs.asm	/^     f33:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)$/;"	l
f34	cs550_user.asm	/^     f34:	89 04 24             	mov    %eax,(%esp)$/;"	l
f34	grep.asm	/^     f34:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
f35	cat.asm	/^ f35:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f35	init.asm	/^ f35:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
f35	mkdir.asm	/^ f35:	8b 00                	mov    (%eax),%eax$/;"	l
f35	rm.asm	/^ f35:	8b 00                	mov    (%eax),%eax$/;"	l
f35	wc.asm	/^     f35:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
f36	sh.asm	/^     f36:	89 55 fc             	mov    %edx,-0x4(%ebp)$/;"	l
f37	cs550_user.asm	/^     f37:	e8 a2 fd ff ff       	call   cde <putc>$/;"	l
f37	ls.asm	/^     f37:	75 09                	jne    f42 <printf+0x101>$/;"	l
f37	mkdir.asm	/^ f37:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f37	rm.asm	/^ f37:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f38	cat.asm	/^ f38:	8b 00                	mov    (%eax),%eax$/;"	l
f38	grep.asm	/^     f38:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
f38	init.asm	/^ f38:	72 4d                	jb     f87 <malloc+0xa6>$/;"	l
f38	wc.asm	/^     f38:	8b 10                	mov    (%eax),%edx$/;"	l
f39	ls.asm	/^     f39:	c7 45 f4 57 12 00 00 	movl   $0x1257,-0xc(%ebp)$/;"	l
f39	sh.asm	/^     f39:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
f3a	cat.asm	/^ f3a:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f3a	init.asm	/^ f3a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f3a	mkdir.asm	/^ f3a:	e9 70 ff ff ff       	jmp    eaf <malloc+0x4e>$/;"	l
f3a	rm.asm	/^ f3a:	e9 70 ff ff ff       	jmp    eaf <malloc+0x4e>$/;"	l
f3a	stressfs.asm	/^     f3a:	77 07                	ja     f43 <morecore+0x16>$/;"	l
f3a	wc.asm	/^     f3a:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f3c	cs550_user.asm	/^     f3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
f3c	grep.asm	/^     f3c:	75 09                	jne    f47 <printf+0x101>$/;"	l
f3c	sh.asm	/^     f3c:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
f3c	stressfs.asm	/^     f3c:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)$/;"	l
f3d	cat.asm	/^ f3d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f3d	init.asm	/^ f3d:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f3d	wc.asm	/^     f3d:	89 10                	mov    %edx,(%eax)$/;"	l
f3e	grep.asm	/^     f3e:	c7 45 f4 4a 12 00 00 	movl   $0x124a,-0xc(%ebp)$/;"	l
f3f	cs550_user.asm	/^     f3f:	0f be c0             	movsbl %al,%eax$/;"	l
f3f	mkdir.asm	/^ f3f:	c9                   	leave  $/;"	l
f3f	rm.asm	/^ f3f:	c9                   	leave  $/;"	l
f3f	sh.asm	/^     f3f:	89 4d f8             	mov    %ecx,-0x8(%ebp)$/;"	l
f3f	wc.asm	/^     f3f:	eb 08                	jmp    f49 <free+0xd7>$/;"	l
f4	echo.asm	/^  f4:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f4	mkdir.asm	/^  f4:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f4	rm.asm	/^  f4:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f4	wc.asm	/^      f4:	00 $/;"	l
f40	cat.asm	/^ f40:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f40	init.asm	/^ f40:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
f40	ls.asm	/^     f40:	eb 1e                	jmp    f60 <printf+0x11f>$/;"	l
f40	mkdir.asm	/^ f40:	c3                   	ret    $/;"	l
f40	rm.asm	/^ f40:	c3                   	ret    $/;"	l
f41	wc.asm	/^     f41:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f42	cs550_user.asm	/^     f42:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f42	ls.asm	/^     f42:	eb 1c                	jmp    f60 <printf+0x11f>$/;"	l
f42	sh.asm	/^     f42:	0f b6 12             	movzbl (%edx),%edx$/;"	l
f43	cat.asm	/^ f43:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
f43	init.asm	/^ f43:	75 0c                	jne    f51 <malloc+0x70>$/;"	l
f43	stressfs.asm	/^     f43:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f44	ls.asm	/^     f44:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f44	wc.asm	/^     f44:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
f45	grep.asm	/^     f45:	eb 1e                	jmp    f65 <printf+0x11f>$/;"	l
f45	init.asm	/^ f45:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f45	sh.asm	/^     f45:	88 10                	mov    %dl,(%eax)$/;"	l
f46	cat.asm	/^ f46:	72 4d                	jb     f95 <malloc+0xa6>$/;"	l
f46	cs550_user.asm	/^     f46:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f46	stressfs.asm	/^     f46:	c1 e0 03             	shl    $0x3,%eax$/;"	l
f47	grep.asm	/^     f47:	eb 1c                	jmp    f65 <printf+0x11f>$/;"	l
f47	ls.asm	/^     f47:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f47	sh.asm	/^     f47:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
f47	wc.asm	/^     f47:	89 10                	mov    %edx,(%eax)$/;"	l
f48	cat.asm	/^ f48:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f48	init.asm	/^ f48:	8b 10                	mov    (%eax),%edx$/;"	l
f49	cs550_user.asm	/^     f49:	89 04 24             	mov    %eax,(%esp)$/;"	l
f49	grep.asm	/^     f49:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f49	stressfs.asm	/^     f49:	89 04 24             	mov    %eax,(%esp)$/;"	l
f49	wc.asm	/^     f49:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f4a	init.asm	/^ f4a:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f4a	ls.asm	/^     f4a:	0f be c0             	movsbl %al,%eax$/;"	l
f4a	sh.asm	/^     f4a:	8d 50 ff             	lea    -0x1(%eax),%edx$/;"	l
f4b	cat.asm	/^ f4b:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f4c	cs550_user.asm	/^     f4c:	e8 8d fd ff ff       	call   cde <putc>$/;"	l
f4c	grep.asm	/^     f4c:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f4c	stressfs.asm	/^     f4c:	e8 52 f5 ff ff       	call   4a3 <sbrk>$/;"	l
f4c	wc.asm	/^     f4c:	a3 68 13 00 00       	mov    %eax,0x1368$/;"	l
f4d	init.asm	/^ f4d:	89 10                	mov    %edx,(%eax)$/;"	l
f4d	ls.asm	/^     f4d:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f4d	sh.asm	/^     f4d:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
f4e	cat.asm	/^ f4e:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
f4f	grep.asm	/^     f4f:	0f be c0             	movsbl %al,%eax$/;"	l
f4f	init.asm	/^ f4f:	eb 26                	jmp    f77 <malloc+0x96>$/;"	l
f5	cat.asm	/^  f5:	e8 06 ff ff ff       	call   0 <cat>$/;"	l
f5	grep.asm	/^      f5:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f5	init.asm	/^  f5:	89 44 24 18          	mov    %eax,0x18(%esp)$/;"	l
f5	kill.asm	/^  f5:	29 c2                	sub    %eax,%edx$/;"	l
f5	ln.asm	/^  f5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f5	sh.asm	/^      f5:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f5	wc.asm	/^      f5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f5	zombie.asm	/^  f5:	89 04 24             	mov    %eax,(%esp)$/;"	l
f50	sh.asm	/^     f50:	85 c0                	test   %eax,%eax$/;"	l
f51	cat.asm	/^ f51:	75 0c                	jne    f5f <malloc+0x70>$/;"	l
f51	cs550_user.asm	/^     f51:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
f51	init.asm	/^ f51:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f51	ls.asm	/^     f51:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f51	stressfs.asm	/^     f51:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f51	wc.asm	/^     f51:	c9                   	leave  $/;"	l
f52	grep.asm	/^     f52:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f52	sh.asm	/^     f52:	7f dc                	jg     f30 <memmove+0x14>$/;"	l
f52	wc.asm	/^     f52:	c3                   	ret    $/;"	l
f53	cat.asm	/^ f53:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f53	wc.asm	/^     f53:	55                   	push   %ebp$/;"	l
f54	init.asm	/^ f54:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f54	ls.asm	/^     f54:	89 04 24             	mov    %eax,(%esp)$/;"	l
f54	sh.asm	/^     f54:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f54	stressfs.asm	/^     f54:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)$/;"	l
f54	wc.asm	/^     f54:	89 e5                	mov    %esp,%ebp$/;"	l
f56	cat.asm	/^ f56:	8b 10                	mov    (%eax),%edx$/;"	l
f56	grep.asm	/^     f56:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f56	wc.asm	/^     f56:	83 ec 28             	sub    $0x28,%esp$/;"	l
f57	init.asm	/^ f57:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
f57	ls.asm	/^     f57:	e8 05 fe ff ff       	call   d61 <putc>$/;"	l
f57	sh.asm	/^     f57:	c9                   	leave  $/;"	l
f58	cat.asm	/^ f58:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f58	cs550_user.asm	/^     f58:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
f58	sh.asm	/^     f58:	c3                   	ret    $/;"	l
f58	stressfs.asm	/^     f58:	75 07                	jne    f61 <morecore+0x34>$/;"	l
f59	grep.asm	/^     f59:	89 04 24             	mov    %eax,(%esp)$/;"	l
f59	sh.asm	/^     f59:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
f59	wc.asm	/^     f59:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)$/;"	l
f5a	init.asm	/^ f5a:	89 c2                	mov    %eax,%edx$/;"	l
f5a	stressfs.asm	/^     f5a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f5b	cat.asm	/^ f5b:	89 10                	mov    %edx,(%eax)$/;"	l
f5c	cs550_user.asm	/^     f5c:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
f5c	grep.asm	/^     f5c:	e8 05 fe ff ff       	call   d66 <putc>$/;"	l
f5c	init.asm	/^ f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f5c	ls.asm	/^     f5c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
f5d	cat.asm	/^ f5d:	eb 26                	jmp    f85 <malloc+0x96>$/;"	l
f5e	sh.asm	/^     f5e:	cd 40                	int    $0x40$/;"	l
f5f	cat.asm	/^ f5f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f5f	cs550_user.asm	/^     f5f:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f5f	init.asm	/^ f5f:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
f5f	stressfs.asm	/^     f5f:	eb 22                	jmp    f83 <morecore+0x56>$/;"	l
f6	forktest.asm	/^  f6:	00 $/;"	l
f6	stressfs.asm	/^      f6:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f60	ls.asm	/^     f60:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f60	sh.asm	/^     f60:	c3                   	ret    $/;"	l
f60	wc.asm	/^     f60:	77 07                	ja     f69 <morecore+0x16>$/;"	l
f61	grep.asm	/^     f61:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
f61	sh.asm	/^     f61:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
f61	stressfs.asm	/^     f61:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f62	cat.asm	/^ f62:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f62	cs550_user.asm	/^     f62:	01 d0                	add    %edx,%eax$/;"	l
f62	init.asm	/^ f62:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f62	wc.asm	/^     f62:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)$/;"	l
f63	ls.asm	/^     f63:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f64	cs550_user.asm	/^     f64:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f64	stressfs.asm	/^     f64:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f65	cat.asm	/^ f65:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
f65	grep.asm	/^     f65:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f65	init.asm	/^ f65:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f66	ls.asm	/^     f66:	84 c0                	test   %al,%al$/;"	l
f66	sh.asm	/^     f66:	cd 40                	int    $0x40$/;"	l
f67	cs550_user.asm	/^     f67:	84 c0                	test   %al,%al$/;"	l
f67	stressfs.asm	/^     f67:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f68	cat.asm	/^ f68:	89 c2                	mov    %eax,%edx$/;"	l
f68	grep.asm	/^     f68:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f68	init.asm	/^ f68:	c1 e0 03             	shl    $0x3,%eax$/;"	l
f68	ls.asm	/^     f68:	75 da                	jne    f44 <printf+0x103>$/;"	l
f68	sh.asm	/^     f68:	c3                   	ret    $/;"	l
f69	cs550_user.asm	/^     f69:	0f 85 71 fe ff ff    	jne    de0 <printf+0x22>$/;"	l
f69	sh.asm	/^     f69:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
f69	wc.asm	/^     f69:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f6a	cat.asm	/^ f6a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f6a	ls.asm	/^     f6a:	eb 68                	jmp    fd4 <printf+0x193>$/;"	l
f6a	stressfs.asm	/^     f6a:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
f6b	grep.asm	/^     f6b:	84 c0                	test   %al,%al$/;"	l
f6b	init.asm	/^ f6b:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
f6c	ls.asm	/^     f6c:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
f6c	wc.asm	/^     f6c:	c1 e0 03             	shl    $0x3,%eax$/;"	l
f6d	cat.asm	/^ f6d:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
f6d	grep.asm	/^     f6d:	75 da                	jne    f49 <printf+0x103>$/;"	l
f6d	stressfs.asm	/^     f6d:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
f6e	init.asm	/^ f6e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f6e	sh.asm	/^     f6e:	cd 40                	int    $0x40$/;"	l
f6f	cs550_user.asm	/^     f6f:	c9                   	leave  $/;"	l
f6f	grep.asm	/^     f6f:	eb 68                	jmp    fd9 <printf+0x193>$/;"	l
f6f	wc.asm	/^     f6f:	89 04 24             	mov    %eax,(%esp)$/;"	l
f7	echo.asm	/^  f7:	0f b6 c0             	movzbl %al,%eax$/;"	l
f7	forktest.asm	/^  f7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f7	kill.asm	/^  f7:	89 d0                	mov    %edx,%eax$/;"	l
f7	mkdir.asm	/^  f7:	84 c0                	test   %al,%al$/;"	l
f7	rm.asm	/^  f7:	84 c0                	test   %al,%al$/;"	l
f70	cat.asm	/^ f70:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f70	cs550_user.asm	/^     f70:	c3                   	ret    $/;"	l
f70	ls.asm	/^     f70:	75 1d                	jne    f8f <printf+0x14e>$/;"	l
f70	sh.asm	/^     f70:	c3                   	ret    $/;"	l
f70	stressfs.asm	/^     f70:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f71	cs550_user.asm	/^     f71:	55                   	push   %ebp$/;"	l
f71	grep.asm	/^     f71:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)$/;"	l
f71	init.asm	/^ f71:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
f71	sh.asm	/^     f71:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
f72	cs550_user.asm	/^     f72:	89 e5                	mov    %esp,%ebp$/;"	l
f72	ls.asm	/^     f72:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
f72	wc.asm	/^     f72:	e8 52 f5 ff ff       	call   4c9 <sbrk>$/;"	l
f73	cat.asm	/^ f73:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f73	stressfs.asm	/^     f73:	83 c0 08             	add    $0x8,%eax$/;"	l
f74	cs550_user.asm	/^     f74:	83 ec 10             	sub    $0x10,%esp$/;"	l
f74	init.asm	/^ f74:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
f75	grep.asm	/^     f75:	75 1d                	jne    f94 <printf+0x14e>$/;"	l
f75	ls.asm	/^     f75:	8b 00                	mov    (%eax),%eax$/;"	l
f76	cat.asm	/^ f76:	c1 e0 03             	shl    $0x3,%eax$/;"	l
f76	sh.asm	/^     f76:	cd 40                	int    $0x40$/;"	l
f76	stressfs.asm	/^     f76:	89 04 24             	mov    %eax,(%esp)$/;"	l
f77	cs550_user.asm	/^     f77:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f77	grep.asm	/^     f77:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
f77	init.asm	/^ f77:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f77	ls.asm	/^     f77:	0f be c0             	movsbl %al,%eax$/;"	l
f77	wc.asm	/^     f77:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f78	sh.asm	/^     f78:	c3                   	ret    $/;"	l
f79	cat.asm	/^ f79:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
f79	sh.asm	/^     f79:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
f79	stressfs.asm	/^     f79:	e8 ce fe ff ff       	call   e4c <free>$/;"	l
f7a	cs550_user.asm	/^     f7a:	83 e8 08             	sub    $0x8,%eax$/;"	l
f7a	grep.asm	/^     f7a:	8b 00                	mov    (%eax),%eax$/;"	l
f7a	init.asm	/^ f7a:	a3 80 12 00 00       	mov    %eax,0x1280$/;"	l
f7a	ls.asm	/^     f7a:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f7a	wc.asm	/^     f7a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)$/;"	l
f7c	cat.asm	/^ f7c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f7c	grep.asm	/^     f7c:	0f be c0             	movsbl %al,%eax$/;"	l
f7d	cs550_user.asm	/^     f7d:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
f7e	ls.asm	/^     f7e:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f7e	sh.asm	/^     f7e:	cd 40                	int    $0x40$/;"	l
f7e	stressfs.asm	/^     f7e:	a1 f0 12 00 00       	mov    0x12f0,%eax$/;"	l
f7e	wc.asm	/^     f7e:	75 07                	jne    f87 <morecore+0x34>$/;"	l
f7f	cat.asm	/^ f7f:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
f7f	grep.asm	/^     f7f:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f7f	init.asm	/^ f7f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f8	cs550_user.asm	/^      f8:	e8 c1 0c 00 00       	call   dbe <printf>$/;"	l
f8	grep.asm	/^      f8:	89 04 24             	mov    %eax,(%esp)$/;"	l
f8	ln.asm	/^  f8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f8	ls.asm	/^      f8:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax$/;"	l
f8	sh.asm	/^      f8:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f8	zombie.asm	/^  f8:	e8 26 ff ff ff       	call   23 <stosb>$/;"	l
f80	cs550_user.asm	/^     f80:	a1 a4 15 00 00       	mov    0x15a4,%eax$/;"	l
f80	sh.asm	/^     f80:	c3                   	ret    $/;"	l
f80	wc.asm	/^     f80:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f81	ls.asm	/^     f81:	89 04 24             	mov    %eax,(%esp)$/;"	l
f81	sh.asm	/^     f81:	b8 10 00 00 00       	mov    $0x10,%eax$/;"	l
f82	cat.asm	/^ f82:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
f82	init.asm	/^ f82:	83 c0 08             	add    $0x8,%eax$/;"	l
f83	grep.asm	/^     f83:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f83	stressfs.asm	/^     f83:	c9                   	leave  $/;"	l
f84	ls.asm	/^     f84:	e8 d8 fd ff ff       	call   d61 <putc>$/;"	l
f84	stressfs.asm	/^     f84:	c3                   	ret    $/;"	l
f85	cat.asm	/^ f85:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f85	cs550_user.asm	/^     f85:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
f85	init.asm	/^ f85:	eb 38                	jmp    fbf <malloc+0xde>$/;"	l
f85	stressfs.asm	/^     f85:	55                   	push   %ebp$/;"	l
f85	wc.asm	/^     f85:	eb 22                	jmp    fa9 <morecore+0x56>$/;"	l
f86	grep.asm	/^     f86:	89 04 24             	mov    %eax,(%esp)$/;"	l
f86	sh.asm	/^     f86:	cd 40                	int    $0x40$/;"	l
f86	stressfs.asm	/^     f86:	89 e5                	mov    %esp,%ebp$/;"	l
f87	init.asm	/^ f87:	a1 80 12 00 00       	mov    0x1280,%eax$/;"	l
f87	wc.asm	/^     f87:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f88	cat.asm	/^ f88:	a3 88 12 00 00       	mov    %eax,0x1288$/;"	l
f88	cs550_user.asm	/^     f88:	eb 24                	jmp    fae <free+0x3d>$/;"	l
f88	sh.asm	/^     f88:	c3                   	ret    $/;"	l
f88	stressfs.asm	/^     f88:	83 ec 28             	sub    $0x28,%esp$/;"	l
f89	grep.asm	/^     f89:	e8 d8 fd ff ff       	call   d66 <putc>$/;"	l
f89	ls.asm	/^     f89:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
f89	sh.asm	/^     f89:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
f8a	cs550_user.asm	/^     f8a:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f8a	wc.asm	/^     f8a:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f8b	stressfs.asm	/^     f8b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f8c	init.asm	/^ f8c:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
f8d	cat.asm	/^ f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f8d	cs550_user.asm	/^     f8d:	8b 00                	mov    (%eax),%eax$/;"	l
f8d	ls.asm	/^     f8d:	eb 45                	jmp    fd4 <printf+0x193>$/;"	l
f8d	wc.asm	/^     f8d:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f8e	grep.asm	/^     f8e:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)$/;"	l
f8e	sh.asm	/^     f8e:	cd 40                	int    $0x40$/;"	l
f8e	stressfs.asm	/^     f8e:	83 c0 07             	add    $0x7,%eax$/;"	l
f8f	cs550_user.asm	/^     f8f:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
f8f	init.asm	/^ f8f:	75 1b                	jne    fac <malloc+0xcb>$/;"	l
f8f	ls.asm	/^     f8f:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
f9	init.asm	/^  f9:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)$/;"	l
f9	kill.asm	/^  f9:	5d                   	pop    %ebp$/;"	l
f9	mkdir.asm	/^  f9:	74 10                	je     10b <strcmp+0x27>$/;"	l
f9	rm.asm	/^  f9:	74 10                	je     10b <strcmp+0x27>$/;"	l
f90	cat.asm	/^ f90:	83 c0 08             	add    $0x8,%eax$/;"	l
f90	sh.asm	/^     f90:	c3                   	ret    $/;"	l
f90	wc.asm	/^     f90:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
f91	init.asm	/^ f91:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f91	sh.asm	/^     f91:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
f91	stressfs.asm	/^     f91:	c1 e8 03             	shr    $0x3,%eax$/;"	l
f92	cs550_user.asm	/^     f92:	77 12                	ja     fa6 <free+0x35>$/;"	l
f92	grep.asm	/^     f92:	eb 45                	jmp    fd9 <printf+0x193>$/;"	l
f93	cat.asm	/^ f93:	eb 38                	jmp    fcd <malloc+0xde>$/;"	l
f93	ls.asm	/^     f93:	75 17                	jne    fac <printf+0x16b>$/;"	l
f93	wc.asm	/^     f93:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
f94	cs550_user.asm	/^     f94:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
f94	grep.asm	/^     f94:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)$/;"	l
f94	init.asm	/^ f94:	89 04 24             	mov    %eax,(%esp)$/;"	l
f94	stressfs.asm	/^     f94:	83 c0 01             	add    $0x1,%eax$/;"	l
f95	cat.asm	/^ f95:	a1 88 12 00 00       	mov    0x1288,%eax$/;"	l
f95	ls.asm	/^     f95:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
f96	sh.asm	/^     f96:	cd 40                	int    $0x40$/;"	l
f96	wc.asm	/^     f96:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f97	cs550_user.asm	/^     f97:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
f97	init.asm	/^ f97:	e8 ed fe ff ff       	call   e89 <morecore>$/;"	l
f97	stressfs.asm	/^     f97:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
f98	grep.asm	/^     f98:	75 17                	jne    fb1 <printf+0x16b>$/;"	l
f98	ls.asm	/^     f98:	0f be c0             	movsbl %al,%eax$/;"	l
f98	sh.asm	/^     f98:	c3                   	ret    $/;"	l
f99	sh.asm	/^     f99:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
f99	wc.asm	/^     f99:	83 c0 08             	add    $0x8,%eax$/;"	l
f9a	cat.asm	/^ f9a:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
f9a	cs550_user.asm	/^     f9a:	77 24                	ja     fc0 <free+0x4f>$/;"	l
f9a	grep.asm	/^     f9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
f9a	stressfs.asm	/^     f9a:	a1 f0 12 00 00       	mov    0x12f0,%eax$/;"	l
f9b	ls.asm	/^     f9b:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f9c	cs550_user.asm	/^     f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f9c	init.asm	/^ f9c:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f9c	wc.asm	/^     f9c:	89 04 24             	mov    %eax,(%esp)$/;"	l
f9d	cat.asm	/^ f9d:	75 1b                	jne    fba <malloc+0xcb>$/;"	l
f9d	grep.asm	/^     f9d:	0f be c0             	movsbl %al,%eax$/;"	l
f9e	sh.asm	/^     f9e:	cd 40                	int    $0x40$/;"	l
f9f	cat.asm	/^ f9f:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f9f	cs550_user.asm	/^     f9f:	8b 00                	mov    (%eax),%eax$/;"	l
f9f	init.asm	/^ f9f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
f9f	ls.asm	/^     f9f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f9f	stressfs.asm	/^     f9f:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f9f	wc.asm	/^     f9f:	e8 ce fe ff ff       	call   e72 <free>$/;"	l
fa	cat.asm	/^  fa:	8b 44 24 18          	mov    0x18(%esp),%eax$/;"	l
fa	echo.asm	/^  fa:	29 c2                	sub    %eax,%edx$/;"	l
fa	kill.asm	/^  fa:	c3                   	ret    $/;"	l
fa	stressfs.asm	/^      fa:	8b 84 24 28 02 00 00 	mov    0x228(%esp),%eax$/;"	l
fa0	grep.asm	/^     fa0:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
fa0	sh.asm	/^     fa0:	c3                   	ret    $/;"	l
fa1	cs550_user.asm	/^     fa1:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
fa1	sh.asm	/^     fa1:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
fa2	cat.asm	/^ fa2:	89 04 24             	mov    %eax,(%esp)$/;"	l
fa2	ls.asm	/^     fa2:	89 04 24             	mov    %eax,(%esp)$/;"	l
fa2	stressfs.asm	/^     fa2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
fa3	init.asm	/^ fa3:	75 07                	jne    fac <malloc+0xcb>$/;"	l
fa4	cs550_user.asm	/^     fa4:	77 1a                	ja     fc0 <free+0x4f>$/;"	l
fa4	grep.asm	/^     fa4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fa4	wc.asm	/^     fa4:	a1 68 13 00 00       	mov    0x1368,%eax$/;"	l
fa5	cat.asm	/^ fa5:	e8 ed fe ff ff       	call   e97 <morecore>$/;"	l
fa5	init.asm	/^ fa5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fa5	ls.asm	/^     fa5:	e8 b7 fd ff ff       	call   d61 <putc>$/;"	l
fa6	cs550_user.asm	/^     fa6:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
fa6	sh.asm	/^     fa6:	cd 40                	int    $0x40$/;"	l
fa6	stressfs.asm	/^     fa6:	75 23                	jne    fcb <malloc+0x46>$/;"	l
fa7	grep.asm	/^     fa7:	89 04 24             	mov    %eax,(%esp)$/;"	l
fa8	sh.asm	/^     fa8:	c3                   	ret    $/;"	l
fa8	stressfs.asm	/^     fa8:	c7 45 f0 e8 12 00 00 	movl   $0x12e8,-0x10(%ebp)$/;"	l
fa9	cs550_user.asm	/^     fa9:	8b 00                	mov    (%eax),%eax$/;"	l
fa9	sh.asm	/^     fa9:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
fa9	wc.asm	/^     fa9:	c9                   	leave  $/;"	l
faa	cat.asm	/^ faa:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
faa	grep.asm	/^     faa:	e8 b7 fd ff ff       	call   d66 <putc>$/;"	l
faa	init.asm	/^ faa:	eb 13                	jmp    fbf <malloc+0xde>$/;"	l
faa	ls.asm	/^     faa:	eb 28                	jmp    fd4 <printf+0x193>$/;"	l
faa	wc.asm	/^     faa:	c3                   	ret    $/;"	l
fab	cs550_user.asm	/^     fab:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
fab	wc.asm	/^     fab:	55                   	push   %ebp$/;"	l
fac	init.asm	/^ fac:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fac	ls.asm	/^     fac:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
fac	wc.asm	/^     fac:	89 e5                	mov    %esp,%ebp$/;"	l
fad	cat.asm	/^ fad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
fae	cs550_user.asm	/^     fae:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
fae	sh.asm	/^     fae:	cd 40                	int    $0x40$/;"	l
fae	wc.asm	/^     fae:	83 ec 28             	sub    $0x28,%esp$/;"	l
faf	grep.asm	/^     faf:	eb 28                	jmp    fd9 <printf+0x193>$/;"	l
faf	init.asm	/^ faf:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
faf	stressfs.asm	/^     faf:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
fb	grep.asm	/^      fb:	e8 e0 04 00 00       	call   5e0 <read>$/;"	l
fb	kill.asm	/^  fb:	55                   	push   %ebp$/;"	l
fb	ln.asm	/^  fb:	0f b6 d0             	movzbl %al,%edx$/;"	l
fb	mkdir.asm	/^  fb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fb	rm.asm	/^  fb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fb	sh.asm	/^      fb:	89 04 24             	mov    %eax,(%esp)$/;"	l
fb0	sh.asm	/^     fb0:	c3                   	ret    $/;"	l
fb1	cat.asm	/^ fb1:	75 07                	jne    fba <malloc+0xcb>$/;"	l
fb1	cs550_user.asm	/^     fb1:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
fb1	grep.asm	/^     fb1:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)$/;"	l
fb1	sh.asm	/^     fb1:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
fb1	wc.asm	/^     fb1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fb2	init.asm	/^ fb2:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fb2	stressfs.asm	/^     fb2:	a3 f0 12 00 00       	mov    %eax,0x12f0$/;"	l
fb3	cat.asm	/^ fb3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fb3	ls.asm	/^     fb3:	00 $/;"	l
fb4	cs550_user.asm	/^     fb4:	76 d4                	jbe    f8a <free+0x19>$/;"	l
fb4	ls.asm	/^     fb4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fb4	wc.asm	/^     fb4:	83 c0 07             	add    $0x7,%eax$/;"	l
fb5	init.asm	/^ fb5:	8b 00                	mov    (%eax),%eax$/;"	l
fb6	cs550_user.asm	/^     fb6:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
fb6	sh.asm	/^     fb6:	cd 40                	int    $0x40$/;"	l
fb7	init.asm	/^ fb7:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
fb7	ls.asm	/^     fb7:	89 04 24             	mov    %eax,(%esp)$/;"	l
fb7	stressfs.asm	/^     fb7:	a1 f0 12 00 00       	mov    0x12f0,%eax$/;"	l
fb7	wc.asm	/^     fb7:	c1 e8 03             	shr    $0x3,%eax$/;"	l
fb8	cat.asm	/^ fb8:	eb 13                	jmp    fcd <malloc+0xde>$/;"	l
fb8	grep.asm	/^     fb8:	00 $/;"	l
fb8	sh.asm	/^     fb8:	c3                   	ret    $/;"	l
fb9	cs550_user.asm	/^     fb9:	8b 00                	mov    (%eax),%eax$/;"	l
fb9	grep.asm	/^     fb9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fb9	sh.asm	/^     fb9:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
fba	cat.asm	/^ fba:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fba	init.asm	/^ fba:	e9 70 ff ff ff       	jmp    f2f <malloc+0x4e>$/;"	l
fba	ls.asm	/^     fba:	e8 a2 fd ff ff       	call   d61 <putc>$/;"	l
fba	wc.asm	/^     fba:	83 c0 01             	add    $0x1,%eax$/;"	l
fbb	cs550_user.asm	/^     fbb:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
fbc	grep.asm	/^     fbc:	89 04 24             	mov    %eax,(%esp)$/;"	l
fbc	stressfs.asm	/^     fbc:	a3 e8 12 00 00       	mov    %eax,0x12e8$/;"	l
fbd	cat.asm	/^ fbd:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
fbd	wc.asm	/^     fbd:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
fbe	cs550_user.asm	/^     fbe:	76 ca                	jbe    f8a <free+0x19>$/;"	l
fbe	sh.asm	/^     fbe:	cd 40                	int    $0x40$/;"	l
fbf	grep.asm	/^     fbf:	e8 a2 fd ff ff       	call   d66 <putc>$/;"	l
fbf	init.asm	/^ fbf:	c9                   	leave  $/;"	l
fbf	ls.asm	/^     fbf:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
fc	echo.asm	/^  fc:	89 d0                	mov    %edx,%eax$/;"	l
fc	kill.asm	/^  fc:	89 e5                	mov    %esp,%ebp$/;"	l
fc	wc.asm	/^      fc:	e8 be 0b 00 00       	call   cbf <printf>$/;"	l
fc0	cat.asm	/^ fc0:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fc0	cs550_user.asm	/^     fc0:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
fc0	init.asm	/^ fc0:	c3                   	ret    $/;"	l
fc0	sh.asm	/^     fc0:	c3                   	ret    $/;"	l
fc0	wc.asm	/^     fc0:	a1 68 13 00 00       	mov    0x1368,%eax$/;"	l
fc1	sh.asm	/^     fc1:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
fc1	stressfs.asm	/^     fc1:	c7 05 ec 12 00 00 00 	movl   $0x0,0x12ec$/;"	l
fc2	ls.asm	/^     fc2:	0f be c0             	movsbl %al,%eax$/;"	l
fc3	cat.asm	/^ fc3:	8b 00                	mov    (%eax),%eax$/;"	l
fc3	cs550_user.asm	/^     fc3:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
fc4	grep.asm	/^     fc4:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
fc5	cat.asm	/^ fc5:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
fc5	ls.asm	/^     fc5:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
fc5	wc.asm	/^     fc5:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
fc6	cs550_user.asm	/^     fc6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
fc6	sh.asm	/^     fc6:	cd 40                	int    $0x40$/;"	l
fc7	grep.asm	/^     fc7:	0f be c0             	movsbl %al,%eax$/;"	l
fc8	cat.asm	/^ fc8:	e9 70 ff ff ff       	jmp    f3d <malloc+0x4e>$/;"	l
fc8	sh.asm	/^     fc8:	c3                   	ret    $/;"	l
fc8	stressfs.asm	/^     fc8:	00 00 00 $/;"	l
fc8	wc.asm	/^     fc8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
fc9	ls.asm	/^     fc9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fc9	sh.asm	/^     fc9:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
fca	grep.asm	/^     fca:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
fcb	stressfs.asm	/^     fcb:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
fcc	ls.asm	/^     fcc:	89 04 24             	mov    %eax,(%esp)$/;"	l
fcc	wc.asm	/^     fcc:	75 23                	jne    ff1 <malloc+0x46>$/;"	l
fcd	cat.asm	/^ fcd:	c9                   	leave  $/;"	l
fcd	cs550_user.asm	/^     fcd:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
fce	cat.asm	/^ fce:	c3                   	ret    $/;"	l
fce	grep.asm	/^     fce:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fce	sh.asm	/^     fce:	cd 40                	int    $0x40$/;"	l
fce	stressfs.asm	/^     fce:	8b 00                	mov    (%eax),%eax$/;"	l
fce	wc.asm	/^     fce:	c7 45 f0 60 13 00 00 	movl   $0x1360,-0x10(%ebp)$/;"	l
fcf	ls.asm	/^     fcf:	e8 8d fd ff ff       	call   d61 <putc>$/;"	l
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	cs550_user.asm	/^      fd:	c9                   	leave  $/;"	l
fd	cs550_user.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fd0	cs550_user.asm	/^     fd0:	01 c2                	add    %eax,%edx$/;"	l
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd0	sh.asm	/^     fd0:	c3                   	ret    $/;"	l
fd0	stressfs.asm	/^     fd0:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
fd1	grep.asm	/^     fd1:	89 04 24             	mov    %eax,(%esp)$/;"	l
fd1	sh.asm	/^     fd1:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
fd2	cs550_user.asm	/^     fd2:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
fd3	stressfs.asm	/^     fd3:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fd4	grep.asm	/^     fd4:	e8 8d fd ff ff       	call   d66 <putc>$/;"	l
fd4	ls.asm	/^     fd4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
fd5	cs550_user.asm	/^     fd5:	8b 00                	mov    (%eax),%eax$/;"	l
fd5	wc.asm	/^     fd5:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
fd6	sh.asm	/^     fd6:	cd 40                	int    $0x40$/;"	l
fd6	stressfs.asm	/^     fd6:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
fd7	cs550_user.asm	/^     fd7:	39 c2                	cmp    %eax,%edx$/;"	l
fd8	sh.asm	/^     fd8:	c3                   	ret    $/;"	l
fd8	wc.asm	/^     fd8:	a3 68 13 00 00       	mov    %eax,0x1368$/;"	l
fd9	cs550_user.asm	/^     fd9:	75 24                	jne    fff <free+0x8e>$/;"	l
fd9	grep.asm	/^     fd9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
fd9	sh.asm	/^     fd9:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
fd9	stressfs.asm	/^     fd9:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fdalloc	sysfile.s	/^fdalloc:$/;"	l
fdb	cs550_user.asm	/^     fdb:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
fdb	ls.asm	/^     fdb:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
fdc	stressfs.asm	/^     fdc:	72 4d                	jb     102b <malloc+0xa6>$/;"	l
fdd	wc.asm	/^     fdd:	a1 68 13 00 00       	mov    0x1368,%eax$/;"	l
fde	cs550_user.asm	/^     fde:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
fde	sh.asm	/^     fde:	cd 40                	int    $0x40$/;"	l
fde	stressfs.asm	/^     fde:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fdf	ls.asm	/^     fdf:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
fe	cat.asm	/^  fe:	89 04 24             	mov    %eax,(%esp)$/;"	l
fe	cs550_user.asm	/^      fe:	c3                   	ret    $/;"	l
fe	echo.asm	/^  fe:	5d                   	pop    %ebp$/;"	l
fe	forktest.asm	/^  fe:	e8 fd fe ff ff       	call   0 <printf>$/;"	l
fe	init.asm	/^  fe:	78 0a                	js     10a <main+0x10a>$/;"	l
fe	kill.asm	/^  fe:	83 ec 10             	sub    $0x10,%esp$/;"	l
fe	ln.asm	/^  fe:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
fe	ls.asm	/^      fe:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
fe	mkdir.asm	/^  fe:	0f b6 10             	movzbl (%eax),%edx$/;"	l
fe	rm.asm	/^  fe:	0f b6 10             	movzbl (%eax),%edx$/;"	l
fe	sh.asm	/^      fe:	e8 fd fe ff ff       	call   0 <runcmd>$/;"	l
fe0	grep.asm	/^     fe0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
fe0	sh.asm	/^     fe0:	c3                   	ret    $/;"	l
fe1	cs550_user.asm	/^     fe1:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
fe1	sh.asm	/^     fe1:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
fe1	stressfs.asm	/^     fe1:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
fe2	ls.asm	/^     fe2:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
fe2	wc.asm	/^     fe2:	a3 60 13 00 00       	mov    %eax,0x1360$/;"	l
fe4	cs550_user.asm	/^     fe4:	8b 00                	mov    (%eax),%eax$/;"	l
fe4	grep.asm	/^     fe4:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
fe4	stressfs.asm	/^     fe4:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
fe5	ls.asm	/^     fe5:	01 d0                	add    %edx,%eax$/;"	l
fe6	cs550_user.asm	/^     fe6:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
fe6	sh.asm	/^     fe6:	cd 40                	int    $0x40$/;"	l
fe7	grep.asm	/^     fe7:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
fe7	ls.asm	/^     fe7:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fe7	stressfs.asm	/^     fe7:	75 0c                	jne    ff5 <malloc+0x70>$/;"	l
fe7	wc.asm	/^     fe7:	c7 05 64 13 00 00 00 	movl   $0x0,0x1364$/;"	l
fe8	sh.asm	/^     fe8:	c3                   	ret    $/;"	l
fe9	cs550_user.asm	/^     fe9:	01 c2                	add    %eax,%edx$/;"	l
fe9	sh.asm	/^     fe9:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
fe9	stressfs.asm	/^     fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fea	grep.asm	/^     fea:	01 d0                	add    %edx,%eax$/;"	l
fea	ls.asm	/^     fea:	84 c0                	test   %al,%al$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
feb	cs550_user.asm	/^     feb:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
fec	grep.asm	/^     fec:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fec	ls.asm	/^     fec:	0f 85 71 fe ff ff    	jne    e63 <printf+0x22>$/;"	l
fec	stressfs.asm	/^     fec:	8b 10                	mov    (%eax),%edx$/;"	l
fee	cs550_user.asm	/^     fee:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
fee	sh.asm	/^     fee:	cd 40                	int    $0x40$/;"	l
fee	stressfs.asm	/^     fee:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
fee	wc.asm	/^     fee:	00 00 00 $/;"	l
fef	grep.asm	/^     fef:	84 c0                	test   %al,%al$/;"	l
fetchint	syscall.c	/^fetchint(uint addr, int *ip)$/;"	f
fetchint	syscall.s	/^fetchint:$/;"	l
fetchstr	syscall.c	/^fetchstr(uint addr, char **pp)$/;"	f
fetchstr	syscall.s	/^fetchstr:$/;"	l
ff	cs550_user.asm	/^      ff:	55                   	push   %ebp$/;"	l
ff	echo.asm	/^  ff:	c3                   	ret    $/;"	l
ff	kernel.asm	/^  ff = *f;$/;"	d
ff0	sh.asm	/^     ff0:	c3                   	ret    $/;"	l
ff1	cs550_user.asm	/^     ff1:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ff1	grep.asm	/^     ff1:	0f 85 71 fe ff ff    	jne    e68 <printf+0x22>$/;"	l
ff1	sh.asm	/^     ff1:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
ff1	stressfs.asm	/^     ff1:	89 10                	mov    %edx,(%eax)$/;"	l
ff1	wc.asm	/^     ff1:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ff2	ls.asm	/^     ff2:	c9                   	leave  $/;"	l
ff3	ls.asm	/^     ff3:	c3                   	ret    $/;"	l
ff3	stressfs.asm	/^     ff3:	eb 26                	jmp    101b <malloc+0x96>$/;"	l
ff4	cs550_user.asm	/^     ff4:	8b 00                	mov    (%eax),%eax$/;"	l
ff4	ls.asm	/^     ff4:	55                   	push   %ebp$/;"	l
ff4	wc.asm	/^     ff4:	8b 00                	mov    (%eax),%eax$/;"	l
ff5	ls.asm	/^     ff5:	89 e5                	mov    %esp,%ebp$/;"	l
ff5	stressfs.asm	/^     ff5:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ff6	cs550_user.asm	/^     ff6:	8b 10                	mov    (%eax),%edx$/;"	l
ff6	sh.asm	/^     ff6:	cd 40                	int    $0x40$/;"	l
ff6	wc.asm	/^     ff6:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ff7	grep.asm	/^     ff7:	c9                   	leave  $/;"	l
ff7	ls.asm	/^     ff7:	83 ec 10             	sub    $0x10,%esp$/;"	l
ff8	cs550_user.asm	/^     ff8:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ff8	grep.asm	/^     ff8:	c3                   	ret    $/;"	l
ff8	sh.asm	/^     ff8:	c3                   	ret    $/;"	l
ff8	stressfs.asm	/^     ff8:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ff9	grep.asm	/^     ff9:	55                   	push   %ebp$/;"	l
ff9	sh.asm	/^     ff9:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
ff9	wc.asm	/^     ff9:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ffa	grep.asm	/^     ffa:	89 e5                	mov    %esp,%ebp$/;"	l
ffa	ls.asm	/^     ffa:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ffb	cs550_user.asm	/^     ffb:	89 10                	mov    %edx,(%eax)$/;"	l
ffb	stressfs.asm	/^     ffb:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
ffc	grep.asm	/^     ffc:	83 ec 10             	sub    $0x10,%esp$/;"	l
ffc	wc.asm	/^     ffc:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ffd	cs550_user.asm	/^     ffd:	eb 0a                	jmp    1009 <free+0x98>$/;"	l
ffd	ls.asm	/^     ffd:	83 e8 08             	sub    $0x8,%eax$/;"	l
ffe	sh.asm	/^     ffe:	cd 40                	int    $0x40$/;"	l
ffe	stressfs.asm	/^     ffe:	89 c2                	mov    %eax,%edx$/;"	l
fff	cs550_user.asm	/^     fff:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
fff	grep.asm	/^     fff:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fff	wc.asm	/^     fff:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon8	typeref:struct:__anon8::file	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	file.c	/^filealloc(void)$/;"	f
filealloc	file.s	/^filealloc:$/;"	l
fileclose	file.c	/^fileclose(struct file *f)$/;"	f
fileclose	file.s	/^fileclose:$/;"	l
filedup	file.c	/^filedup(struct file *f)$/;"	f
filedup	file.s	/^filedup:$/;"	l
fileinit	file.c	/^fileinit(void)$/;"	f
fileinit	file.s	/^fileinit:$/;"	l
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
fileread	file.s	/^fileread:$/;"	l
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filestat	file.s	/^filestat:$/;"	l
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
filewrite	file.s	/^filewrite:$/;"	l
fill_rtcdate	lapic.c	/^static void fill_rtcdate(struct rtcdate *r)$/;"	f	file:
fill_rtcdate	lapic.s	/^fill_rtcdate:$/;"	l
first	kernel.asm	/^    first = 0;$/;"	d
flags	buf.h	/^  int flags;$/;"	m	struct:buf
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr
flags	file.h	/^  int flags;          \/\/ I_BUSY, I_VALID$/;"	m	struct:inode
flags	kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	ls.c	/^fmtname(char *path)$/;"	f
fmtname	ls.s	/^fmtname:$/;"	l
fork	proc.c	/^fork(void)$/;"	f
fork	proc.s	/^fork:$/;"	l
fork1	sh.c	/^fork1(void)$/;"	f
fork1	sh.s	/^fork1:$/;"	l
forkret	proc.c	/^forkret(void)$/;"	f
forkret	proc.s	/^forkret:$/;"	l
forktest	forktest.c	/^forktest(void)$/;"	f
forktest	forktest.s	/^forktest:$/;"	l
forktest	usertests.c	/^forktest(void)$/;"	f
found	kernel.asm	/^found:$/;"	l
fourfiles	usertests.c	/^fourfiles(void)$/;"	f
fourteen	usertests.c	/^fourteen(void)$/;"	f
free	umalloc.c	/^free(void *ap)$/;"	f
free	umalloc.s	/^free:$/;"	l
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon7	typeref:struct:__anon7::run	file:
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	cs550_user.asm	/^      freep = prevp;$/;"	d
freep	cs550_user.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	stressfs.asm	/^      freep = prevp;$/;"	d
freep	stressfs.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f
freerange	kalloc.s	/^freerange:$/;"	l
freevm	vm.c	/^freevm(pde_t *pgdir)$/;"	f
freevm	vm.s	/^freevm:$/;"	l
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe
fsfd	mkfs.c	/^int fsfd;$/;"	v
fsfull	usertests.c	/^fsfull()$/;"	f
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anon8
func_ht_call1	cs550_syscall.c	/^int func_ht_call1(void){$/;"	f
func_ht_call1	cs550_syscall.s	/^func_ht_call1:$/;"	l
func_ht_call10	cs550_syscall.c	/^int func_ht_call10(void){$/;"	f
func_ht_call10	cs550_syscall.s	/^func_ht_call10:$/;"	l
func_ht_call11	cs550_syscall.c	/^int func_ht_call11(void){$/;"	f
func_ht_call11	cs550_syscall.s	/^func_ht_call11:$/;"	l
func_ht_call12	cs550_syscall.c	/^int func_ht_call12(void){$/;"	f
func_ht_call12	cs550_syscall.s	/^func_ht_call12:$/;"	l
func_ht_call13	cs550_syscall.c	/^int func_ht_call13(void){$/;"	f
func_ht_call13	cs550_syscall.s	/^func_ht_call13:$/;"	l
func_ht_call14	cs550_syscall.c	/^int func_ht_call14(void){$/;"	f
func_ht_call14	cs550_syscall.s	/^func_ht_call14:$/;"	l
func_ht_call15	cs550_syscall.c	/^int func_ht_call15(void){$/;"	f
func_ht_call15	cs550_syscall.s	/^func_ht_call15:$/;"	l
func_ht_call16	cs550_syscall.c	/^int func_ht_call16(void){$/;"	f
func_ht_call16	cs550_syscall.s	/^func_ht_call16:$/;"	l
func_ht_call17	cs550_syscall.c	/^int func_ht_call17(void){$/;"	f
func_ht_call17	cs550_syscall.s	/^func_ht_call17:$/;"	l
func_ht_call18	cs550_syscall.c	/^int func_ht_call18(void){$/;"	f
func_ht_call18	cs550_syscall.s	/^func_ht_call18:$/;"	l
func_ht_call19	cs550_syscall.c	/^int func_ht_call19(void){$/;"	f
func_ht_call19	cs550_syscall.s	/^func_ht_call19:$/;"	l
func_ht_call2	cs550_syscall.c	/^int func_ht_call2(void){$/;"	f
func_ht_call2	cs550_syscall.s	/^func_ht_call2:$/;"	l
func_ht_call20	cs550_syscall.c	/^int func_ht_call20(void){$/;"	f
func_ht_call20	cs550_syscall.s	/^func_ht_call20:$/;"	l
func_ht_call21	cs550_syscall.c	/^int func_ht_call21(void){$/;"	f
func_ht_call21	cs550_syscall.s	/^func_ht_call21:$/;"	l
func_ht_call22	cs550_syscall.c	/^int func_ht_call22(void){$/;"	f
func_ht_call22	cs550_syscall.s	/^func_ht_call22:$/;"	l
func_ht_call23	cs550_syscall.c	/^int func_ht_call23(void){$/;"	f
func_ht_call23	cs550_syscall.s	/^func_ht_call23:$/;"	l
func_ht_call24	cs550_syscall.c	/^int func_ht_call24(void){$/;"	f
func_ht_call24	cs550_syscall.s	/^func_ht_call24:$/;"	l
func_ht_call25	cs550_syscall.c	/^int func_ht_call25(void){$/;"	f
func_ht_call25	cs550_syscall.s	/^func_ht_call25:$/;"	l
func_ht_call26	cs550_syscall.c	/^int func_ht_call26(void){$/;"	f
func_ht_call26	cs550_syscall.s	/^func_ht_call26:$/;"	l
func_ht_call27	cs550_syscall.c	/^int func_ht_call27(void){$/;"	f
func_ht_call27	cs550_syscall.s	/^func_ht_call27:$/;"	l
func_ht_call28	cs550_syscall.c	/^int func_ht_call28(void){$/;"	f
func_ht_call28	cs550_syscall.s	/^func_ht_call28:$/;"	l
func_ht_call29	cs550_syscall.c	/^int func_ht_call29(void){$/;"	f
func_ht_call29	cs550_syscall.s	/^func_ht_call29:$/;"	l
func_ht_call3	cs550_syscall.c	/^int func_ht_call3(void){$/;"	f
func_ht_call3	cs550_syscall.s	/^func_ht_call3:$/;"	l
func_ht_call30	cs550_syscall.c	/^int func_ht_call30(void){$/;"	f
func_ht_call30	cs550_syscall.s	/^func_ht_call30:$/;"	l
func_ht_call31	cs550_syscall.c	/^int func_ht_call31(void){$/;"	f
func_ht_call31	cs550_syscall.s	/^func_ht_call31:$/;"	l
func_ht_call32	cs550_syscall.c	/^int func_ht_call32(void){$/;"	f
func_ht_call32	cs550_syscall.s	/^func_ht_call32:$/;"	l
func_ht_call33	cs550_syscall.c	/^int func_ht_call33(void){$/;"	f
func_ht_call33	cs550_syscall.s	/^func_ht_call33:$/;"	l
func_ht_call34	cs550_syscall.c	/^int func_ht_call34(void){$/;"	f
func_ht_call34	cs550_syscall.s	/^func_ht_call34:$/;"	l
func_ht_call35	cs550_syscall.c	/^int func_ht_call35(void){$/;"	f
func_ht_call35	cs550_syscall.s	/^func_ht_call35:$/;"	l
func_ht_call36	cs550_syscall.c	/^int func_ht_call36(void){$/;"	f
func_ht_call36	cs550_syscall.s	/^func_ht_call36:$/;"	l
func_ht_call37	cs550_syscall.c	/^int func_ht_call37(void){$/;"	f
func_ht_call37	cs550_syscall.s	/^func_ht_call37:$/;"	l
func_ht_call38	cs550_syscall.c	/^int func_ht_call38(void){$/;"	f
func_ht_call38	cs550_syscall.s	/^func_ht_call38:$/;"	l
func_ht_call39	cs550_syscall.c	/^int func_ht_call39(void){$/;"	f
func_ht_call39	cs550_syscall.s	/^func_ht_call39:$/;"	l
func_ht_call4	cs550_syscall.c	/^int func_ht_call4(void){$/;"	f
func_ht_call4	cs550_syscall.s	/^func_ht_call4:$/;"	l
func_ht_call40	cs550_syscall.c	/^int func_ht_call40(void){$/;"	f
func_ht_call40	cs550_syscall.s	/^func_ht_call40:$/;"	l
func_ht_call41	cs550_syscall.c	/^int func_ht_call41(void){$/;"	f
func_ht_call41	cs550_syscall.s	/^func_ht_call41:$/;"	l
func_ht_call42	cs550_syscall.c	/^int func_ht_call42(void){$/;"	f
func_ht_call42	cs550_syscall.s	/^func_ht_call42:$/;"	l
func_ht_call43	cs550_syscall.c	/^int func_ht_call43(void){$/;"	f
func_ht_call43	cs550_syscall.s	/^func_ht_call43:$/;"	l
func_ht_call44	cs550_syscall.c	/^int func_ht_call44(void){$/;"	f
func_ht_call44	cs550_syscall.s	/^func_ht_call44:$/;"	l
func_ht_call45	cs550_syscall.c	/^int func_ht_call45(void){$/;"	f
func_ht_call45	cs550_syscall.s	/^func_ht_call45:$/;"	l
func_ht_call46	cs550_syscall.c	/^int func_ht_call46(void){$/;"	f
func_ht_call46	cs550_syscall.s	/^func_ht_call46:$/;"	l
func_ht_call47	cs550_syscall.c	/^int func_ht_call47(void){$/;"	f
func_ht_call47	cs550_syscall.s	/^func_ht_call47:$/;"	l
func_ht_call48	cs550_syscall.c	/^int func_ht_call48(void){$/;"	f
func_ht_call48	cs550_syscall.s	/^func_ht_call48:$/;"	l
func_ht_call49	cs550_syscall.c	/^int func_ht_call49(void){$/;"	f
func_ht_call49	cs550_syscall.s	/^func_ht_call49:$/;"	l
func_ht_call5	cs550_syscall.c	/^int func_ht_call5(void){$/;"	f
func_ht_call5	cs550_syscall.s	/^func_ht_call5:$/;"	l
func_ht_call50	cs550_syscall.c	/^int func_ht_call50(void){$/;"	f
func_ht_call50	cs550_syscall.s	/^func_ht_call50:$/;"	l
func_ht_call6	cs550_syscall.c	/^int func_ht_call6(void){$/;"	f
func_ht_call6	cs550_syscall.s	/^func_ht_call6:$/;"	l
func_ht_call7	cs550_syscall.c	/^int func_ht_call7(void){$/;"	f
func_ht_call7	cs550_syscall.s	/^func_ht_call7:$/;"	l
func_ht_call8	cs550_syscall.c	/^int func_ht_call8(void){$/;"	f
func_ht_call8	cs550_syscall.s	/^func_ht_call8:$/;"	l
func_ht_call9	cs550_syscall.c	/^int func_ht_call9(void){$/;"	f
func_ht_call9	cs550_syscall.s	/^func_ht_call9:$/;"	l
func_ls_call1	cs550_syscall.c	/^int func_ls_call1(void){$/;"	f
func_ls_call1	cs550_syscall.s	/^func_ls_call1:$/;"	l
func_ls_call10	cs550_syscall.c	/^int func_ls_call10(void){$/;"	f
func_ls_call10	cs550_syscall.s	/^func_ls_call10:$/;"	l
func_ls_call11	cs550_syscall.c	/^int func_ls_call11(void){$/;"	f
func_ls_call11	cs550_syscall.s	/^func_ls_call11:$/;"	l
func_ls_call12	cs550_syscall.c	/^int func_ls_call12(void){$/;"	f
func_ls_call12	cs550_syscall.s	/^func_ls_call12:$/;"	l
func_ls_call13	cs550_syscall.c	/^int func_ls_call13(void){$/;"	f
func_ls_call13	cs550_syscall.s	/^func_ls_call13:$/;"	l
func_ls_call14	cs550_syscall.c	/^int func_ls_call14(void){$/;"	f
func_ls_call14	cs550_syscall.s	/^func_ls_call14:$/;"	l
func_ls_call15	cs550_syscall.c	/^int func_ls_call15(void){$/;"	f
func_ls_call15	cs550_syscall.s	/^func_ls_call15:$/;"	l
func_ls_call16	cs550_syscall.c	/^int func_ls_call16(void){$/;"	f
func_ls_call16	cs550_syscall.s	/^func_ls_call16:$/;"	l
func_ls_call17	cs550_syscall.c	/^int func_ls_call17(void){$/;"	f
func_ls_call17	cs550_syscall.s	/^func_ls_call17:$/;"	l
func_ls_call18	cs550_syscall.c	/^int func_ls_call18(void){$/;"	f
func_ls_call18	cs550_syscall.s	/^func_ls_call18:$/;"	l
func_ls_call19	cs550_syscall.c	/^int func_ls_call19(void){$/;"	f
func_ls_call19	cs550_syscall.s	/^func_ls_call19:$/;"	l
func_ls_call2	cs550_syscall.c	/^int func_ls_call2(void){$/;"	f
func_ls_call2	cs550_syscall.s	/^func_ls_call2:$/;"	l
func_ls_call20	cs550_syscall.c	/^int func_ls_call20(void){$/;"	f
func_ls_call20	cs550_syscall.s	/^func_ls_call20:$/;"	l
func_ls_call21	cs550_syscall.c	/^int func_ls_call21(void){$/;"	f
func_ls_call21	cs550_syscall.s	/^func_ls_call21:$/;"	l
func_ls_call22	cs550_syscall.c	/^int func_ls_call22(void){$/;"	f
func_ls_call22	cs550_syscall.s	/^func_ls_call22:$/;"	l
func_ls_call23	cs550_syscall.c	/^int func_ls_call23(void){$/;"	f
func_ls_call23	cs550_syscall.s	/^func_ls_call23:$/;"	l
func_ls_call24	cs550_syscall.c	/^int func_ls_call24(void){$/;"	f
func_ls_call24	cs550_syscall.s	/^func_ls_call24:$/;"	l
func_ls_call25	cs550_syscall.c	/^int func_ls_call25(void){$/;"	f
func_ls_call25	cs550_syscall.s	/^func_ls_call25:$/;"	l
func_ls_call26	cs550_syscall.c	/^int func_ls_call26(void){$/;"	f
func_ls_call26	cs550_syscall.s	/^func_ls_call26:$/;"	l
func_ls_call27	cs550_syscall.c	/^int func_ls_call27(void){$/;"	f
func_ls_call27	cs550_syscall.s	/^func_ls_call27:$/;"	l
func_ls_call28	cs550_syscall.c	/^int func_ls_call28(void){$/;"	f
func_ls_call28	cs550_syscall.s	/^func_ls_call28:$/;"	l
func_ls_call29	cs550_syscall.c	/^int func_ls_call29(void){$/;"	f
func_ls_call29	cs550_syscall.s	/^func_ls_call29:$/;"	l
func_ls_call3	cs550_syscall.c	/^int func_ls_call3(void){$/;"	f
func_ls_call3	cs550_syscall.s	/^func_ls_call3:$/;"	l
func_ls_call30	cs550_syscall.c	/^int func_ls_call30(void){$/;"	f
func_ls_call30	cs550_syscall.s	/^func_ls_call30:$/;"	l
func_ls_call31	cs550_syscall.c	/^int func_ls_call31(void){$/;"	f
func_ls_call31	cs550_syscall.s	/^func_ls_call31:$/;"	l
func_ls_call32	cs550_syscall.c	/^int func_ls_call32(void){$/;"	f
func_ls_call32	cs550_syscall.s	/^func_ls_call32:$/;"	l
func_ls_call33	cs550_syscall.c	/^int func_ls_call33(void){$/;"	f
func_ls_call33	cs550_syscall.s	/^func_ls_call33:$/;"	l
func_ls_call34	cs550_syscall.c	/^int func_ls_call34(void){$/;"	f
func_ls_call34	cs550_syscall.s	/^func_ls_call34:$/;"	l
func_ls_call35	cs550_syscall.c	/^int func_ls_call35(void){$/;"	f
func_ls_call35	cs550_syscall.s	/^func_ls_call35:$/;"	l
func_ls_call36	cs550_syscall.c	/^int func_ls_call36(void){$/;"	f
func_ls_call36	cs550_syscall.s	/^func_ls_call36:$/;"	l
func_ls_call37	cs550_syscall.c	/^int func_ls_call37(void){$/;"	f
func_ls_call37	cs550_syscall.s	/^func_ls_call37:$/;"	l
func_ls_call38	cs550_syscall.c	/^int func_ls_call38(void){$/;"	f
func_ls_call38	cs550_syscall.s	/^func_ls_call38:$/;"	l
func_ls_call39	cs550_syscall.c	/^int func_ls_call39(void){$/;"	f
func_ls_call39	cs550_syscall.s	/^func_ls_call39:$/;"	l
func_ls_call4	cs550_syscall.c	/^int func_ls_call4(void){$/;"	f
func_ls_call4	cs550_syscall.s	/^func_ls_call4:$/;"	l
func_ls_call40	cs550_syscall.c	/^int func_ls_call40(void){$/;"	f
func_ls_call40	cs550_syscall.s	/^func_ls_call40:$/;"	l
func_ls_call41	cs550_syscall.c	/^int func_ls_call41(void){$/;"	f
func_ls_call41	cs550_syscall.s	/^func_ls_call41:$/;"	l
func_ls_call42	cs550_syscall.c	/^int func_ls_call42(void){$/;"	f
func_ls_call42	cs550_syscall.s	/^func_ls_call42:$/;"	l
func_ls_call43	cs550_syscall.c	/^int func_ls_call43(void){$/;"	f
func_ls_call43	cs550_syscall.s	/^func_ls_call43:$/;"	l
func_ls_call44	cs550_syscall.c	/^int func_ls_call44(void){$/;"	f
func_ls_call44	cs550_syscall.s	/^func_ls_call44:$/;"	l
func_ls_call45	cs550_syscall.c	/^int func_ls_call45(void){$/;"	f
func_ls_call45	cs550_syscall.s	/^func_ls_call45:$/;"	l
func_ls_call46	cs550_syscall.c	/^int func_ls_call46(void){$/;"	f
func_ls_call46	cs550_syscall.s	/^func_ls_call46:$/;"	l
func_ls_call47	cs550_syscall.c	/^int func_ls_call47(void){$/;"	f
func_ls_call47	cs550_syscall.s	/^func_ls_call47:$/;"	l
func_ls_call48	cs550_syscall.c	/^int func_ls_call48(void){$/;"	f
func_ls_call48	cs550_syscall.s	/^func_ls_call48:$/;"	l
func_ls_call49	cs550_syscall.c	/^int func_ls_call49(void){$/;"	f
func_ls_call49	cs550_syscall.s	/^func_ls_call49:$/;"	l
func_ls_call5	cs550_syscall.c	/^int func_ls_call5(void){$/;"	f
func_ls_call5	cs550_syscall.s	/^func_ls_call5:$/;"	l
func_ls_call50	cs550_syscall.c	/^int func_ls_call50(void){$/;"	f
func_ls_call50	cs550_syscall.s	/^func_ls_call50:$/;"	l
func_ls_call6	cs550_syscall.c	/^int func_ls_call6(void){$/;"	f
func_ls_call6	cs550_syscall.s	/^func_ls_call6:$/;"	l
func_ls_call7	cs550_syscall.c	/^int func_ls_call7(void){$/;"	f
func_ls_call7	cs550_syscall.s	/^func_ls_call7:$/;"	l
func_ls_call8	cs550_syscall.c	/^int func_ls_call8(void){$/;"	f
func_ls_call8	cs550_syscall.s	/^func_ls_call8:$/;"	l
func_ls_call9	cs550_syscall.c	/^int func_ls_call9(void){$/;"	f
func_ls_call9	cs550_syscall.s	/^func_ls_call9:$/;"	l
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdt	vm.c	/^struct segdesc gdt[NSEGS];$/;"	v	typeref:struct:segdesc
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
getHashKey	cs550_syscall.c	/^int getHashKey(char *str){$/;"	f
getHashKey	cs550_syscall.s	/^getHashKey:$/;"	l
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f
getcallerpcs	spinlock.s	/^getcallerpcs:$/;"	l
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
getcmd	sh.s	/^getcmd:$/;"	l
gets	ulib.c	/^gets(char *buf, int max)$/;"	f
gets	ulib.s	/^gets:$/;"	l
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
gettoken	sh.s	/^gettoken:$/;"	l
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f
grep	grep.s	/^grep:$/;"	l
growproc	proc.c	/^growproc(int n)$/;"	f
growproc	proc.s	/^growproc:$/;"	l
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe
halt	proc.s	/^halt:$/;"	l
halt	x86.h	/^halt()$/;"	f
hash	cs550_syscall.c	/^int hash(char *str){$/;"	f
hash	cs550_syscall.s	/^hash:$/;"	l
hash_Key	cs550_syscall.c	/^static char* hash_Key [1000];$/;"	v	file:
havedisk1	ide.c	/^static int havedisk1;$/;"	v	file:
havedisk1	kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f
holding	spinlock.s	/^holding:$/;"	l
hour	date.h	/^  uint hour;$/;"	m	struct:rtcdate
hp	cat.asm	/^  hp = (Header*)p;$/;"	d
hp	cs550_user.asm	/^  hp = (Header*)p;$/;"	d
hp	echo.asm	/^  hp = (Header*)p;$/;"	d
hp	grep.asm	/^  hp = (Header*)p;$/;"	d
hp	init.asm	/^  hp = (Header*)p;$/;"	d
hp	kill.asm	/^  hp = (Header*)p;$/;"	d
hp	ln.asm	/^  hp = (Header*)p;$/;"	d
hp	ls.asm	/^  hp = (Header*)p;$/;"	d
hp	mkdir.asm	/^  hp = (Header*)p;$/;"	d
hp	rm.asm	/^  hp = (Header*)p;$/;"	d
hp	sh.asm	/^  hp = (Header*)p;$/;"	d
hp	stressfs.asm	/^  hp = (Header*)p;$/;"	d
hp	wc.asm	/^  hp = (Header*)p;$/;"	d
hp	zombie.asm	/^  hp = (Header*)p;$/;"	d
ht_call01	cs550_user.c	/^void ht_call01() {$/;"	f
ht_call01	cs550_user.s	/^ht_call01:$/;"	l
ht_init	cs550_syscall.c	/^void ht_init(){$/;"	f
ht_init	cs550_syscall.s	/^ht_init:$/;"	l
ht_insert	cs550_syscall.c	/^void ht_insert(char *p, int (* func )(void)){$/;"	f
ht_insert	cs550_syscall.s	/^ht_insert:$/;"	l
ht_syscall	cs550_syscall.c	/^ht_syscall(void)$/;"	f
ht_syscall	cs550_syscall.s	/^ht_syscall:$/;"	l
ht_syscalls	cs550_syscall.c	/^static int (*ht_syscalls[1000])(void);$/;"	v	file:
i	cat.asm	/^  i = 0;$/;"	d
i	cs550_user.asm	/^  i = 0;$/;"	d
i	cs550_user.asm	/^  i = ht_call1();$/;"	d
i	cs550_user.asm	/^  i = ls_call1();$/;"	d
i	cs550_user.asm	/^  i = ls_call2();$/;"	d
i	cs550_user.asm	/^  i = ls_call3();$/;"	d
i	cs550_user.asm	/^  i = ls_call4();$/;"	d
i	cs550_user.asm	/^  i = ls_call5();$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kernel.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	stressfs.asm	/^  i = 0;$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	fs.s	/^ialloc:$/;"	l
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon2
id	kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
id	proc.h	/^  uchar id;                    \/\/ Local APIC ID; index into cpus[] below$/;"	m	struct:cpu
ideinit	ide.c	/^ideinit(void)$/;"	f
ideinit	ide.s	/^ideinit:$/;"	l
ideinit	memide.c	/^ideinit(void)$/;"	f
ideintr	ide.c	/^ideintr(void)$/;"	f
ideintr	ide.s	/^ideintr:$/;"	l
ideintr	memide.c	/^ideintr(void)$/;"	f
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	ide.c	/^iderw(struct buf *b)$/;"	f
iderw	ide.s	/^iderw:$/;"	l
iderw	memide.c	/^iderw(struct buf *b)$/;"	f
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	file:
idestart	ide.s	/^idestart:$/;"	l
idewait	ide.c	/^idewait(int checkerr)$/;"	f	file:
idewait	ide.s	/^idewait:$/;"	l
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc
idtinit	trap.c	/^idtinit(void)$/;"	f
idtinit	trap.s	/^idtinit:$/;"	l
idup	fs.c	/^idup(struct inode *ip)$/;"	f
idup	fs.s	/^idup:$/;"	l
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
iget	fs.s	/^iget:$/;"	l
iinit	fs.c	/^iinit(int dev)$/;"	f
iinit	fs.s	/^iinit:$/;"	l
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f
ilock	fs.s	/^ilock:$/;"	l
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	console.s	/^inb:$/;"	l
inb	ide.s	/^inb:$/;"	l
inb	kbd.s	/^inb:$/;"	l
inb	lapic.s	/^inb:$/;"	l
inb	mp.s	/^inb:$/;"	l
inb	uart.s	/^inb:$/;"	l
inb	x86.h	/^inb(ushort port)$/;"	f
init	initcode.S	/^init:$/;"	l
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initlock	spinlock.s	/^initlock:$/;"	l
initlog	log.c	/^initlog(int dev)$/;"	f
initlog	log.s	/^initlog:$/;"	l
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f
inituvm	vm.s	/^inituvm:$/;"	l
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon2	typeref:struct:__anon2::inode	file:
inodestart	fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock
input	console.c	/^} input;$/;"	v	typeref:struct:__anon6
insl	ide.s	/^insl:$/;"	l
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
install_trans	log.c	/^install_trans(void)$/;"	f	file:
install_trans	log.s	/^install_trans:$/;"	l
int	cat.asm	/^int$/;"	l
int	cs550_user.asm	/^int$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	grep.asm	/^int match(char*, char*);$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchhere(char*, char*);$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int, char*, char*);$/;"	l
int	grep.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int (* ls_call(char *ptr)) () {$/;"	l
int	kernel.asm	/^int Default(void){$/;"	l
int	kernel.asm	/^int func_ht_call1(void){$/;"	l
int	kernel.asm	/^int func_ht_call10(void){$/;"	l
int	kernel.asm	/^int func_ht_call11(void){$/;"	l
int	kernel.asm	/^int func_ht_call12(void){$/;"	l
int	kernel.asm	/^int func_ht_call13(void){$/;"	l
int	kernel.asm	/^int func_ht_call14(void){$/;"	l
int	kernel.asm	/^int func_ht_call15(void){$/;"	l
int	kernel.asm	/^int func_ht_call16(void){$/;"	l
int	kernel.asm	/^int func_ht_call17(void){$/;"	l
int	kernel.asm	/^int func_ht_call18(void){$/;"	l
int	kernel.asm	/^int func_ht_call19(void){$/;"	l
int	kernel.asm	/^int func_ht_call2(void){$/;"	l
int	kernel.asm	/^int func_ht_call20(void){$/;"	l
int	kernel.asm	/^int func_ht_call21(void){$/;"	l
int	kernel.asm	/^int func_ht_call22(void){$/;"	l
int	kernel.asm	/^int func_ht_call23(void){$/;"	l
int	kernel.asm	/^int func_ht_call24(void){$/;"	l
int	kernel.asm	/^int func_ht_call25(void){$/;"	l
int	kernel.asm	/^int func_ht_call26(void){$/;"	l
int	kernel.asm	/^int func_ht_call27(void){$/;"	l
int	kernel.asm	/^int func_ht_call28(void){$/;"	l
int	kernel.asm	/^int func_ht_call29(void){$/;"	l
int	kernel.asm	/^int func_ht_call3(void){$/;"	l
int	kernel.asm	/^int func_ht_call30(void){$/;"	l
int	kernel.asm	/^int func_ht_call31(void){$/;"	l
int	kernel.asm	/^int func_ht_call32(void){$/;"	l
int	kernel.asm	/^int func_ht_call33(void){$/;"	l
int	kernel.asm	/^int func_ht_call34(void){$/;"	l
int	kernel.asm	/^int func_ht_call35(void){$/;"	l
int	kernel.asm	/^int func_ht_call36(void){$/;"	l
int	kernel.asm	/^int func_ht_call37(void){$/;"	l
int	kernel.asm	/^int func_ht_call38(void){$/;"	l
int	kernel.asm	/^int func_ht_call39(void){$/;"	l
int	kernel.asm	/^int func_ht_call4(void){$/;"	l
int	kernel.asm	/^int func_ht_call40(void){$/;"	l
int	kernel.asm	/^int func_ht_call41(void){$/;"	l
int	kernel.asm	/^int func_ht_call42(void){$/;"	l
int	kernel.asm	/^int func_ht_call43(void){$/;"	l
int	kernel.asm	/^int func_ht_call44(void){$/;"	l
int	kernel.asm	/^int func_ht_call45(void){$/;"	l
int	kernel.asm	/^int func_ht_call46(void){$/;"	l
int	kernel.asm	/^int func_ht_call47(void){$/;"	l
int	kernel.asm	/^int func_ht_call48(void){$/;"	l
int	kernel.asm	/^int func_ht_call49(void){$/;"	l
int	kernel.asm	/^int func_ht_call5(void){$/;"	l
int	kernel.asm	/^int func_ht_call50(void){$/;"	l
int	kernel.asm	/^int func_ht_call6(void){$/;"	l
int	kernel.asm	/^int func_ht_call7(void){$/;"	l
int	kernel.asm	/^int func_ht_call8(void){$/;"	l
int	kernel.asm	/^int func_ht_call9(void){$/;"	l
int	kernel.asm	/^int func_ls_call1(void){$/;"	l
int	kernel.asm	/^int func_ls_call10(void){$/;"	l
int	kernel.asm	/^int func_ls_call11(void){$/;"	l
int	kernel.asm	/^int func_ls_call12(void){$/;"	l
int	kernel.asm	/^int func_ls_call13(void){$/;"	l
int	kernel.asm	/^int func_ls_call14(void){$/;"	l
int	kernel.asm	/^int func_ls_call15(void){$/;"	l
int	kernel.asm	/^int func_ls_call16(void){$/;"	l
int	kernel.asm	/^int func_ls_call17(void){$/;"	l
int	kernel.asm	/^int func_ls_call18(void){$/;"	l
int	kernel.asm	/^int func_ls_call19(void){$/;"	l
int	kernel.asm	/^int func_ls_call2(void){$/;"	l
int	kernel.asm	/^int func_ls_call20(void){$/;"	l
int	kernel.asm	/^int func_ls_call21(void){$/;"	l
int	kernel.asm	/^int func_ls_call22(void){$/;"	l
int	kernel.asm	/^int func_ls_call23(void){$/;"	l
int	kernel.asm	/^int func_ls_call24(void){$/;"	l
int	kernel.asm	/^int func_ls_call25(void){$/;"	l
int	kernel.asm	/^int func_ls_call26(void){$/;"	l
int	kernel.asm	/^int func_ls_call27(void){$/;"	l
int	kernel.asm	/^int func_ls_call28(void){$/;"	l
int	kernel.asm	/^int func_ls_call29(void){$/;"	l
int	kernel.asm	/^int func_ls_call3(void){$/;"	l
int	kernel.asm	/^int func_ls_call30(void){$/;"	l
int	kernel.asm	/^int func_ls_call31(void){$/;"	l
int	kernel.asm	/^int func_ls_call32(void){$/;"	l
int	kernel.asm	/^int func_ls_call33(void){$/;"	l
int	kernel.asm	/^int func_ls_call34(void){$/;"	l
int	kernel.asm	/^int func_ls_call35(void){$/;"	l
int	kernel.asm	/^int func_ls_call36(void){$/;"	l
int	kernel.asm	/^int func_ls_call37(void){$/;"	l
int	kernel.asm	/^int func_ls_call38(void){$/;"	l
int	kernel.asm	/^int func_ls_call39(void){$/;"	l
int	kernel.asm	/^int func_ls_call4(void){$/;"	l
int	kernel.asm	/^int func_ls_call40(void){$/;"	l
int	kernel.asm	/^int func_ls_call41(void){$/;"	l
int	kernel.asm	/^int func_ls_call42(void){$/;"	l
int	kernel.asm	/^int func_ls_call43(void){$/;"	l
int	kernel.asm	/^int func_ls_call44(void){$/;"	l
int	kernel.asm	/^int func_ls_call45(void){$/;"	l
int	kernel.asm	/^int func_ls_call46(void){$/;"	l
int	kernel.asm	/^int func_ls_call47(void){$/;"	l
int	kernel.asm	/^int func_ls_call48(void){$/;"	l
int	kernel.asm	/^int func_ls_call49(void){$/;"	l
int	kernel.asm	/^int func_ls_call5(void){$/;"	l
int	kernel.asm	/^int func_ls_call50(void){$/;"	l
int	kernel.asm	/^int func_ls_call6(void){$/;"	l
int	kernel.asm	/^int func_ls_call7(void){$/;"	l
int	kernel.asm	/^int func_ls_call8(void){$/;"	l
int	kernel.asm	/^int func_ls_call9(void){$/;"	l
int	kernel.asm	/^int getHashKey(char *str){$/;"	l
int	kernel.asm	/^int hash(char *str);$/;"	l
int	kernel.asm	/^int hash(char *str){$/;"	l
int	kernel.asm	/^int ncpu;$/;"	l
int	kernel.asm	/^int rehash(char *str, int mul){$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	stressfs.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = cpu->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent
inum	kernel.asm	/^      inum = de.inum;$/;"	d
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	kernel.asm	/^      ioapic = (struct mpioapic*)p;$/;"	d
ioapic	kernel.asm	/^  ioapic = (volatile struct ioapic*)IOAPIC;$/;"	d
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicenable	ioapic.s	/^ioapicenable:$/;"	l
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	kernel.asm	/^    ioapicid = 0;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f
ioapicinit	ioapic.s	/^ioapicinit:$/;"	l
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicread	ioapic.s	/^ioapicread:$/;"	l
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
ioapicwrite	ioapic.s	/^ioapicwrite:$/;"	l
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	kernel.asm	/^    ip = idup(proc->cwd);$/;"	d
ip	kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	kernel.asm	/^    ip = next;$/;"	d
ip	kernel.asm	/^  ip = 0;$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f
iput	fs.s	/^iput:$/;"	l
iputtest	usertests.c	/^iputtest(void)$/;"	f
iref	usertests.c	/^iref(void)$/;"	f
irqmask	kernel.asm	/^  irqmask = mask;$/;"	d
irqmask	picirq.c	/^static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);$/;"	v	file:
irqmask	picirq.s	/^irqmask:$/;"	l
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
isdirempty	sysfile.s	/^isdirempty:$/;"	l
ismp	kernel.asm	/^        ismp = 0;$/;"	d
ismp	kernel.asm	/^      ismp = 0;$/;"	d
ismp	kernel.asm	/^  ismp = 1;$/;"	d
ismp	mp.c	/^int ismp;$/;"	v
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
itrunc	fs.s	/^itrunc:$/;"	l
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlock	fs.s	/^iunlock:$/;"	l
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f
iunlockput	fs.s	/^iunlockput:$/;"	l
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f
iupdate	fs.s	/^iupdate:$/;"	l
kalloc	kalloc.c	/^kalloc(void)$/;"	f
kalloc	kalloc.s	/^kalloc:$/;"	l
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f
kbdgetc	kbd.s	/^kbdgetc:$/;"	l
kbdintr	kbd.c	/^kbdintr(void)$/;"	f
kbdintr	kbd.s	/^kbdintr:$/;"	l
kernel	kernel.asm	/^kernel:     file format elf32-i386$/;"	l
key	cs550_syscall.c	/^    char *key;$/;"	m	struct:myMap	file:
key	kernel.asm	/^                key = rehash(str, i);$/;"	d
kfree	kalloc.c	/^kfree(char *v)$/;"	f
kfree	kalloc.s	/^kfree:$/;"	l
kill	proc.c	/^kill(int pid)$/;"	f
kill	proc.s	/^kill:$/;"	l
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f
kinit1	kalloc.s	/^kinit1:$/;"	l
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f
kinit2	kalloc.s	/^kinit2:$/;"	l
kmap	vm.c	/^static struct kmap {$/;"	s	file:
kmap	vm.c	/^} kmap[] = {$/;"	v	typeref:struct:kmap	file:
kmap	vm.s	/^kmap:$/;"	l
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon7
kpgdir	kernel.asm	/^  kpgdir = setupkvm();$/;"	d
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f
kvmalloc	vm.s	/^kvmalloc:$/;"	l
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^    lapic = 0;$/;"	d
lapic	kernel.asm	/^  lapic = (uint*)conf->lapicaddr;$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f
lapiceoi	lapic.s	/^lapiceoi:$/;"	l
lapicinit	lapic.c	/^lapicinit(void)$/;"	f
lapicinit	lapic.s	/^lapicinit:$/;"	l
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicstartap	lapic.s	/^lapicstartap:$/;"	l
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	file:
lapicw	lapic.s	/^lapicw:$/;"	l
last	kernel.asm	/^      last = s+1;$/;"	d
last	kernel.asm	/^  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);$/;"	d
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
lcr3	vm.s	/^lcr3:$/;"	l
lcr3	x86.h	/^lcr3(uint val) $/;"	f
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	kernel.asm	/^  len = path - s;$/;"	d
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lgdt	vm.s	/^lgdt:$/;"	l
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
lidt	trap.s	/^lidt:$/;"	l
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	usertests.c	/^linktest(void)$/;"	f
linkunlink	usertests.c	/^linkunlink()$/;"	f
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
listcmd	sh.s	/^listcmd:$/;"	l
loadgs	vm.s	/^loadgs:$/;"	l
loadgs	x86.h	/^loadgs(ushort v)$/;"	f
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f
loaduvm	vm.s	/^loaduvm:$/;"	l
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon5	typeref:struct:__anon5::spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anon8	typeref:struct:__anon8::spinlock	file:
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon9	typeref:struct:__anon9::spinlock	file:
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	console.c	/^  int locking;$/;"	m	struct:__anon5	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f
log_write	log.s	/^log_write:$/;"	l
logheader	log.c	/^struct logheader {$/;"	s	file:
logstart	fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock
loop	kernel.asm	/^ loop:$/;"	l
ls	ls.c	/^ls(char *path)$/;"	f
ls	ls.s	/^ls:$/;"	l
ls_call	cs550_syscall.c	/^int (* ls_call(char *ptr)) () {$/;"	f
ls_call	cs550_syscall.s	/^ls_call:$/;"	l
ls_call01	cs550_user.c	/^void ls_call01() {$/;"	f
ls_call01	cs550_user.s	/^ls_call01:$/;"	l
ls_call02	cs550_user.c	/^void ls_call02() {$/;"	f
ls_call02	cs550_user.s	/^ls_call02:$/;"	l
ls_call03	cs550_user.c	/^void ls_call03() {$/;"	f
ls_call03	cs550_user.s	/^ls_call03:$/;"	l
ls_call04	cs550_user.c	/^void ls_call04() {$/;"	f
ls_call04	cs550_user.s	/^ls_call04:$/;"	l
ls_call05	cs550_user.c	/^void ls_call05() {$/;"	f
ls_call05	cs550_user.s	/^ls_call05:$/;"	l
ls_init	cs550_syscall.c	/^void ls_init(void){$/;"	f
ls_init	cs550_syscall.s	/^ls_init:$/;"	l
ls_insert	cs550_syscall.c	/^void ls_insert(char *k, int (* val)(void)){$/;"	f
ls_insert	cs550_syscall.s	/^ls_insert:$/;"	l
ls_syscall	cs550_syscall.c	/^ls_syscall(void)$/;"	f
ls_syscall	cs550_syscall.s	/^ls_syscall:$/;"	l
ls_syscallss	cs550_syscall.c	/^static myType ls_syscallss[50];\/* = {$/;"	v	file:
ltr	vm.s	/^ltr:$/;"	l
ltr	x86.h	/^ltr(ushort sel)$/;"	f
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	cat.c	/^main(int argc, char *argv[])$/;"	f
main	cat.s	/^main:$/;"	l
main	cs550_user.c	/^main(int argc, char *argv[])$/;"	f
main	cs550_user.s	/^main:$/;"	l
main	echo.c	/^main(int argc, char *argv[])$/;"	f
main	echo.s	/^main:$/;"	l
main	forktest.c	/^main(void)$/;"	f
main	forktest.s	/^main:$/;"	l
main	grep.c	/^main(int argc, char *argv[])$/;"	f
main	grep.s	/^main:$/;"	l
main	init.c	/^main(void)$/;"	f
main	init.s	/^main:$/;"	l
main	kill.c	/^main(int argc, char **argv)$/;"	f
main	kill.s	/^main:$/;"	l
main	ln.c	/^main(int argc, char *argv[])$/;"	f
main	ln.s	/^main:$/;"	l
main	ls.c	/^main(int argc, char *argv[])$/;"	f
main	ls.s	/^main:$/;"	l
main	main.c	/^main(void)$/;"	f
main	main.s	/^main:$/;"	l
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	mkdir.s	/^main:$/;"	l
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	rm.c	/^main(int argc, char *argv[])$/;"	f
main	rm.s	/^main:$/;"	l
main	sh.c	/^main(void)$/;"	f
main	sh.s	/^main:$/;"	l
main	stressfs.c	/^main(int argc, char *argv[])$/;"	f
main	stressfs.s	/^main:$/;"	l
main	usertests.c	/^main(int argc, char *argv[])$/;"	f
main	wc.c	/^main(int argc, char *argv[])$/;"	f
main	wc.s	/^main:$/;"	l
main	zombie.c	/^main(void)$/;"	f
main	zombie.s	/^main:$/;"	l
major	file.h	/^  short major;$/;"	m	struct:inode
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f
malloc	umalloc.s	/^malloc:$/;"	l
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	file:
mappages	vm.s	/^mappages:$/;"	l
match	grep.c	/^match(char *re, char *text)$/;"	f
match	grep.s	/^match:$/;"	l
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchhere	grep.s	/^matchhere:$/;"	l
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
matchstar	grep.s	/^matchstar:$/;"	l
maxintr	kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mem	kernel.asm	/^    mem = kalloc();$/;"	d
mem	kernel.asm	/^  mem = kalloc();$/;"	d
mem	usertests.c	/^mem(void)$/;"	f
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcmp	string.s	/^memcmp:$/;"	l
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memcpy	string.s	/^memcpy:$/;"	l
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	string.s	/^memmove:$/;"	l
memmove	ulib.c	/^memmove(void *vdst, void *vsrc, int n)$/;"	f
memmove	ulib.s	/^memmove:$/;"	l
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	string.s	/^memset:$/;"	l
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	ulib.s	/^memset:$/;"	l
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr
microdelay	lapic.c	/^microdelay(int us)$/;"	f
microdelay	lapic.s	/^microdelay:$/;"	l
min	fs.c	23;"	d	file:
min	mkfs.c	253;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minute	date.h	/^  uint minute;$/;"	m	struct:rtcdate
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
month	date.h	/^  uint month;$/;"	m	struct:rtcdate
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:
morecore	umalloc.s	/^morecore:$/;"	l
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpbcpu	mp.c	/^mpbcpu(void)$/;"	f
mpbcpu	mp.s	/^mpbcpu:$/;"	l
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpconfig	mp.s	/^mpconfig:$/;"	l
mpenter	main.c	/^mpenter(void)$/;"	f	file:
mpenter	main.s	/^mpenter:$/;"	l
mpinit	mp.c	/^mpinit(void)$/;"	f
mpinit	mp.s	/^mpinit:$/;"	l
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	file:
mpmain	main.s	/^mpmain:$/;"	l
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch	mp.s	/^mpsearch:$/;"	l
mpsearch1	mp.c	/^mpsearch1(uint a, int len)$/;"	f	file:
mpsearch1	mp.s	/^mpsearch1:$/;"	l
multiboot_header	entry.S	/^multiboot_header:$/;"	l
myMap	cs550_syscall.c	/^typedef struct myMap {$/;"	s	file:
myType	cs550_syscall.c	/^} myType;$/;"	t	typeref:struct:myMap	file:
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	cs550_user.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cs550_user.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^      n = PGSIZE;$/;"	d
n	kernel.asm	/^      n = len;$/;"	d
n	kernel.asm	/^      n = sz - i;$/;"	d
n	kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	kernel.asm	/^    n = ip->size - off;$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	log.c	/^  int n;   $/;"	m	struct:logheader	file:
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	stressfs.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
n1	kernel.asm	/^        n1 = max;$/;"	d
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	usertests.c	/^char name[3];$/;"	v
name	usys.S	/^  name: \\$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namecmp	fs.s	/^namecmp:$/;"	l
namei	fs.c	/^namei(char *path)$/;"	f
namei	fs.s	/^namei:$/;"	l
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f
nameiparent	fs.s	/^nameiparent:$/;"	l
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
namex	fs.s	/^namex:$/;"	l
nbitmap	mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	kernel.asm	/^    ncpu = 1;$/;"	d
ncpu	mp.c	/^int ncpu;$/;"	v
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	cs550_user.asm	/^    neg = 1;$/;"	d
neg	cs550_user.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	stressfs.asm	/^    neg = 1;$/;"	d
neg	stressfs.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v
nextpid	proc.s	/^nextpid:$/;"	l
ninodeblocks	mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
nlink	file.h	/^  short nlink;$/;"	m	struct:inode
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	mkfs.c	/^int nlog = LOGSIZE;  $/;"	v
nmeta	mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
normalmap	kbd.s	/^normalmap:$/;"	l
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nu	cat.asm	/^    nu = 4096;$/;"	d
nu	cs550_user.asm	/^    nu = 4096;$/;"	d
nu	echo.asm	/^    nu = 4096;$/;"	d
nu	grep.asm	/^    nu = 4096;$/;"	d
nu	init.asm	/^    nu = 4096;$/;"	d
nu	kill.asm	/^    nu = 4096;$/;"	d
nu	ln.asm	/^    nu = 4096;$/;"	d
nu	ls.asm	/^    nu = 4096;$/;"	d
nu	mkdir.asm	/^    nu = 4096;$/;"	d
nu	rm.asm	/^    nu = 4096;$/;"	d
nu	sh.asm	/^    nu = 4096;$/;"	d
nu	stressfs.asm	/^    nu = 4096;$/;"	d
nu	wc.asm	/^    nu = 4096;$/;"	d
nu	zombie.asm	/^    nu = 4096;$/;"	d
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
nulterminate	sh.s	/^nulterminate:$/;"	l
num	kernel.asm	/^  num = proc->tf->eax;$/;"	d
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	cs550_user.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	stressfs.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe
off	elf.h	/^  uint off;$/;"	m	struct:proghdr
off	file.h	/^  uint off;$/;"	m	struct:file
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
offset	bootblock.asm	/^  offset = (offset \/ SECTSIZE) + 1;$/;"	d
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
oldpgdir	kernel.asm	/^  oldpgdir = proc->pgdir;$/;"	d
openiputtest	usertests.c	/^openiputtest(void)$/;"	f
opentest	usertests.c	/^opentest(void)$/;"	f
os	cat.asm	/^  os = s;$/;"	d
os	cs550_user.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	stressfs.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
outb	console.s	/^outb:$/;"	l
outb	ide.s	/^outb:$/;"	l
outb	lapic.s	/^outb:$/;"	l
outb	mp.s	/^outb:$/;"	l
outb	picirq.s	/^outb:$/;"	l
outb	timer.s	/^outb:$/;"	l
outb	uart.s	/^outb:$/;"	l
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	ide.s	/^outsl:$/;"	l
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	file:
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	cs550_user.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)PGROUNDUP((uint)vstart);$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	stressfs.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p2v	main.s	/^p2v:$/;"	l
p2v	memlayout.h	/^static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }$/;"	f
p2v	mp.s	/^p2v:$/;"	l
p2v	vm.s	/^p2v:$/;"	l
pa	bootblock.asm	/^    pa = (uchar*)ph->paddr;$/;"	d
pa	kernel.asm	/^      pa = PTE_ADDR(*pte);$/;"	d
pa	kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
paddr	elf.h	/^  uint paddr;$/;"	m	struct:proghdr
panic	console.c	/^panic(char *s)$/;"	f
panic	console.s	/^panic:$/;"	l
panic	sh.c	/^panic(char *s)$/;"	f
panic	sh.s	/^panic:$/;"	l
panicked	console.c	/^static int panicked = 0;$/;"	v	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f
parseblock	sh.s	/^parseblock:$/;"	l
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f
parsecmd	sh.s	/^parsecmd:$/;"	l
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseexec	sh.s	/^parseexec:$/;"	l
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f
parseline	sh.s	/^parseline:$/;"	l
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parsepipe	sh.s	/^parsepipe:$/;"	l
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
parseredirs	sh.s	/^parseredirs:$/;"	l
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcmd	sh.asm	/^    pcmd = (struct pipecmd*)cmd;$/;"	d
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
pde	kernel.asm	/^  pde = &pgdir[PDX(va)];$/;"	d
pde_t	kernel.asm	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	l
pde_t	types.h	/^typedef uint pde_t;$/;"	t
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
peek	sh.s	/^peek:$/;"	l
perm	vm.c	/^  int perm;$/;"	m	struct:kmap	file:
pgdir	kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
pgtab	kernel.asm	/^    pgtab = (pte_t*)p2v(PTE_ADDR(*pde));$/;"	d
ph	bootblock.asm	/^  ph = (struct proghdr*)((uchar*)elf + elf->phoff);$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr
phys_end	vm.c	/^  uint phys_end;$/;"	m	struct:kmap	file:
phys_start	vm.c	/^  uint phys_start;$/;"	m	struct:kmap	file:
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp
picenable	picirq.c	/^picenable(int irq)$/;"	f
picenable	picirq.s	/^picenable:$/;"	l
picinit	picirq.c	/^picinit(void)$/;"	f
picinit	picirq.s	/^picinit:$/;"	l
picsetmask	picirq.c	/^picsetmask(ushort mask)$/;"	f	file:
picsetmask	picirq.s	/^picsetmask:$/;"	l
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc
pid	sh.asm	/^  pid = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f
pinit	proc.s	/^pinit:$/;"	l
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipealloc	pipe.s	/^pipealloc:$/;"	l
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipeclose	pipe.s	/^pipeclose:$/;"	l
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
pipecmd	sh.s	/^pipecmd:$/;"	l
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
piperead	pipe.s	/^piperead:$/;"	l
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	pipe.s	/^pipewrite:$/;"	l
popcli	spinlock.c	/^popcli(void)$/;"	f
popcli	spinlock.s	/^popcli:$/;"	l
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
printHash	cs550_syscall.c	/^void printHash(){$/;"	f
printHash	cs550_syscall.s	/^printHash:$/;"	l
printf	forktest.c	/^printf(int fd, char *s, ...)$/;"	f
printf	forktest.s	/^printf:$/;"	l
printf	printf.c	/^printf(int fd, char *fmt, ...)$/;"	f
printf	printf.s	/^printf:$/;"	l
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	file:
printint	console.s	/^printint:$/;"	l
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
printint	printf.s	/^printint:$/;"	l
proc	kernel.asm	/^      proc = (struct mpproc*)p;$/;"	d
proc	kernel.asm	/^      proc = 0;$/;"	d
proc	kernel.asm	/^      proc = p;$/;"	d
proc	kernel.asm	/^  proc = 0;$/;"	d
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon9	typeref:struct:__anon9::proc	file:
proc	proc.h	/^  struct proc *proc;           \/\/ The currently-running process.$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	proc.h	/^struct proc {$/;"	s
procdump	proc.c	/^procdump(void)$/;"	f
procdump	proc.s	/^procdump:$/;"	l
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon9
pte	kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	mmu.h	/^typedef uint pte_t;$/;"	t
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon3	typeref:union:header::__anon3::header	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f
pushcli	spinlock.s	/^pushcli:$/;"	l
putc	printf.c	/^putc(int fd, char c)$/;"	f	file:
putc	printf.s	/^putc:$/;"	l
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon6	file:
r	cs550_user.asm	/^  r = fstat(fd, st);$/;"	d
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kernel.asm	/^  r = (struct run*)v;$/;"	d
r	kernel.asm	/^  r = kmem.freelist;$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
ran	kernel.asm	/^      ran = 1;$/;"	d
rand	usertests.c	/^rand()$/;"	f
randstate	usertests.c	/^unsigned long randstate = 1;$/;"	v
rcmd	sh.asm	/^    rcmd = (struct redircmd*)cmd;$/;"	d
rcr2	trap.s	/^rcr2:$/;"	l
rcr2	x86.h	/^rcr2(void)$/;"	f
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
read_head	log.c	/^read_head(void)$/;"	f	file:
read_head	log.s	/^read_head:$/;"	l
readable	file.h	/^  char readable;$/;"	m	struct:file
readeflags	lapic.s	/^readeflags:$/;"	l
readeflags	proc.s	/^readeflags:$/;"	l
readeflags	spinlock.s	/^readeflags:$/;"	l
readeflags	x86.h	/^readeflags(void)$/;"	f
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readi	fs.s	/^readi:$/;"	l
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f
readsb	fs.s	/^readsb:$/;"	l
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	file:
recover_from_log	log.s	/^recover_from_log:$/;"	l
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
redircmd	sh.s	/^redircmd:$/;"	l
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
rehash	cs550_syscall.c	/^int rehash(char *str, int mul){$/;"	f
rehash	cs550_syscall.s	/^rehash:$/;"	l
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f
release	spinlock.s	/^release:$/;"	l
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
return	kernel.asm	/^  return d;$/;"	d
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rmdot	usertests.c	/^rmdot(void)$/;"	f
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
rtcdate	date.h	/^struct rtcdate {$/;"	s
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f
runcmd	sh.s	/^runcmd:$/;"	l
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = (char*)*ap;$/;"	d
s	cs550_user.asm	/^          s = "(null)";$/;"	d
s	cs550_user.asm	/^        s = (char*)*ap;$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = (char*)*ap;$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = (char*)*ap;$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = (char*)*ap;$/;"	d
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = (char*)*ap;$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = (char*)*ap;$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = (char*)*ap;$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = (char*)*ap;$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	stressfs.asm	/^          s = "(null)";$/;"	d
s	stressfs.asm	/^        s = (char*)*ap;$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon3	file:
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = (char*)*ap;$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = (char*)*ap;$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
safestrcpy	string.s	/^safestrcpy:$/;"	l
sb	fs.c	/^struct superblock sb;   \/\/ there should be one per dev, but we run with one dev$/;"	v	typeref:struct:superblock
sb	kernel.asm	/^  sb = cmos_read(CMOS_STATB);$/;"	d
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	usertests.c	/^sbrktest(void)$/;"	f
sched	proc.c	/^sched(void)$/;"	f
sched	proc.s	/^sched:$/;"	l
scheduler	proc.c	/^scheduler(void)$/;"	f
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
scheduler	proc.s	/^scheduler:$/;"	l
second	date.h	/^  uint second;$/;"	m	struct:rtcdate
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f
seginit	vm.s	/^seginit:$/;"	l
setupkvm	vm.c	/^setupkvm(void)$/;"	f
setupkvm	vm.s	/^setupkvm:$/;"	l
sharedfd	usertests.c	/^sharedfd(void)$/;"	f
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftcode	kbd.s	/^shiftcode:$/;"	l
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shiftmap	kbd.s	/^shiftmap:$/;"	l
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	file.h	/^  uint size;$/;"	m	struct:inode
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	log.c	/^  int size;$/;"	m	struct:log	file:
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anon3	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
skipelem	fs.s	/^skipelem:$/;"	l
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sleep	proc.s	/^sleep:$/;"	l
sp	kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	bootasm.S	/^spin:$/;"	l
spin	bootblock.asm	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spin	entryother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	cat.asm	/^  src = vsrc;$/;"	d
src	cs550_user.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	stressfs.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc();$/;"	d
start	bootasm.S	/^start:$/;"	l
start	bootblock.asm	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	entryother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	file:
start32	bootasm.S	/^start32:$/;"	l
start32	bootblock.asm	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
start32	entryother.asm	/^start32:$/;"	l
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
startothers	main.c	/^startothers(void)$/;"	f	file:
startothers	main.s	/^startothers:$/;"	l
stat	mkfs.c	8;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(char *n, struct stat *st)$/;"	f
stat	ulib.s	/^stat:$/;"	l
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	cs550_user.asm	/^        state = '%';$/;"	d
state	cs550_user.asm	/^      state = 0;$/;"	d
state	cs550_user.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	stressfs.asm	/^        state = '%';$/;"	d
state	stressfs.asm	/^      state = 0;$/;"	d
state	stressfs.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
stati	fs.s	/^stati:$/;"	l
static	bootblock.asm	/^static inline uchar$/;"	l
static	bootblock.asm	/^static inline void$/;"	l
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static Header*$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	cs550_user.asm	/^static Header *freep;$/;"	l
static	cs550_user.asm	/^static Header base;$/;"	l
static	cs550_user.asm	/^static Header*$/;"	l
static	cs550_user.asm	/^static inline void$/;"	l
static	cs550_user.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static Header*$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static Header*$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static Header*$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^static char* hash_Key [1000];$/;"	l
static	kernel.asm	/^static char*$/;"	l
static	kernel.asm	/^static inline uchar$/;"	l
static	kernel.asm	/^static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int uart;    \/\/ is there a uart?$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static pte_t *$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct mpconf*$/;"	t
static	kernel.asm	/^static struct proc*$/;"	t
static	kernel.asm	/^static uchar$/;"	l
static	kernel.asm	/^static uint cmos_read(uint reg)$/;"	l
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	l
static	kernel.asm	/^static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);$/;"	l
static	kernel.asm	/^static void $/;"	l
static	kernel.asm	/^static void commit();$/;"	l
static	kernel.asm	/^static void fill_rtcdate(struct rtcdate *r)$/;"	l
static	kernel.asm	/^static void idestart(struct buf*);$/;"	l
static	kernel.asm	/^static void recover_from_log(void);$/;"	l
static	kernel.asm	/^static void wakeup1(void *chan);$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static Header*$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static Header*$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static Header*$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static Header*$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static Header*$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static Header*$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	stressfs.asm	/^static Header *freep;$/;"	l
static	stressfs.asm	/^static Header base;$/;"	l
static	stressfs.asm	/^static Header*$/;"	l
static	stressfs.asm	/^static inline void$/;"	l
static	stressfs.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static Header*$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static Header*$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
static_assert	mkfs.c	15;"	d	file:
stdout	usertests.c	/^int stdout = 1;$/;"	v
sti	proc.s	/^sti:$/;"	l
sti	spinlock.s	/^sti:$/;"	l
sti	x86.h	/^sti(void)$/;"	f
stosb	string.s	/^stosb:$/;"	l
stosb	ulib.s	/^stosb:$/;"	l
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
stosl	string.s	/^stosl:$/;"	l
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f
strchr	ulib.s	/^strchr:$/;"	l
strcmp	cs550_syscall.c	/^strcmp(const char *p, const char *q)$/;"	f
strcmp	cs550_syscall.s	/^strcmp:$/;"	l
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcmp	ulib.s	/^strcmp:$/;"	l
strcpy	ulib.c	/^strcpy(char *s, char *t)$/;"	f
strcpy	ulib.s	/^strcpy:$/;"	l
strlen	string.c	/^strlen(const char *s)$/;"	f
strlen	string.s	/^strlen:$/;"	l
strlen	ulib.c	/^strlen(char *s)$/;"	f
strlen	ulib.s	/^strlen:$/;"	l
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncmp	string.s	/^strncmp:$/;"	l
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
strncpy	string.s	/^strncpy:$/;"	l
struct	kernel.asm	/^  struct proc *np;$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
sum	mp.s	/^sum:$/;"	l
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f
switchkvm	vm.s	/^switchkvm:$/;"	l
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f
switchuvm	vm.s	/^switchuvm:$/;"	l
swtch	kernel.asm	/^swtch:$/;"	l
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v
symbols	sh.s	/^symbols:$/;"	l
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f
sys_chdir	sysfile.s	/^sys_chdir:$/;"	l
sys_close	sysfile.c	/^sys_close(void)$/;"	f
sys_close	sysfile.s	/^sys_close:$/;"	l
sys_date	cs550_syscall.c	/^sys_date(void){$/;"	f
sys_date	cs550_syscall.s	/^sys_date:$/;"	l
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f
sys_dup	sysfile.s	/^sys_dup:$/;"	l
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f
sys_exec	sysfile.s	/^sys_exec:$/;"	l
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f
sys_exit	sysproc.s	/^sys_exit:$/;"	l
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f
sys_fork	sysproc.s	/^sys_fork:$/;"	l
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f
sys_fstat	sysfile.s	/^sys_fstat:$/;"	l
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f
sys_getpid	sysproc.s	/^sys_getpid:$/;"	l
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f
sys_kill	sysproc.s	/^sys_kill:$/;"	l
sys_link	sysfile.c	/^sys_link(void)$/;"	f
sys_link	sysfile.s	/^sys_link:$/;"	l
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mkdir	sysfile.s	/^sys_mkdir:$/;"	l
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f
sys_mknod	sysfile.s	/^sys_mknod:$/;"	l
sys_open	sysfile.c	/^sys_open(void)$/;"	f
sys_open	sysfile.s	/^sys_open:$/;"	l
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f
sys_pipe	sysfile.s	/^sys_pipe:$/;"	l
sys_read	sysfile.c	/^sys_read(void)$/;"	f
sys_read	sysfile.s	/^sys_read:$/;"	l
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f
sys_sbrk	sysproc.s	/^sys_sbrk:$/;"	l
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f
sys_sleep	sysproc.s	/^sys_sleep:$/;"	l
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f
sys_unlink	sysfile.s	/^sys_unlink:$/;"	l
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f
sys_uptime	sysproc.s	/^sys_uptime:$/;"	l
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f
sys_wait	sysproc.s	/^sys_wait:$/;"	l
sys_write	sysfile.c	/^sys_write(void)$/;"	f
sys_write	sysfile.s	/^sys_write:$/;"	l
syscall	syscall.c	/^syscall(void)$/;"	f
syscall	syscall.s	/^syscall:$/;"	l
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
syscalls	syscall.s	/^syscalls:$/;"	l
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	kernel.asm	/^  sz = proc->sz;$/;"	d
sz	proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
test_date	cs550_user.c	/^void test_date(){$/;"	f
test_date	cs550_user.s	/^test_date:$/;"	l
test_getpid	cs550_user.c	/^void test_getpid(){$/;"	f
test_getpid	cs550_user.s	/^test_getpid:$/;"	l
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
ticks	trap.c	/^uint ticks;$/;"	v
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
timerinit	timer.c	/^timerinit(void)$/;"	f
timerinit	timer.s	/^timerinit:$/;"	l
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
togglecode	kbd.s	/^togglecode:$/;"	l
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f
trap	trap.s	/^trap:$/;"	l
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe
trapret	kernel.asm	/^trapret:$/;"	l
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tvinit	trap.c	/^tvinit(void)$/;"	f
tvinit	trap.s	/^tvinit:$/;"	l
type	elf.h	/^  uint type;$/;"	m	struct:proghdr
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon4
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	file:
uartgetc	uart.s	/^uartgetc:$/;"	l
uartinit	uart.c	/^uartinit(void)$/;"	f
uartinit	uart.s	/^uartinit:$/;"	l
uartintr	uart.c	/^uartintr(void)$/;"	f
uartintr	uart.s	/^uartintr:$/;"	l
uartputc	uart.c	/^uartputc(int c)$/;"	f
uartputc	uart.s	/^uartputc:$/;"	l
uchar	kernel.asm	/^uchar ioapicid;$/;"	l
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
uint	cat.asm	/^uint$/;"	l
uint	cs550_user.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	forktest.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kernel.asm	/^uint ticks;$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	stressfs.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
uninit	usertests.c	/^char uninit[10000];$/;"	v
unlinkread	usertests.c	/^unlinkread(void)$/;"	f
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon7	file:
userinit	proc.c	/^userinit(void)$/;"	f
userinit	proc.s	/^userinit:$/;"	l
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f
uva2ka	vm.s	/^uva2ka:$/;"	l
v2p	kalloc.s	/^v2p:$/;"	l
v2p	main.s	/^v2p:$/;"	l
v2p	memlayout.h	/^static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }$/;"	f
v2p	vm.s	/^v2p:$/;"	l
va	kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	elf.h	/^  uint vaddr;$/;"	m	struct:proghdr
validateint	usertests.c	/^validateint(int *p)$/;"	f
validatetest	usertests.c	/^validatetest(void)$/;"	f
value	cs550_syscall.c	/^    Operation value;$/;"	m	struct:myMap	file:
vector0	kernel.asm	/^vector0:$/;"	l
vector0	vectors.S	/^vector0:$/;"	l
vector1	kernel.asm	/^vector1:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	kernel.asm	/^vector10:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	kernel.asm	/^vector100:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	kernel.asm	/^vector101:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	kernel.asm	/^vector102:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	kernel.asm	/^vector103:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	kernel.asm	/^vector104:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	kernel.asm	/^vector105:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	kernel.asm	/^vector106:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	kernel.asm	/^vector107:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	kernel.asm	/^vector108:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	kernel.asm	/^vector109:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	kernel.asm	/^vector11:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	kernel.asm	/^vector110:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	kernel.asm	/^vector111:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	kernel.asm	/^vector112:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	kernel.asm	/^vector113:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	kernel.asm	/^vector114:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	kernel.asm	/^vector115:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	kernel.asm	/^vector116:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	kernel.asm	/^vector117:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	kernel.asm	/^vector118:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	kernel.asm	/^vector119:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	kernel.asm	/^vector12:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	kernel.asm	/^vector120:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	kernel.asm	/^vector121:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	kernel.asm	/^vector122:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	kernel.asm	/^vector123:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	kernel.asm	/^vector124:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	kernel.asm	/^vector125:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	kernel.asm	/^vector126:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	kernel.asm	/^vector127:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	kernel.asm	/^vector128:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	kernel.asm	/^vector129:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	kernel.asm	/^vector13:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	kernel.asm	/^vector130:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	kernel.asm	/^vector131:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	kernel.asm	/^vector132:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	kernel.asm	/^vector133:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	kernel.asm	/^vector134:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	kernel.asm	/^vector135:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	kernel.asm	/^vector136:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	kernel.asm	/^vector137:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	kernel.asm	/^vector138:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	kernel.asm	/^vector139:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	kernel.asm	/^vector14:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	kernel.asm	/^vector140:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	kernel.asm	/^vector141:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	kernel.asm	/^vector142:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	kernel.asm	/^vector143:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	kernel.asm	/^vector144:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	kernel.asm	/^vector145:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	kernel.asm	/^vector146:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	kernel.asm	/^vector147:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	kernel.asm	/^vector148:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	kernel.asm	/^vector149:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	kernel.asm	/^vector15:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	kernel.asm	/^vector150:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	kernel.asm	/^vector151:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	kernel.asm	/^vector152:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	kernel.asm	/^vector153:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	kernel.asm	/^vector154:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	kernel.asm	/^vector155:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	kernel.asm	/^vector156:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	kernel.asm	/^vector157:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	kernel.asm	/^vector158:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	kernel.asm	/^vector159:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	kernel.asm	/^vector16:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	kernel.asm	/^vector160:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	kernel.asm	/^vector161:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	kernel.asm	/^vector162:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	kernel.asm	/^vector163:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	kernel.asm	/^vector164:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	kernel.asm	/^vector165:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	kernel.asm	/^vector166:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	kernel.asm	/^vector167:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	kernel.asm	/^vector168:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	kernel.asm	/^vector169:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	kernel.asm	/^vector17:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	kernel.asm	/^vector170:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	kernel.asm	/^vector171:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	kernel.asm	/^vector172:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	kernel.asm	/^vector173:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	kernel.asm	/^vector174:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	kernel.asm	/^vector175:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	kernel.asm	/^vector176:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	kernel.asm	/^vector177:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	kernel.asm	/^vector178:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	kernel.asm	/^vector179:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	kernel.asm	/^vector18:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	kernel.asm	/^vector180:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	kernel.asm	/^vector181:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	kernel.asm	/^vector182:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	kernel.asm	/^vector183:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	kernel.asm	/^vector184:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	kernel.asm	/^vector185:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	kernel.asm	/^vector186:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	kernel.asm	/^vector187:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	kernel.asm	/^vector188:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	kernel.asm	/^vector189:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	kernel.asm	/^vector19:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	kernel.asm	/^vector190:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	kernel.asm	/^vector191:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	kernel.asm	/^vector192:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	kernel.asm	/^vector193:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	kernel.asm	/^vector194:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	kernel.asm	/^vector195:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	kernel.asm	/^vector196:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	kernel.asm	/^vector197:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	kernel.asm	/^vector198:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	kernel.asm	/^vector199:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	kernel.asm	/^vector2:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	kernel.asm	/^vector20:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	kernel.asm	/^vector200:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	kernel.asm	/^vector201:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	kernel.asm	/^vector202:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	kernel.asm	/^vector203:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	kernel.asm	/^vector204:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	kernel.asm	/^vector205:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	kernel.asm	/^vector206:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	kernel.asm	/^vector207:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	kernel.asm	/^vector208:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	kernel.asm	/^vector209:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	kernel.asm	/^vector21:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	kernel.asm	/^vector210:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	kernel.asm	/^vector211:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	kernel.asm	/^vector212:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	kernel.asm	/^vector213:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	kernel.asm	/^vector214:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	kernel.asm	/^vector215:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	kernel.asm	/^vector216:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	kernel.asm	/^vector217:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	kernel.asm	/^vector218:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	kernel.asm	/^vector219:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	kernel.asm	/^vector22:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	kernel.asm	/^vector220:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	kernel.asm	/^vector221:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	kernel.asm	/^vector222:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	kernel.asm	/^vector223:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	kernel.asm	/^vector224:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	kernel.asm	/^vector225:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	kernel.asm	/^vector226:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	kernel.asm	/^vector227:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	kernel.asm	/^vector228:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	kernel.asm	/^vector229:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	kernel.asm	/^vector23:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	kernel.asm	/^vector230:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	kernel.asm	/^vector231:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	kernel.asm	/^vector232:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	kernel.asm	/^vector233:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	kernel.asm	/^vector234:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	kernel.asm	/^vector235:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	kernel.asm	/^vector236:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	kernel.asm	/^vector237:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	kernel.asm	/^vector238:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	kernel.asm	/^vector239:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	kernel.asm	/^vector24:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	kernel.asm	/^vector240:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	kernel.asm	/^vector241:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	kernel.asm	/^vector242:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	kernel.asm	/^vector243:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	kernel.asm	/^vector244:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	kernel.asm	/^vector245:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	kernel.asm	/^vector246:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	kernel.asm	/^vector247:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	kernel.asm	/^vector248:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	kernel.asm	/^vector249:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	kernel.asm	/^vector25:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	kernel.asm	/^vector250:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	kernel.asm	/^vector251:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	kernel.asm	/^vector252:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	kernel.asm	/^vector253:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	kernel.asm	/^vector254:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	kernel.asm	/^vector255:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	kernel.asm	/^vector26:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	kernel.asm	/^vector27:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	kernel.asm	/^vector28:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	kernel.asm	/^vector29:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	kernel.asm	/^vector3:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	kernel.asm	/^vector30:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	kernel.asm	/^vector31:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	kernel.asm	/^vector32:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	kernel.asm	/^vector33:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	kernel.asm	/^vector34:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	kernel.asm	/^vector35:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	kernel.asm	/^vector36:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	kernel.asm	/^vector37:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	kernel.asm	/^vector38:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	kernel.asm	/^vector39:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	kernel.asm	/^vector4:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	kernel.asm	/^vector40:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	kernel.asm	/^vector41:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	kernel.asm	/^vector42:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	kernel.asm	/^vector43:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	kernel.asm	/^vector44:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	kernel.asm	/^vector45:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	kernel.asm	/^vector46:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	kernel.asm	/^vector47:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	kernel.asm	/^vector48:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	kernel.asm	/^vector49:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	kernel.asm	/^vector5:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	kernel.asm	/^vector50:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	kernel.asm	/^vector51:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	kernel.asm	/^vector52:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	kernel.asm	/^vector53:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	kernel.asm	/^vector54:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	kernel.asm	/^vector55:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	kernel.asm	/^vector56:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	kernel.asm	/^vector57:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	kernel.asm	/^vector58:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	kernel.asm	/^vector59:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	kernel.asm	/^vector6:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	kernel.asm	/^vector60:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	kernel.asm	/^vector61:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	kernel.asm	/^vector62:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	kernel.asm	/^vector63:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	kernel.asm	/^vector64:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	kernel.asm	/^vector65:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	kernel.asm	/^vector66:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	kernel.asm	/^vector67:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	kernel.asm	/^vector68:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	kernel.asm	/^vector69:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	kernel.asm	/^vector7:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	kernel.asm	/^vector70:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	kernel.asm	/^vector71:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	kernel.asm	/^vector72:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	kernel.asm	/^vector73:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	kernel.asm	/^vector74:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	kernel.asm	/^vector75:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	kernel.asm	/^vector76:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	kernel.asm	/^vector77:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	kernel.asm	/^vector78:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	kernel.asm	/^vector79:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	kernel.asm	/^vector8:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	kernel.asm	/^vector80:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	kernel.asm	/^vector81:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	kernel.asm	/^vector82:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	kernel.asm	/^vector83:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	kernel.asm	/^vector84:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	kernel.asm	/^vector85:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	kernel.asm	/^vector86:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	kernel.asm	/^vector87:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	kernel.asm	/^vector88:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	kernel.asm	/^vector89:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	kernel.asm	/^vector9:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	kernel.asm	/^vector90:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	kernel.asm	/^vector91:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	kernel.asm	/^vector92:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	kernel.asm	/^vector93:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	kernel.asm	/^vector94:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	kernel.asm	/^vector95:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	kernel.asm	/^vector96:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	kernel.asm	/^vector97:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	kernel.asm	/^vector98:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	kernel.asm	/^vector99:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
virt	vm.c	/^  void *virt;$/;"	m	struct:kmap	file:
void	bootblock.asm	/^void readseg(uchar*, uint, uint);$/;"	l
void	bootblock.asm	/^void$/;"	l
void	cat.asm	/^void$/;"	l
void	cs550_user.asm	/^void ht_call01() {$/;"	l
void	cs550_user.asm	/^void ls_call01() {$/;"	l
void	cs550_user.asm	/^void ls_call02() {$/;"	l
void	cs550_user.asm	/^void ls_call03() {$/;"	l
void	cs550_user.asm	/^void ls_call04() {$/;"	l
void	cs550_user.asm	/^void ls_call05() {$/;"	l
void	cs550_user.asm	/^void test_date(){$/;"	l
void	cs550_user.asm	/^void test_getpid(){$/;"	l
void	cs550_user.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	forktest.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void cmostime(struct rtcdate *r)$/;"	l
void	kernel.asm	/^void ht_init(){$/;"	l
void	kernel.asm	/^void ht_insert(char *p, int (* func )(void)){$/;"	l
void	kernel.asm	/^void ls_init(void){$/;"	l
void	kernel.asm	/^void ls_insert(char *k, int (* val)(void)){$/;"	l
void	kernel.asm	/^void printHash(){$/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	stressfs.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
volatile	kernel.asm	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon6	file:
wait	proc.c	/^wait(void)$/;"	f
wait	proc.s	/^wait:$/;"	l
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f
wakeup	proc.c	/^wakeup(void *chan)$/;"	f
wakeup	proc.s	/^wakeup:$/;"	l
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:
wakeup1	proc.s	/^wakeup1:$/;"	l
walkpgdir	vm.c	/^walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	file:
walkpgdir	vm.s	/^walkpgdir:$/;"	l
wc	wc.c	/^wc(int fd, char *name)$/;"	f
wc	wc.s	/^wc:$/;"	l
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
whitespace	sh.s	/^whitespace:$/;"	l
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	file.h	/^  char writable;$/;"	m	struct:file
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
write_head	log.c	/^write_head(void)$/;"	f	file:
write_head	log.s	/^write_head:$/;"	l
write_log	log.c	/^write_log(void)$/;"	f	file:
write_log	log.s	/^write_log:$/;"	l
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writei	fs.s	/^writei:$/;"	l
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	usertests.c	/^writetest(void)$/;"	f
writetest1	usertests.c	/^writetest1(void)$/;"	f
wrv	kernel.asm	/^  wrv = (ushort*)P2V((0x40<<4 | 0x67));  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	cs550_user.asm	/^    x = -xx;$/;"	d
x	cs550_user.asm	/^    x = xx;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	stressfs.asm	/^    x = -xx;$/;"	d
x	stressfs.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	main.s	/^xchg:$/;"	l
xchg	spinlock.s	/^xchg:$/;"	l
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f
xint	mkfs.c	/^xint(uint x)$/;"	f
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	mkfs.c	/^xshort(ushort x)$/;"	f
xticks	kernel.asm	/^  xticks = ticks;$/;"	d
year	date.h	/^  uint year;$/;"	m	struct:rtcdate
yield	proc.c	/^yield(void)$/;"	f
yield	proc.s	/^yield:$/;"	l
zeroes	mkfs.c	/^char zeroes[BSIZE];$/;"	v
